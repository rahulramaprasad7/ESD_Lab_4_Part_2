                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _timer0_isr
                                     12 	.globl _main
                                     13 	.globl _goToXY
                                     14 	.globl _timerInit
                                     15 	.globl _goToAddr
                                     16 	.globl _lcdClear
                                     17 	.globl _lcdPutCh
                                     18 	.globl _busyWait
                                     19 	.globl _lcdInit
                                     20 	.globl _memset
                                     21 	.globl _P5_7
                                     22 	.globl _P5_6
                                     23 	.globl _P5_5
                                     24 	.globl _P5_4
                                     25 	.globl _P5_3
                                     26 	.globl _P5_2
                                     27 	.globl _P5_1
                                     28 	.globl _P5_0
                                     29 	.globl _P4_7
                                     30 	.globl _P4_6
                                     31 	.globl _P4_5
                                     32 	.globl _P4_4
                                     33 	.globl _P4_3
                                     34 	.globl _P4_2
                                     35 	.globl _P4_1
                                     36 	.globl _P4_0
                                     37 	.globl _PX0L
                                     38 	.globl _PT0L
                                     39 	.globl _PX1L
                                     40 	.globl _PT1L
                                     41 	.globl _PSL
                                     42 	.globl _PT2L
                                     43 	.globl _PPCL
                                     44 	.globl _EC
                                     45 	.globl _CCF0
                                     46 	.globl _CCF1
                                     47 	.globl _CCF2
                                     48 	.globl _CCF3
                                     49 	.globl _CCF4
                                     50 	.globl _CR
                                     51 	.globl _CF
                                     52 	.globl _TF2
                                     53 	.globl _EXF2
                                     54 	.globl _RCLK
                                     55 	.globl _TCLK
                                     56 	.globl _EXEN2
                                     57 	.globl _TR2
                                     58 	.globl _C_T2
                                     59 	.globl _CP_RL2
                                     60 	.globl _T2CON_7
                                     61 	.globl _T2CON_6
                                     62 	.globl _T2CON_5
                                     63 	.globl _T2CON_4
                                     64 	.globl _T2CON_3
                                     65 	.globl _T2CON_2
                                     66 	.globl _T2CON_1
                                     67 	.globl _T2CON_0
                                     68 	.globl _PT2
                                     69 	.globl _ET2
                                     70 	.globl _CY
                                     71 	.globl _AC
                                     72 	.globl _F0
                                     73 	.globl _RS1
                                     74 	.globl _RS0
                                     75 	.globl _OV
                                     76 	.globl _F1
                                     77 	.globl _P
                                     78 	.globl _PS
                                     79 	.globl _PT1
                                     80 	.globl _PX1
                                     81 	.globl _PT0
                                     82 	.globl _PX0
                                     83 	.globl _RD
                                     84 	.globl _WR
                                     85 	.globl _T1
                                     86 	.globl _T0
                                     87 	.globl _INT1
                                     88 	.globl _INT0
                                     89 	.globl _TXD
                                     90 	.globl _RXD
                                     91 	.globl _P3_7
                                     92 	.globl _P3_6
                                     93 	.globl _P3_5
                                     94 	.globl _P3_4
                                     95 	.globl _P3_3
                                     96 	.globl _P3_2
                                     97 	.globl _P3_1
                                     98 	.globl _P3_0
                                     99 	.globl _EA
                                    100 	.globl _ES
                                    101 	.globl _ET1
                                    102 	.globl _EX1
                                    103 	.globl _ET0
                                    104 	.globl _EX0
                                    105 	.globl _P2_7
                                    106 	.globl _P2_6
                                    107 	.globl _P2_5
                                    108 	.globl _P2_4
                                    109 	.globl _P2_3
                                    110 	.globl _P2_2
                                    111 	.globl _P2_1
                                    112 	.globl _P2_0
                                    113 	.globl _SM0
                                    114 	.globl _SM1
                                    115 	.globl _SM2
                                    116 	.globl _REN
                                    117 	.globl _TB8
                                    118 	.globl _RB8
                                    119 	.globl _TI
                                    120 	.globl _RI
                                    121 	.globl _P1_7
                                    122 	.globl _P1_6
                                    123 	.globl _P1_5
                                    124 	.globl _P1_4
                                    125 	.globl _P1_3
                                    126 	.globl _P1_2
                                    127 	.globl _P1_1
                                    128 	.globl _P1_0
                                    129 	.globl _TF1
                                    130 	.globl _TR1
                                    131 	.globl _TF0
                                    132 	.globl _TR0
                                    133 	.globl _IE1
                                    134 	.globl _IT1
                                    135 	.globl _IE0
                                    136 	.globl _IT0
                                    137 	.globl _P0_7
                                    138 	.globl _P0_6
                                    139 	.globl _P0_5
                                    140 	.globl _P0_4
                                    141 	.globl _P0_3
                                    142 	.globl _P0_2
                                    143 	.globl _P0_1
                                    144 	.globl _P0_0
                                    145 	.globl _EECON
                                    146 	.globl _KBF
                                    147 	.globl _KBE
                                    148 	.globl _KBLS
                                    149 	.globl _BRL
                                    150 	.globl _BDRCON
                                    151 	.globl _T2MOD
                                    152 	.globl _SPDAT
                                    153 	.globl _SPSTA
                                    154 	.globl _SPCON
                                    155 	.globl _SADEN
                                    156 	.globl _SADDR
                                    157 	.globl _WDTPRG
                                    158 	.globl _WDTRST
                                    159 	.globl _P5
                                    160 	.globl _P4
                                    161 	.globl _IPH1
                                    162 	.globl _IPL1
                                    163 	.globl _IPH0
                                    164 	.globl _IPL0
                                    165 	.globl _IEN1
                                    166 	.globl _IEN0
                                    167 	.globl _CMOD
                                    168 	.globl _CL
                                    169 	.globl _CH
                                    170 	.globl _CCON
                                    171 	.globl _CCAPM4
                                    172 	.globl _CCAPM3
                                    173 	.globl _CCAPM2
                                    174 	.globl _CCAPM1
                                    175 	.globl _CCAPM0
                                    176 	.globl _CCAP4L
                                    177 	.globl _CCAP3L
                                    178 	.globl _CCAP2L
                                    179 	.globl _CCAP1L
                                    180 	.globl _CCAP0L
                                    181 	.globl _CCAP4H
                                    182 	.globl _CCAP3H
                                    183 	.globl _CCAP2H
                                    184 	.globl _CCAP1H
                                    185 	.globl _CCAP0H
                                    186 	.globl _CKCON1
                                    187 	.globl _CKCON0
                                    188 	.globl _CKRL
                                    189 	.globl _AUXR1
                                    190 	.globl _AUXR
                                    191 	.globl _TH2
                                    192 	.globl _TL2
                                    193 	.globl _RCAP2H
                                    194 	.globl _RCAP2L
                                    195 	.globl _T2CON
                                    196 	.globl _B
                                    197 	.globl _ACC
                                    198 	.globl _PSW
                                    199 	.globl _IP
                                    200 	.globl _P3
                                    201 	.globl _IE
                                    202 	.globl _P2
                                    203 	.globl _SBUF
                                    204 	.globl _SCON
                                    205 	.globl _P1
                                    206 	.globl _TH1
                                    207 	.globl _TH0
                                    208 	.globl _TL1
                                    209 	.globl _TL0
                                    210 	.globl _TMOD
                                    211 	.globl _TCON
                                    212 	.globl _PCON
                                    213 	.globl _DPH
                                    214 	.globl _DPL
                                    215 	.globl _SP
                                    216 	.globl _P0
                                    217 	.globl _check
                                    218 	.globl _x2
                                    219 	.globl _hour
                                    220 	.globl _min
                                    221 	.globl _sec
                                    222 	.globl _partSec
                                    223 	.globl _writeCharacter
                                    224 	.globl _busyPoll
                                    225 	.globl _lcdGeneral
                                    226 	.globl _printTimeStamp
                                    227 ;--------------------------------------------------------
                                    228 ; special function registers
                                    229 ;--------------------------------------------------------
                                    230 	.area RSEG    (ABS,DATA)
      000000                        231 	.org 0x0000
                           000080   232 _P0	=	0x0080
                           000081   233 _SP	=	0x0081
                           000082   234 _DPL	=	0x0082
                           000083   235 _DPH	=	0x0083
                           000087   236 _PCON	=	0x0087
                           000088   237 _TCON	=	0x0088
                           000089   238 _TMOD	=	0x0089
                           00008A   239 _TL0	=	0x008a
                           00008B   240 _TL1	=	0x008b
                           00008C   241 _TH0	=	0x008c
                           00008D   242 _TH1	=	0x008d
                           000090   243 _P1	=	0x0090
                           000098   244 _SCON	=	0x0098
                           000099   245 _SBUF	=	0x0099
                           0000A0   246 _P2	=	0x00a0
                           0000A8   247 _IE	=	0x00a8
                           0000B0   248 _P3	=	0x00b0
                           0000B8   249 _IP	=	0x00b8
                           0000D0   250 _PSW	=	0x00d0
                           0000E0   251 _ACC	=	0x00e0
                           0000F0   252 _B	=	0x00f0
                           0000C8   253 _T2CON	=	0x00c8
                           0000CA   254 _RCAP2L	=	0x00ca
                           0000CB   255 _RCAP2H	=	0x00cb
                           0000CC   256 _TL2	=	0x00cc
                           0000CD   257 _TH2	=	0x00cd
                           00008E   258 _AUXR	=	0x008e
                           0000A2   259 _AUXR1	=	0x00a2
                           000097   260 _CKRL	=	0x0097
                           00008F   261 _CKCON0	=	0x008f
                           0000AF   262 _CKCON1	=	0x00af
                           0000FA   263 _CCAP0H	=	0x00fa
                           0000FB   264 _CCAP1H	=	0x00fb
                           0000FC   265 _CCAP2H	=	0x00fc
                           0000FD   266 _CCAP3H	=	0x00fd
                           0000FE   267 _CCAP4H	=	0x00fe
                           0000EA   268 _CCAP0L	=	0x00ea
                           0000EB   269 _CCAP1L	=	0x00eb
                           0000EC   270 _CCAP2L	=	0x00ec
                           0000ED   271 _CCAP3L	=	0x00ed
                           0000EE   272 _CCAP4L	=	0x00ee
                           0000DA   273 _CCAPM0	=	0x00da
                           0000DB   274 _CCAPM1	=	0x00db
                           0000DC   275 _CCAPM2	=	0x00dc
                           0000DD   276 _CCAPM3	=	0x00dd
                           0000DE   277 _CCAPM4	=	0x00de
                           0000D8   278 _CCON	=	0x00d8
                           0000F9   279 _CH	=	0x00f9
                           0000E9   280 _CL	=	0x00e9
                           0000D9   281 _CMOD	=	0x00d9
                           0000A8   282 _IEN0	=	0x00a8
                           0000B1   283 _IEN1	=	0x00b1
                           0000B8   284 _IPL0	=	0x00b8
                           0000B7   285 _IPH0	=	0x00b7
                           0000B2   286 _IPL1	=	0x00b2
                           0000B3   287 _IPH1	=	0x00b3
                           0000C0   288 _P4	=	0x00c0
                           0000E8   289 _P5	=	0x00e8
                           0000A6   290 _WDTRST	=	0x00a6
                           0000A7   291 _WDTPRG	=	0x00a7
                           0000A9   292 _SADDR	=	0x00a9
                           0000B9   293 _SADEN	=	0x00b9
                           0000C3   294 _SPCON	=	0x00c3
                           0000C4   295 _SPSTA	=	0x00c4
                           0000C5   296 _SPDAT	=	0x00c5
                           0000C9   297 _T2MOD	=	0x00c9
                           00009B   298 _BDRCON	=	0x009b
                           00009A   299 _BRL	=	0x009a
                           00009C   300 _KBLS	=	0x009c
                           00009D   301 _KBE	=	0x009d
                           00009E   302 _KBF	=	0x009e
                           0000D2   303 _EECON	=	0x00d2
                                    304 ;--------------------------------------------------------
                                    305 ; special function bits
                                    306 ;--------------------------------------------------------
                                    307 	.area RSEG    (ABS,DATA)
      000000                        308 	.org 0x0000
                           000080   309 _P0_0	=	0x0080
                           000081   310 _P0_1	=	0x0081
                           000082   311 _P0_2	=	0x0082
                           000083   312 _P0_3	=	0x0083
                           000084   313 _P0_4	=	0x0084
                           000085   314 _P0_5	=	0x0085
                           000086   315 _P0_6	=	0x0086
                           000087   316 _P0_7	=	0x0087
                           000088   317 _IT0	=	0x0088
                           000089   318 _IE0	=	0x0089
                           00008A   319 _IT1	=	0x008a
                           00008B   320 _IE1	=	0x008b
                           00008C   321 _TR0	=	0x008c
                           00008D   322 _TF0	=	0x008d
                           00008E   323 _TR1	=	0x008e
                           00008F   324 _TF1	=	0x008f
                           000090   325 _P1_0	=	0x0090
                           000091   326 _P1_1	=	0x0091
                           000092   327 _P1_2	=	0x0092
                           000093   328 _P1_3	=	0x0093
                           000094   329 _P1_4	=	0x0094
                           000095   330 _P1_5	=	0x0095
                           000096   331 _P1_6	=	0x0096
                           000097   332 _P1_7	=	0x0097
                           000098   333 _RI	=	0x0098
                           000099   334 _TI	=	0x0099
                           00009A   335 _RB8	=	0x009a
                           00009B   336 _TB8	=	0x009b
                           00009C   337 _REN	=	0x009c
                           00009D   338 _SM2	=	0x009d
                           00009E   339 _SM1	=	0x009e
                           00009F   340 _SM0	=	0x009f
                           0000A0   341 _P2_0	=	0x00a0
                           0000A1   342 _P2_1	=	0x00a1
                           0000A2   343 _P2_2	=	0x00a2
                           0000A3   344 _P2_3	=	0x00a3
                           0000A4   345 _P2_4	=	0x00a4
                           0000A5   346 _P2_5	=	0x00a5
                           0000A6   347 _P2_6	=	0x00a6
                           0000A7   348 _P2_7	=	0x00a7
                           0000A8   349 _EX0	=	0x00a8
                           0000A9   350 _ET0	=	0x00a9
                           0000AA   351 _EX1	=	0x00aa
                           0000AB   352 _ET1	=	0x00ab
                           0000AC   353 _ES	=	0x00ac
                           0000AF   354 _EA	=	0x00af
                           0000B0   355 _P3_0	=	0x00b0
                           0000B1   356 _P3_1	=	0x00b1
                           0000B2   357 _P3_2	=	0x00b2
                           0000B3   358 _P3_3	=	0x00b3
                           0000B4   359 _P3_4	=	0x00b4
                           0000B5   360 _P3_5	=	0x00b5
                           0000B6   361 _P3_6	=	0x00b6
                           0000B7   362 _P3_7	=	0x00b7
                           0000B0   363 _RXD	=	0x00b0
                           0000B1   364 _TXD	=	0x00b1
                           0000B2   365 _INT0	=	0x00b2
                           0000B3   366 _INT1	=	0x00b3
                           0000B4   367 _T0	=	0x00b4
                           0000B5   368 _T1	=	0x00b5
                           0000B6   369 _WR	=	0x00b6
                           0000B7   370 _RD	=	0x00b7
                           0000B8   371 _PX0	=	0x00b8
                           0000B9   372 _PT0	=	0x00b9
                           0000BA   373 _PX1	=	0x00ba
                           0000BB   374 _PT1	=	0x00bb
                           0000BC   375 _PS	=	0x00bc
                           0000D0   376 _P	=	0x00d0
                           0000D1   377 _F1	=	0x00d1
                           0000D2   378 _OV	=	0x00d2
                           0000D3   379 _RS0	=	0x00d3
                           0000D4   380 _RS1	=	0x00d4
                           0000D5   381 _F0	=	0x00d5
                           0000D6   382 _AC	=	0x00d6
                           0000D7   383 _CY	=	0x00d7
                           0000AD   384 _ET2	=	0x00ad
                           0000BD   385 _PT2	=	0x00bd
                           0000C8   386 _T2CON_0	=	0x00c8
                           0000C9   387 _T2CON_1	=	0x00c9
                           0000CA   388 _T2CON_2	=	0x00ca
                           0000CB   389 _T2CON_3	=	0x00cb
                           0000CC   390 _T2CON_4	=	0x00cc
                           0000CD   391 _T2CON_5	=	0x00cd
                           0000CE   392 _T2CON_6	=	0x00ce
                           0000CF   393 _T2CON_7	=	0x00cf
                           0000C8   394 _CP_RL2	=	0x00c8
                           0000C9   395 _C_T2	=	0x00c9
                           0000CA   396 _TR2	=	0x00ca
                           0000CB   397 _EXEN2	=	0x00cb
                           0000CC   398 _TCLK	=	0x00cc
                           0000CD   399 _RCLK	=	0x00cd
                           0000CE   400 _EXF2	=	0x00ce
                           0000CF   401 _TF2	=	0x00cf
                           0000DF   402 _CF	=	0x00df
                           0000DE   403 _CR	=	0x00de
                           0000DC   404 _CCF4	=	0x00dc
                           0000DB   405 _CCF3	=	0x00db
                           0000DA   406 _CCF2	=	0x00da
                           0000D9   407 _CCF1	=	0x00d9
                           0000D8   408 _CCF0	=	0x00d8
                           0000AE   409 _EC	=	0x00ae
                           0000BE   410 _PPCL	=	0x00be
                           0000BD   411 _PT2L	=	0x00bd
                           0000BC   412 _PSL	=	0x00bc
                           0000BB   413 _PT1L	=	0x00bb
                           0000BA   414 _PX1L	=	0x00ba
                           0000B9   415 _PT0L	=	0x00b9
                           0000B8   416 _PX0L	=	0x00b8
                           0000C0   417 _P4_0	=	0x00c0
                           0000C1   418 _P4_1	=	0x00c1
                           0000C2   419 _P4_2	=	0x00c2
                           0000C3   420 _P4_3	=	0x00c3
                           0000C4   421 _P4_4	=	0x00c4
                           0000C5   422 _P4_5	=	0x00c5
                           0000C6   423 _P4_6	=	0x00c6
                           0000C7   424 _P4_7	=	0x00c7
                           0000E8   425 _P5_0	=	0x00e8
                           0000E9   426 _P5_1	=	0x00e9
                           0000EA   427 _P5_2	=	0x00ea
                           0000EB   428 _P5_3	=	0x00eb
                           0000EC   429 _P5_4	=	0x00ec
                           0000ED   430 _P5_5	=	0x00ed
                           0000EE   431 _P5_6	=	0x00ee
                           0000EF   432 _P5_7	=	0x00ef
                                    433 ;--------------------------------------------------------
                                    434 ; overlayable register banks
                                    435 ;--------------------------------------------------------
                                    436 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        437 	.ds 8
                                    438 ;--------------------------------------------------------
                                    439 ; internal ram data
                                    440 ;--------------------------------------------------------
                                    441 	.area DSEG    (DATA)
                                    442 ;--------------------------------------------------------
                                    443 ; overlayable items in internal ram 
                                    444 ;--------------------------------------------------------
                                    445 ;--------------------------------------------------------
                                    446 ; Stack segment in internal ram 
                                    447 ;--------------------------------------------------------
                                    448 	.area	SSEG
      000000                        449 __start__stack:
      000000                        450 	.ds	1
                                    451 
                                    452 ;--------------------------------------------------------
                                    453 ; indirectly addressable internal ram data
                                    454 ;--------------------------------------------------------
                                    455 	.area ISEG    (DATA)
                                    456 ;--------------------------------------------------------
                                    457 ; absolute internal ram data
                                    458 ;--------------------------------------------------------
                                    459 	.area IABS    (ABS,DATA)
                                    460 	.area IABS    (ABS,DATA)
                                    461 ;--------------------------------------------------------
                                    462 ; bit data
                                    463 ;--------------------------------------------------------
                                    464 	.area BSEG    (BIT)
                                    465 ;--------------------------------------------------------
                                    466 ; paged external ram data
                                    467 ;--------------------------------------------------------
                                    468 	.area PSEG    (PAG,XDATA)
                                    469 ;--------------------------------------------------------
                                    470 ; external ram data
                                    471 ;--------------------------------------------------------
                                    472 	.area XSEG    (XDATA)
                           00F000   473 _lcdGeneral	=	0xf000
                           00F200   474 _busyPoll	=	0xf200
                           00F100   475 _writeCharacter	=	0xf100
      000000                        476 _partSec::
      000000                        477 	.ds 1
      000001                        478 _sec::
      000001                        479 	.ds 1
      000002                        480 _min::
      000002                        481 	.ds 1
      000003                        482 _hour::
      000003                        483 	.ds 1
      000004                        484 _x2::
      000004                        485 	.ds 1
      000005                        486 _check::
      000005                        487 	.ds 1
      000006                        488 _main_input_65537_41:
      000006                        489 	.ds 60
                                    490 ;--------------------------------------------------------
                                    491 ; absolute external ram data
                                    492 ;--------------------------------------------------------
                                    493 	.area XABS    (ABS,XDATA)
                                    494 ;--------------------------------------------------------
                                    495 ; external initialized ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area XISEG   (XDATA)
                                    498 	.area HOME    (CODE)
                                    499 	.area GSINIT0 (CODE)
                                    500 	.area GSINIT1 (CODE)
                                    501 	.area GSINIT2 (CODE)
                                    502 	.area GSINIT3 (CODE)
                                    503 	.area GSINIT4 (CODE)
                                    504 	.area GSINIT5 (CODE)
                                    505 	.area GSINIT  (CODE)
                                    506 	.area GSFINAL (CODE)
                                    507 	.area CSEG    (CODE)
                                    508 ;--------------------------------------------------------
                                    509 ; interrupt vector 
                                    510 ;--------------------------------------------------------
                                    511 	.area HOME    (CODE)
      000000                        512 __interrupt_vect:
      000000 02r00r00         [24]  513 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  514 	reti
      000004                        515 	.ds	7
      00000B 02r01r2B         [24]  516 	ljmp	_timer0_isr
                                    517 ;--------------------------------------------------------
                                    518 ; global & static initialisations
                                    519 ;--------------------------------------------------------
                                    520 	.area HOME    (CODE)
                                    521 	.area GSINIT  (CODE)
                                    522 	.area GSFINAL (CODE)
                                    523 	.area GSINIT  (CODE)
                                    524 	.globl __sdcc_gsinit_startup
                                    525 	.globl __sdcc_program_startup
                                    526 	.globl __start__stack
                                    527 	.globl __mcs51_genXINIT
                                    528 	.globl __mcs51_genXRAMCLEAR
                                    529 	.globl __mcs51_genRAMCLEAR
                                    530 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  531 	ljmp	__sdcc_program_startup
                                    532 ;--------------------------------------------------------
                                    533 ; Home
                                    534 ;--------------------------------------------------------
                                    535 	.area HOME    (CODE)
                                    536 	.area HOME    (CODE)
      00000E                        537 __sdcc_program_startup:
      00000E 02r00r00         [24]  538 	ljmp	_main
                                    539 ;	return from main will return to caller
                                    540 ;--------------------------------------------------------
                                    541 ; code
                                    542 ;--------------------------------------------------------
                                    543 	.area CSEG    (CODE)
                                    544 ;------------------------------------------------------------
                                    545 ;Allocation info for local variables in function 'main'
                                    546 ;------------------------------------------------------------
                                    547 ;input                     Allocated with name '_main_input_65537_41'
                                    548 ;------------------------------------------------------------
                                    549 ;	main.c:12: void main()
                                    550 ;	-----------------------------------------
                                    551 ;	 function main
                                    552 ;	-----------------------------------------
      000000                        553 _main:
                           000007   554 	ar7 = 0x07
                           000006   555 	ar6 = 0x06
                           000005   556 	ar5 = 0x05
                           000004   557 	ar4 = 0x04
                           000003   558 	ar3 = 0x03
                           000002   559 	ar2 = 0x02
                           000001   560 	ar1 = 0x01
                           000000   561 	ar0 = 0x00
                                    562 ;	main.c:14: check = 0;
      000000 90r00r05         [24]  563 	mov	dptr,#_check
      000003 E4               [12]  564 	clr	a
      000004 F0               [24]  565 	movx	@dptr,a
                                    566 ;	main.c:15: partSec = 0;
      000005 90r00r00         [24]  567 	mov	dptr,#_partSec
      000008 F0               [24]  568 	movx	@dptr,a
                                    569 ;	main.c:16: sec = 0;
      000009 90r00r01         [24]  570 	mov	dptr,#_sec
      00000C F0               [24]  571 	movx	@dptr,a
                                    572 ;	main.c:17: min = 0;
      00000D 90r00r02         [24]  573 	mov	dptr,#_min
      000010 F0               [24]  574 	movx	@dptr,a
                                    575 ;	main.c:18: hour = 0;
      000011 90r00r03         [24]  576 	mov	dptr,#_hour
      000014 F0               [24]  577 	movx	@dptr,a
                                    578 ;	main.c:19: x2 = 0;
      000015 90r00r04         [24]  579 	mov	dptr,#_x2
      000018 F0               [24]  580 	movx	@dptr,a
                                    581 ;	main.c:21: memset(input, '\0',60);
      000019 90r00r00         [24]  582 	mov	dptr,#_memset_PARM_2
      00001C F0               [24]  583 	movx	@dptr,a
      00001D 90r00r00         [24]  584 	mov	dptr,#_memset_PARM_3
      000020 74 3C            [12]  585 	mov	a,#0x3c
      000022 F0               [24]  586 	movx	@dptr,a
      000023 E4               [12]  587 	clr	a
      000024 A3               [24]  588 	inc	dptr
      000025 F0               [24]  589 	movx	@dptr,a
      000026 90r00r06         [24]  590 	mov	dptr,#_main_input_65537_41
      000029 75 F0 00         [24]  591 	mov	b,#0x00
      00002C 12r00r00         [24]  592 	lcall	_memset
                                    593 ;	main.c:22: lcdInit();
      00002F 12r00r00         [24]  594 	lcall	_lcdInit
                                    595 ;	main.c:23: lcdClear();
      000032 12r00r00         [24]  596 	lcall	_lcdClear
                                    597 ;	main.c:24: busyWait();
      000035 12r00r00         [24]  598 	lcall	_busyWait
                                    599 ;	main.c:25: lcdGeneral = 0x40 | 0x00;
      000038 90 F0 00         [24]  600 	mov	dptr,#_lcdGeneral
      00003B 74 40            [12]  601 	mov	a,#0x40
      00003D F0               [24]  602 	movx	@dptr,a
      00003E E4               [12]  603 	clr	a
      00003F A3               [24]  604 	inc	dptr
      000040 F0               [24]  605 	movx	@dptr,a
                                    606 ;	main.c:26: busyWait();
      000041 12r00r00         [24]  607 	lcall	_busyWait
                                    608 ;	main.c:27: writeCharacter = 0x1B;
      000044 90 F1 00         [24]  609 	mov	dptr,#_writeCharacter
      000047 74 1B            [12]  610 	mov	a,#0x1b
      000049 F0               [24]  611 	movx	@dptr,a
      00004A E4               [12]  612 	clr	a
      00004B A3               [24]  613 	inc	dptr
      00004C F0               [24]  614 	movx	@dptr,a
                                    615 ;	main.c:28: busyWait();
      00004D 12r00r00         [24]  616 	lcall	_busyWait
                                    617 ;	main.c:29: lcdGeneral = 0x40 | 0x01;
      000050 90 F0 00         [24]  618 	mov	dptr,#_lcdGeneral
      000053 74 41            [12]  619 	mov	a,#0x41
      000055 F0               [24]  620 	movx	@dptr,a
      000056 E4               [12]  621 	clr	a
      000057 A3               [24]  622 	inc	dptr
      000058 F0               [24]  623 	movx	@dptr,a
                                    624 ;	main.c:30: busyWait();
      000059 12r00r00         [24]  625 	lcall	_busyWait
                                    626 ;	main.c:31: writeCharacter = 0x1B;
      00005C 90 F1 00         [24]  627 	mov	dptr,#_writeCharacter
      00005F 74 1B            [12]  628 	mov	a,#0x1b
      000061 F0               [24]  629 	movx	@dptr,a
      000062 E4               [12]  630 	clr	a
      000063 A3               [24]  631 	inc	dptr
      000064 F0               [24]  632 	movx	@dptr,a
                                    633 ;	main.c:32: busyWait();
      000065 12r00r00         [24]  634 	lcall	_busyWait
                                    635 ;	main.c:33: lcdGeneral = 0x40 | 0x02;
      000068 90 F0 00         [24]  636 	mov	dptr,#_lcdGeneral
      00006B 74 42            [12]  637 	mov	a,#0x42
      00006D F0               [24]  638 	movx	@dptr,a
      00006E E4               [12]  639 	clr	a
      00006F A3               [24]  640 	inc	dptr
      000070 F0               [24]  641 	movx	@dptr,a
                                    642 ;	main.c:34: busyWait();
      000071 12r00r00         [24]  643 	lcall	_busyWait
                                    644 ;	main.c:35: writeCharacter = 0x00;
      000074 90 F1 00         [24]  645 	mov	dptr,#_writeCharacter
      000077 E4               [12]  646 	clr	a
      000078 F0               [24]  647 	movx	@dptr,a
      000079 A3               [24]  648 	inc	dptr
      00007A F0               [24]  649 	movx	@dptr,a
                                    650 ;	main.c:36: busyWait();
      00007B 12r00r00         [24]  651 	lcall	_busyWait
                                    652 ;	main.c:37: lcdGeneral = 0x40 | 0x03;
      00007E 90 F0 00         [24]  653 	mov	dptr,#_lcdGeneral
      000081 74 43            [12]  654 	mov	a,#0x43
      000083 F0               [24]  655 	movx	@dptr,a
      000084 E4               [12]  656 	clr	a
      000085 A3               [24]  657 	inc	dptr
      000086 F0               [24]  658 	movx	@dptr,a
                                    659 ;	main.c:38: busyWait();
      000087 12r00r00         [24]  660 	lcall	_busyWait
                                    661 ;	main.c:39: writeCharacter = 0x04;
      00008A 90 F1 00         [24]  662 	mov	dptr,#_writeCharacter
      00008D 74 04            [12]  663 	mov	a,#0x04
      00008F F0               [24]  664 	movx	@dptr,a
      000090 E4               [12]  665 	clr	a
      000091 A3               [24]  666 	inc	dptr
      000092 F0               [24]  667 	movx	@dptr,a
                                    668 ;	main.c:40: busyWait();
      000093 12r00r00         [24]  669 	lcall	_busyWait
                                    670 ;	main.c:41: lcdGeneral = 0x40 | 0x04;
      000096 90 F0 00         [24]  671 	mov	dptr,#_lcdGeneral
      000099 74 44            [12]  672 	mov	a,#0x44
      00009B F0               [24]  673 	movx	@dptr,a
      00009C E4               [12]  674 	clr	a
      00009D A3               [24]  675 	inc	dptr
      00009E F0               [24]  676 	movx	@dptr,a
                                    677 ;	main.c:42: busyWait();
      00009F 12r00r00         [24]  678 	lcall	_busyWait
                                    679 ;	main.c:43: writeCharacter = 0x04;
      0000A2 90 F1 00         [24]  680 	mov	dptr,#_writeCharacter
      0000A5 74 04            [12]  681 	mov	a,#0x04
      0000A7 F0               [24]  682 	movx	@dptr,a
      0000A8 E4               [12]  683 	clr	a
      0000A9 A3               [24]  684 	inc	dptr
      0000AA F0               [24]  685 	movx	@dptr,a
                                    686 ;	main.c:44: busyWait();
      0000AB 12r00r00         [24]  687 	lcall	_busyWait
                                    688 ;	main.c:45: lcdGeneral = 0x40 | 0x05;
      0000AE 90 F0 00         [24]  689 	mov	dptr,#_lcdGeneral
      0000B1 74 45            [12]  690 	mov	a,#0x45
      0000B3 F0               [24]  691 	movx	@dptr,a
      0000B4 E4               [12]  692 	clr	a
      0000B5 A3               [24]  693 	inc	dptr
      0000B6 F0               [24]  694 	movx	@dptr,a
                                    695 ;	main.c:46: busyWait();
      0000B7 12r00r00         [24]  696 	lcall	_busyWait
                                    697 ;	main.c:47: writeCharacter = 0x11;
      0000BA 90 F1 00         [24]  698 	mov	dptr,#_writeCharacter
      0000BD 74 11            [12]  699 	mov	a,#0x11
      0000BF F0               [24]  700 	movx	@dptr,a
      0000C0 E4               [12]  701 	clr	a
      0000C1 A3               [24]  702 	inc	dptr
      0000C2 F0               [24]  703 	movx	@dptr,a
                                    704 ;	main.c:48: busyWait();
      0000C3 12r00r00         [24]  705 	lcall	_busyWait
                                    706 ;	main.c:49: lcdGeneral = 0x40 | 0x06;
      0000C6 90 F0 00         [24]  707 	mov	dptr,#_lcdGeneral
      0000C9 74 46            [12]  708 	mov	a,#0x46
      0000CB F0               [24]  709 	movx	@dptr,a
      0000CC E4               [12]  710 	clr	a
      0000CD A3               [24]  711 	inc	dptr
      0000CE F0               [24]  712 	movx	@dptr,a
                                    713 ;	main.c:50: busyWait();
      0000CF 12r00r00         [24]  714 	lcall	_busyWait
                                    715 ;	main.c:51: writeCharacter = 0x0E;
      0000D2 90 F1 00         [24]  716 	mov	dptr,#_writeCharacter
      0000D5 74 0E            [12]  717 	mov	a,#0x0e
      0000D7 F0               [24]  718 	movx	@dptr,a
      0000D8 E4               [12]  719 	clr	a
      0000D9 A3               [24]  720 	inc	dptr
      0000DA F0               [24]  721 	movx	@dptr,a
                                    722 ;	main.c:52: busyWait();
      0000DB 12r00r00         [24]  723 	lcall	_busyWait
                                    724 ;	main.c:53: lcdGeneral = 0x40 | 0x07;
      0000DE 90 F0 00         [24]  725 	mov	dptr,#_lcdGeneral
      0000E1 74 47            [12]  726 	mov	a,#0x47
      0000E3 F0               [24]  727 	movx	@dptr,a
      0000E4 E4               [12]  728 	clr	a
      0000E5 A3               [24]  729 	inc	dptr
      0000E6 F0               [24]  730 	movx	@dptr,a
                                    731 ;	main.c:54: busyWait();
      0000E7 12r00r00         [24]  732 	lcall	_busyWait
                                    733 ;	main.c:55: writeCharacter = 0x00;
      0000EA 90 F1 00         [24]  734 	mov	dptr,#_writeCharacter
      0000ED E4               [12]  735 	clr	a
      0000EE F0               [24]  736 	movx	@dptr,a
      0000EF A3               [24]  737 	inc	dptr
      0000F0 F0               [24]  738 	movx	@dptr,a
                                    739 ;	main.c:56: busyWait();
      0000F1 12r00r00         [24]  740 	lcall	_busyWait
                                    741 ;	main.c:57: goToXY(3,1);
      0000F4 90r00r00         [24]  742 	mov	dptr,#_goToXY_PARM_2
      0000F7 74 01            [12]  743 	mov	a,#0x01
      0000F9 F0               [24]  744 	movx	@dptr,a
      0000FA 75 82 03         [24]  745 	mov	dpl,#0x03
      0000FD 12r00r00         [24]  746 	lcall	_goToXY
                                    747 ;	main.c:58: busyWait();
      000100 12r00r00         [24]  748 	lcall	_busyWait
                                    749 ;	main.c:59: lcdGeneral = 0x80 | 0x00;
      000103 90 F0 00         [24]  750 	mov	dptr,#_lcdGeneral
      000106 74 80            [12]  751 	mov	a,#0x80
      000108 F0               [24]  752 	movx	@dptr,a
      000109 E4               [12]  753 	clr	a
      00010A A3               [24]  754 	inc	dptr
      00010B F0               [24]  755 	movx	@dptr,a
                                    756 ;	main.c:60: busyWait();
      00010C 12r00r00         [24]  757 	lcall	_busyWait
                                    758 ;	main.c:61: writeCharacter = 0x00;
      00010F 90 F1 00         [24]  759 	mov	dptr,#_writeCharacter
      000112 E4               [12]  760 	clr	a
      000113 F0               [24]  761 	movx	@dptr,a
      000114 A3               [24]  762 	inc	dptr
      000115 F0               [24]  763 	movx	@dptr,a
                                    764 ;	main.c:65: timerInit();
      000116 12r00r00         [24]  765 	lcall	_timerInit
                                    766 ;	main.c:66: while(1)
      000119                        767 00105$:
                                    768 ;	main.c:68: if(check == 1)
      000119 90r00r05         [24]  769 	mov	dptr,#_check
      00011C E0               [24]  770 	movx	a,@dptr
      00011D FF               [12]  771 	mov	r7,a
      00011E BF 01 F8         [24]  772 	cjne	r7,#0x01,00105$
                                    773 ;	main.c:70: check = 0;
      000121 90r00r05         [24]  774 	mov	dptr,#_check
      000124 E4               [12]  775 	clr	a
      000125 F0               [24]  776 	movx	@dptr,a
                                    777 ;	main.c:71: printTimeStamp();
      000126 12r01rA9         [24]  778 	lcall	_printTimeStamp
                                    779 ;	main.c:74: continue;
                                    780 ;	main.c:76: }
      000129 80 EE            [24]  781 	sjmp	00105$
                                    782 ;------------------------------------------------------------
                                    783 ;Allocation info for local variables in function 'timer0_isr'
                                    784 ;------------------------------------------------------------
                                    785 ;	main.c:78: void timer0_isr() __interrupt (1)
                                    786 ;	-----------------------------------------
                                    787 ;	 function timer0_isr
                                    788 ;	-----------------------------------------
      00012B                        789 _timer0_isr:
      00012B C0 E0            [24]  790 	push	acc
      00012D C0 82            [24]  791 	push	dpl
      00012F C0 83            [24]  792 	push	dph
      000131 C0 07            [24]  793 	push	ar7
      000133 C0 D0            [24]  794 	push	psw
      000135 75 D0 00         [24]  795 	mov	psw,#0x00
                                    796 ;	main.c:80: TH0 = 0x4B;
      000138 75 8C 4B         [24]  797 	mov	_TH0,#0x4b
                                    798 ;	main.c:81: TL0 = 0xFC;
      00013B 75 8A FC         [24]  799 	mov	_TL0,#0xfc
                                    800 ;	main.c:82: x2++;
      00013E 90r00r04         [24]  801 	mov	dptr,#_x2
      000141 E0               [24]  802 	movx	a,@dptr
      000142 24 01            [12]  803 	add	a,#0x01
      000144 F0               [24]  804 	movx	@dptr,a
                                    805 ;	main.c:83: if(x2 == 2)
      000145 E0               [24]  806 	movx	a,@dptr
      000146 FF               [12]  807 	mov	r7,a
      000147 BF 02 54         [24]  808 	cjne	r7,#0x02,00111$
                                    809 ;	main.c:85: if(partSec > 9)
      00014A 90r00r00         [24]  810 	mov	dptr,#_partSec
      00014D E0               [24]  811 	movx	a,@dptr
      00014E FF               [12]  812 	mov  r7,a
      00014F 24 F6            [12]  813 	add	a,#0xff - 0x09
      000151 50 3A            [24]  814 	jnc	00108$
                                    815 ;	main.c:87: sec++;
      000153 90r00r01         [24]  816 	mov	dptr,#_sec
      000156 E0               [24]  817 	movx	a,@dptr
      000157 24 01            [12]  818 	add	a,#0x01
      000159 F0               [24]  819 	movx	@dptr,a
                                    820 ;	main.c:88: if( sec > 59)
      00015A E0               [24]  821 	movx	a,@dptr
      00015B FF               [12]  822 	mov  r7,a
      00015C 24 C4            [12]  823 	add	a,#0xff - 0x3b
      00015E 50 28            [24]  824 	jnc	00106$
                                    825 ;	main.c:90: min++;
      000160 90r00r02         [24]  826 	mov	dptr,#_min
      000163 E0               [24]  827 	movx	a,@dptr
      000164 24 01            [12]  828 	add	a,#0x01
      000166 F0               [24]  829 	movx	@dptr,a
                                    830 ;	main.c:91: if( min == 59)
      000167 E0               [24]  831 	movx	a,@dptr
      000168 FF               [12]  832 	mov	r7,a
      000169 BF 3B 17         [24]  833 	cjne	r7,#0x3b,00104$
                                    834 ;	main.c:93: hour++;
      00016C 90r00r03         [24]  835 	mov	dptr,#_hour
      00016F E0               [24]  836 	movx	a,@dptr
      000170 24 01            [12]  837 	add	a,#0x01
      000172 F0               [24]  838 	movx	@dptr,a
                                    839 ;	main.c:94: if(hour > 23)
      000173 E0               [24]  840 	movx	a,@dptr
      000174 FF               [12]  841 	mov  r7,a
      000175 24 E8            [12]  842 	add	a,#0xff - 0x17
      000177 50 05            [24]  843 	jnc	00102$
                                    844 ;	main.c:96: hour = 0;
      000179 90r00r03         [24]  845 	mov	dptr,#_hour
      00017C E4               [12]  846 	clr	a
      00017D F0               [24]  847 	movx	@dptr,a
      00017E                        848 00102$:
                                    849 ;	main.c:98: min = 0;
      00017E 90r00r02         [24]  850 	mov	dptr,#_min
      000181 E4               [12]  851 	clr	a
      000182 F0               [24]  852 	movx	@dptr,a
      000183                        853 00104$:
                                    854 ;	main.c:100: sec = 0;
      000183 90r00r01         [24]  855 	mov	dptr,#_sec
      000186 E4               [12]  856 	clr	a
      000187 F0               [24]  857 	movx	@dptr,a
      000188                        858 00106$:
                                    859 ;	main.c:102: partSec = 0;
      000188 90r00r00         [24]  860 	mov	dptr,#_partSec
      00018B E4               [12]  861 	clr	a
      00018C F0               [24]  862 	movx	@dptr,a
      00018D                        863 00108$:
                                    864 ;	main.c:104: partSec++;
      00018D 90r00r00         [24]  865 	mov	dptr,#_partSec
      000190 E0               [24]  866 	movx	a,@dptr
      000191 24 01            [12]  867 	add	a,#0x01
      000193 F0               [24]  868 	movx	@dptr,a
                                    869 ;	main.c:105: x2 = 0;
      000194 90r00r04         [24]  870 	mov	dptr,#_x2
      000197 E4               [12]  871 	clr	a
      000198 F0               [24]  872 	movx	@dptr,a
                                    873 ;	main.c:106: check = 1;
      000199 90r00r05         [24]  874 	mov	dptr,#_check
      00019C 04               [12]  875 	inc	a
      00019D F0               [24]  876 	movx	@dptr,a
      00019E                        877 00111$:
                                    878 ;	main.c:108: }
      00019E D0 D0            [24]  879 	pop	psw
      0001A0 D0 07            [24]  880 	pop	ar7
      0001A2 D0 83            [24]  881 	pop	dph
      0001A4 D0 82            [24]  882 	pop	dpl
      0001A6 D0 E0            [24]  883 	pop	acc
      0001A8 32               [24]  884 	reti
                                    885 ;	eliminated unneeded push/pop b
                                    886 ;------------------------------------------------------------
                                    887 ;Allocation info for local variables in function 'printTimeStamp'
                                    888 ;------------------------------------------------------------
                                    889 ;	main.c:109: void printTimeStamp()
                                    890 ;	-----------------------------------------
                                    891 ;	 function printTimeStamp
                                    892 ;	-----------------------------------------
      0001A9                        893 _printTimeStamp:
                                    894 ;	main.c:111: goToAddr(0x57);
      0001A9 75 82 57         [24]  895 	mov	dpl,#0x57
      0001AC 12r00r00         [24]  896 	lcall	_goToAddr
                                    897 ;	main.c:112: lcdPutCh(hour + '0');
      0001AF 90r00r03         [24]  898 	mov	dptr,#_hour
      0001B2 E0               [24]  899 	movx	a,@dptr
      0001B3 24 30            [12]  900 	add	a,#0x30
      0001B5 F5 82            [12]  901 	mov	dpl,a
      0001B7 12r00r00         [24]  902 	lcall	_lcdPutCh
                                    903 ;	main.c:113: lcdPutCh(':');
      0001BA 75 82 3A         [24]  904 	mov	dpl,#0x3a
      0001BD 12r00r00         [24]  905 	lcall	_lcdPutCh
                                    906 ;	main.c:114: lcdPutCh(min / 10 + '0');
      0001C0 90r00r02         [24]  907 	mov	dptr,#_min
      0001C3 E0               [24]  908 	movx	a,@dptr
      0001C4 FF               [12]  909 	mov	r7,a
      0001C5 7E 00            [12]  910 	mov	r6,#0x00
      0001C7 90r00r00         [24]  911 	mov	dptr,#__divsint_PARM_2
      0001CA 74 0A            [12]  912 	mov	a,#0x0a
      0001CC F0               [24]  913 	movx	@dptr,a
      0001CD E4               [12]  914 	clr	a
      0001CE A3               [24]  915 	inc	dptr
      0001CF F0               [24]  916 	movx	@dptr,a
      0001D0 8F 82            [24]  917 	mov	dpl,r7
      0001D2 8E 83            [24]  918 	mov	dph,r6
      0001D4 12r00r00         [24]  919 	lcall	__divsint
      0001D7 AE 82            [24]  920 	mov	r6,dpl
      0001D9 74 30            [12]  921 	mov	a,#0x30
      0001DB 2E               [12]  922 	add	a,r6
      0001DC F5 82            [12]  923 	mov	dpl,a
      0001DE 12r00r00         [24]  924 	lcall	_lcdPutCh
                                    925 ;	main.c:115: lcdPutCh(min % 10 + '0');
      0001E1 90r00r02         [24]  926 	mov	dptr,#_min
      0001E4 E0               [24]  927 	movx	a,@dptr
      0001E5 FF               [12]  928 	mov	r7,a
      0001E6 7E 00            [12]  929 	mov	r6,#0x00
      0001E8 90r00r00         [24]  930 	mov	dptr,#__modsint_PARM_2
      0001EB 74 0A            [12]  931 	mov	a,#0x0a
      0001ED F0               [24]  932 	movx	@dptr,a
      0001EE E4               [12]  933 	clr	a
      0001EF A3               [24]  934 	inc	dptr
      0001F0 F0               [24]  935 	movx	@dptr,a
      0001F1 8F 82            [24]  936 	mov	dpl,r7
      0001F3 8E 83            [24]  937 	mov	dph,r6
      0001F5 12r00r00         [24]  938 	lcall	__modsint
      0001F8 AE 82            [24]  939 	mov	r6,dpl
      0001FA 74 30            [12]  940 	mov	a,#0x30
      0001FC 2E               [12]  941 	add	a,r6
      0001FD F5 82            [12]  942 	mov	dpl,a
      0001FF 12r00r00         [24]  943 	lcall	_lcdPutCh
                                    944 ;	main.c:116: lcdPutCh(':');
      000202 75 82 3A         [24]  945 	mov	dpl,#0x3a
      000205 12r00r00         [24]  946 	lcall	_lcdPutCh
                                    947 ;	main.c:117: lcdPutCh(sec / 10 + '0');
      000208 90r00r01         [24]  948 	mov	dptr,#_sec
      00020B E0               [24]  949 	movx	a,@dptr
      00020C FF               [12]  950 	mov	r7,a
      00020D 7E 00            [12]  951 	mov	r6,#0x00
      00020F 90r00r00         [24]  952 	mov	dptr,#__divsint_PARM_2
      000212 74 0A            [12]  953 	mov	a,#0x0a
      000214 F0               [24]  954 	movx	@dptr,a
      000215 E4               [12]  955 	clr	a
      000216 A3               [24]  956 	inc	dptr
      000217 F0               [24]  957 	movx	@dptr,a
      000218 8F 82            [24]  958 	mov	dpl,r7
      00021A 8E 83            [24]  959 	mov	dph,r6
      00021C 12r00r00         [24]  960 	lcall	__divsint
      00021F AE 82            [24]  961 	mov	r6,dpl
      000221 74 30            [12]  962 	mov	a,#0x30
      000223 2E               [12]  963 	add	a,r6
      000224 F5 82            [12]  964 	mov	dpl,a
      000226 12r00r00         [24]  965 	lcall	_lcdPutCh
                                    966 ;	main.c:118: lcdPutCh(sec % 10 + '0');
      000229 90r00r01         [24]  967 	mov	dptr,#_sec
      00022C E0               [24]  968 	movx	a,@dptr
      00022D FF               [12]  969 	mov	r7,a
      00022E 7E 00            [12]  970 	mov	r6,#0x00
      000230 90r00r00         [24]  971 	mov	dptr,#__modsint_PARM_2
      000233 74 0A            [12]  972 	mov	a,#0x0a
      000235 F0               [24]  973 	movx	@dptr,a
      000236 E4               [12]  974 	clr	a
      000237 A3               [24]  975 	inc	dptr
      000238 F0               [24]  976 	movx	@dptr,a
      000239 8F 82            [24]  977 	mov	dpl,r7
      00023B 8E 83            [24]  978 	mov	dph,r6
      00023D 12r00r00         [24]  979 	lcall	__modsint
      000240 AE 82            [24]  980 	mov	r6,dpl
      000242 74 30            [12]  981 	mov	a,#0x30
      000244 2E               [12]  982 	add	a,r6
      000245 F5 82            [12]  983 	mov	dpl,a
      000247 12r00r00         [24]  984 	lcall	_lcdPutCh
                                    985 ;	main.c:119: lcdPutCh('.');
      00024A 75 82 2E         [24]  986 	mov	dpl,#0x2e
      00024D 12r00r00         [24]  987 	lcall	_lcdPutCh
                                    988 ;	main.c:120: lcdPutCh(partSec + '0');
      000250 90r00r00         [24]  989 	mov	dptr,#_partSec
      000253 E0               [24]  990 	movx	a,@dptr
      000254 24 30            [12]  991 	add	a,#0x30
      000256 F5 82            [12]  992 	mov	dpl,a
                                    993 ;	main.c:121: }
      000258 02r00r00         [24]  994 	ljmp	_lcdPutCh
                                    995 	.area CSEG    (CODE)
                                    996 	.area CONST   (CODE)
                                    997 	.area XINIT   (CODE)
                                    998 	.area CABS    (ABS,CODE)
