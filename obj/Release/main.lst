                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _lookUpTable1
                                     12 	.globl _timer0_isr
                                     13 	.globl _main
                                     14 	.globl _ramDump
                                     15 	.globl _printMenu
                                     16 	.globl _gamePacman
                                     17 	.globl _customCharacter
                                     18 	.globl _timerInit
                                     19 	.globl _putsLCD
                                     20 	.globl _goToAddr
                                     21 	.globl _lcdClear
                                     22 	.globl _lcdPutCh
                                     23 	.globl _busyWait
                                     24 	.globl _lcdInit
                                     25 	.globl _atoi
                                     26 	.globl _memset
                                     27 	.globl _printf_tiny
                                     28 	.globl _gets
                                     29 	.globl _printf
                                     30 	.globl _P5_7
                                     31 	.globl _P5_6
                                     32 	.globl _P5_5
                                     33 	.globl _P5_4
                                     34 	.globl _P5_3
                                     35 	.globl _P5_2
                                     36 	.globl _P5_1
                                     37 	.globl _P5_0
                                     38 	.globl _P4_7
                                     39 	.globl _P4_6
                                     40 	.globl _P4_5
                                     41 	.globl _P4_4
                                     42 	.globl _P4_3
                                     43 	.globl _P4_2
                                     44 	.globl _P4_1
                                     45 	.globl _P4_0
                                     46 	.globl _PX0L
                                     47 	.globl _PT0L
                                     48 	.globl _PX1L
                                     49 	.globl _PT1L
                                     50 	.globl _PSL
                                     51 	.globl _PT2L
                                     52 	.globl _PPCL
                                     53 	.globl _EC
                                     54 	.globl _CCF0
                                     55 	.globl _CCF1
                                     56 	.globl _CCF2
                                     57 	.globl _CCF3
                                     58 	.globl _CCF4
                                     59 	.globl _CR
                                     60 	.globl _CF
                                     61 	.globl _TF2
                                     62 	.globl _EXF2
                                     63 	.globl _RCLK
                                     64 	.globl _TCLK
                                     65 	.globl _EXEN2
                                     66 	.globl _TR2
                                     67 	.globl _C_T2
                                     68 	.globl _CP_RL2
                                     69 	.globl _T2CON_7
                                     70 	.globl _T2CON_6
                                     71 	.globl _T2CON_5
                                     72 	.globl _T2CON_4
                                     73 	.globl _T2CON_3
                                     74 	.globl _T2CON_2
                                     75 	.globl _T2CON_1
                                     76 	.globl _T2CON_0
                                     77 	.globl _PT2
                                     78 	.globl _ET2
                                     79 	.globl _CY
                                     80 	.globl _AC
                                     81 	.globl _F0
                                     82 	.globl _RS1
                                     83 	.globl _RS0
                                     84 	.globl _OV
                                     85 	.globl _F1
                                     86 	.globl _P
                                     87 	.globl _PS
                                     88 	.globl _PT1
                                     89 	.globl _PX1
                                     90 	.globl _PT0
                                     91 	.globl _PX0
                                     92 	.globl _RD
                                     93 	.globl _WR
                                     94 	.globl _T1
                                     95 	.globl _T0
                                     96 	.globl _INT1
                                     97 	.globl _INT0
                                     98 	.globl _TXD
                                     99 	.globl _RXD
                                    100 	.globl _P3_7
                                    101 	.globl _P3_6
                                    102 	.globl _P3_5
                                    103 	.globl _P3_4
                                    104 	.globl _P3_3
                                    105 	.globl _P3_2
                                    106 	.globl _P3_1
                                    107 	.globl _P3_0
                                    108 	.globl _EA
                                    109 	.globl _ES
                                    110 	.globl _ET1
                                    111 	.globl _EX1
                                    112 	.globl _ET0
                                    113 	.globl _EX0
                                    114 	.globl _P2_7
                                    115 	.globl _P2_6
                                    116 	.globl _P2_5
                                    117 	.globl _P2_4
                                    118 	.globl _P2_3
                                    119 	.globl _P2_2
                                    120 	.globl _P2_1
                                    121 	.globl _P2_0
                                    122 	.globl _SM0
                                    123 	.globl _SM1
                                    124 	.globl _SM2
                                    125 	.globl _REN
                                    126 	.globl _TB8
                                    127 	.globl _RB8
                                    128 	.globl _TI
                                    129 	.globl _RI
                                    130 	.globl _P1_7
                                    131 	.globl _P1_6
                                    132 	.globl _P1_5
                                    133 	.globl _P1_4
                                    134 	.globl _P1_3
                                    135 	.globl _P1_2
                                    136 	.globl _P1_1
                                    137 	.globl _P1_0
                                    138 	.globl _TF1
                                    139 	.globl _TR1
                                    140 	.globl _TF0
                                    141 	.globl _TR0
                                    142 	.globl _IE1
                                    143 	.globl _IT1
                                    144 	.globl _IE0
                                    145 	.globl _IT0
                                    146 	.globl _P0_7
                                    147 	.globl _P0_6
                                    148 	.globl _P0_5
                                    149 	.globl _P0_4
                                    150 	.globl _P0_3
                                    151 	.globl _P0_2
                                    152 	.globl _P0_1
                                    153 	.globl _P0_0
                                    154 	.globl _EECON
                                    155 	.globl _KBF
                                    156 	.globl _KBE
                                    157 	.globl _KBLS
                                    158 	.globl _BRL
                                    159 	.globl _BDRCON
                                    160 	.globl _T2MOD
                                    161 	.globl _SPDAT
                                    162 	.globl _SPSTA
                                    163 	.globl _SPCON
                                    164 	.globl _SADEN
                                    165 	.globl _SADDR
                                    166 	.globl _WDTPRG
                                    167 	.globl _WDTRST
                                    168 	.globl _P5
                                    169 	.globl _P4
                                    170 	.globl _IPH1
                                    171 	.globl _IPL1
                                    172 	.globl _IPH0
                                    173 	.globl _IPL0
                                    174 	.globl _IEN1
                                    175 	.globl _IEN0
                                    176 	.globl _CMOD
                                    177 	.globl _CL
                                    178 	.globl _CH
                                    179 	.globl _CCON
                                    180 	.globl _CCAPM4
                                    181 	.globl _CCAPM3
                                    182 	.globl _CCAPM2
                                    183 	.globl _CCAPM1
                                    184 	.globl _CCAPM0
                                    185 	.globl _CCAP4L
                                    186 	.globl _CCAP3L
                                    187 	.globl _CCAP2L
                                    188 	.globl _CCAP1L
                                    189 	.globl _CCAP0L
                                    190 	.globl _CCAP4H
                                    191 	.globl _CCAP3H
                                    192 	.globl _CCAP2H
                                    193 	.globl _CCAP1H
                                    194 	.globl _CCAP0H
                                    195 	.globl _CKCON1
                                    196 	.globl _CKCON0
                                    197 	.globl _CKRL
                                    198 	.globl _AUXR1
                                    199 	.globl _AUXR
                                    200 	.globl _TH2
                                    201 	.globl _TL2
                                    202 	.globl _RCAP2H
                                    203 	.globl _RCAP2L
                                    204 	.globl _T2CON
                                    205 	.globl _B
                                    206 	.globl _ACC
                                    207 	.globl _PSW
                                    208 	.globl _IP
                                    209 	.globl _P3
                                    210 	.globl _IE
                                    211 	.globl _P2
                                    212 	.globl _SBUF
                                    213 	.globl _SCON
                                    214 	.globl _P1
                                    215 	.globl _TH1
                                    216 	.globl _TH0
                                    217 	.globl _TL1
                                    218 	.globl _TL0
                                    219 	.globl _TMOD
                                    220 	.globl _TCON
                                    221 	.globl _PCON
                                    222 	.globl _DPH
                                    223 	.globl _DPL
                                    224 	.globl _SP
                                    225 	.globl _P0
                                    226 	.globl _ch
                                    227 	.globl _check
                                    228 	.globl _x2
                                    229 	.globl _hour
                                    230 	.globl _min
                                    231 	.globl _sec
                                    232 	.globl _partSec
                                    233 	.globl _readCharacter
                                    234 	.globl _writeCharacter
                                    235 	.globl _busyPoll
                                    236 	.globl _lcdGeneral
                                    237 	.globl _putchar
                                    238 	.globl _getchar
                                    239 	.globl _printTimeStamp
                                    240 ;--------------------------------------------------------
                                    241 ; special function registers
                                    242 ;--------------------------------------------------------
                                    243 	.area RSEG    (ABS,DATA)
      000000                        244 	.org 0x0000
                           000080   245 _P0	=	0x0080
                           000081   246 _SP	=	0x0081
                           000082   247 _DPL	=	0x0082
                           000083   248 _DPH	=	0x0083
                           000087   249 _PCON	=	0x0087
                           000088   250 _TCON	=	0x0088
                           000089   251 _TMOD	=	0x0089
                           00008A   252 _TL0	=	0x008a
                           00008B   253 _TL1	=	0x008b
                           00008C   254 _TH0	=	0x008c
                           00008D   255 _TH1	=	0x008d
                           000090   256 _P1	=	0x0090
                           000098   257 _SCON	=	0x0098
                           000099   258 _SBUF	=	0x0099
                           0000A0   259 _P2	=	0x00a0
                           0000A8   260 _IE	=	0x00a8
                           0000B0   261 _P3	=	0x00b0
                           0000B8   262 _IP	=	0x00b8
                           0000D0   263 _PSW	=	0x00d0
                           0000E0   264 _ACC	=	0x00e0
                           0000F0   265 _B	=	0x00f0
                           0000C8   266 _T2CON	=	0x00c8
                           0000CA   267 _RCAP2L	=	0x00ca
                           0000CB   268 _RCAP2H	=	0x00cb
                           0000CC   269 _TL2	=	0x00cc
                           0000CD   270 _TH2	=	0x00cd
                           00008E   271 _AUXR	=	0x008e
                           0000A2   272 _AUXR1	=	0x00a2
                           000097   273 _CKRL	=	0x0097
                           00008F   274 _CKCON0	=	0x008f
                           0000AF   275 _CKCON1	=	0x00af
                           0000FA   276 _CCAP0H	=	0x00fa
                           0000FB   277 _CCAP1H	=	0x00fb
                           0000FC   278 _CCAP2H	=	0x00fc
                           0000FD   279 _CCAP3H	=	0x00fd
                           0000FE   280 _CCAP4H	=	0x00fe
                           0000EA   281 _CCAP0L	=	0x00ea
                           0000EB   282 _CCAP1L	=	0x00eb
                           0000EC   283 _CCAP2L	=	0x00ec
                           0000ED   284 _CCAP3L	=	0x00ed
                           0000EE   285 _CCAP4L	=	0x00ee
                           0000DA   286 _CCAPM0	=	0x00da
                           0000DB   287 _CCAPM1	=	0x00db
                           0000DC   288 _CCAPM2	=	0x00dc
                           0000DD   289 _CCAPM3	=	0x00dd
                           0000DE   290 _CCAPM4	=	0x00de
                           0000D8   291 _CCON	=	0x00d8
                           0000F9   292 _CH	=	0x00f9
                           0000E9   293 _CL	=	0x00e9
                           0000D9   294 _CMOD	=	0x00d9
                           0000A8   295 _IEN0	=	0x00a8
                           0000B1   296 _IEN1	=	0x00b1
                           0000B8   297 _IPL0	=	0x00b8
                           0000B7   298 _IPH0	=	0x00b7
                           0000B2   299 _IPL1	=	0x00b2
                           0000B3   300 _IPH1	=	0x00b3
                           0000C0   301 _P4	=	0x00c0
                           0000E8   302 _P5	=	0x00e8
                           0000A6   303 _WDTRST	=	0x00a6
                           0000A7   304 _WDTPRG	=	0x00a7
                           0000A9   305 _SADDR	=	0x00a9
                           0000B9   306 _SADEN	=	0x00b9
                           0000C3   307 _SPCON	=	0x00c3
                           0000C4   308 _SPSTA	=	0x00c4
                           0000C5   309 _SPDAT	=	0x00c5
                           0000C9   310 _T2MOD	=	0x00c9
                           00009B   311 _BDRCON	=	0x009b
                           00009A   312 _BRL	=	0x009a
                           00009C   313 _KBLS	=	0x009c
                           00009D   314 _KBE	=	0x009d
                           00009E   315 _KBF	=	0x009e
                           0000D2   316 _EECON	=	0x00d2
                                    317 ;--------------------------------------------------------
                                    318 ; special function bits
                                    319 ;--------------------------------------------------------
                                    320 	.area RSEG    (ABS,DATA)
      000000                        321 	.org 0x0000
                           000080   322 _P0_0	=	0x0080
                           000081   323 _P0_1	=	0x0081
                           000082   324 _P0_2	=	0x0082
                           000083   325 _P0_3	=	0x0083
                           000084   326 _P0_4	=	0x0084
                           000085   327 _P0_5	=	0x0085
                           000086   328 _P0_6	=	0x0086
                           000087   329 _P0_7	=	0x0087
                           000088   330 _IT0	=	0x0088
                           000089   331 _IE0	=	0x0089
                           00008A   332 _IT1	=	0x008a
                           00008B   333 _IE1	=	0x008b
                           00008C   334 _TR0	=	0x008c
                           00008D   335 _TF0	=	0x008d
                           00008E   336 _TR1	=	0x008e
                           00008F   337 _TF1	=	0x008f
                           000090   338 _P1_0	=	0x0090
                           000091   339 _P1_1	=	0x0091
                           000092   340 _P1_2	=	0x0092
                           000093   341 _P1_3	=	0x0093
                           000094   342 _P1_4	=	0x0094
                           000095   343 _P1_5	=	0x0095
                           000096   344 _P1_6	=	0x0096
                           000097   345 _P1_7	=	0x0097
                           000098   346 _RI	=	0x0098
                           000099   347 _TI	=	0x0099
                           00009A   348 _RB8	=	0x009a
                           00009B   349 _TB8	=	0x009b
                           00009C   350 _REN	=	0x009c
                           00009D   351 _SM2	=	0x009d
                           00009E   352 _SM1	=	0x009e
                           00009F   353 _SM0	=	0x009f
                           0000A0   354 _P2_0	=	0x00a0
                           0000A1   355 _P2_1	=	0x00a1
                           0000A2   356 _P2_2	=	0x00a2
                           0000A3   357 _P2_3	=	0x00a3
                           0000A4   358 _P2_4	=	0x00a4
                           0000A5   359 _P2_5	=	0x00a5
                           0000A6   360 _P2_6	=	0x00a6
                           0000A7   361 _P2_7	=	0x00a7
                           0000A8   362 _EX0	=	0x00a8
                           0000A9   363 _ET0	=	0x00a9
                           0000AA   364 _EX1	=	0x00aa
                           0000AB   365 _ET1	=	0x00ab
                           0000AC   366 _ES	=	0x00ac
                           0000AF   367 _EA	=	0x00af
                           0000B0   368 _P3_0	=	0x00b0
                           0000B1   369 _P3_1	=	0x00b1
                           0000B2   370 _P3_2	=	0x00b2
                           0000B3   371 _P3_3	=	0x00b3
                           0000B4   372 _P3_4	=	0x00b4
                           0000B5   373 _P3_5	=	0x00b5
                           0000B6   374 _P3_6	=	0x00b6
                           0000B7   375 _P3_7	=	0x00b7
                           0000B0   376 _RXD	=	0x00b0
                           0000B1   377 _TXD	=	0x00b1
                           0000B2   378 _INT0	=	0x00b2
                           0000B3   379 _INT1	=	0x00b3
                           0000B4   380 _T0	=	0x00b4
                           0000B5   381 _T1	=	0x00b5
                           0000B6   382 _WR	=	0x00b6
                           0000B7   383 _RD	=	0x00b7
                           0000B8   384 _PX0	=	0x00b8
                           0000B9   385 _PT0	=	0x00b9
                           0000BA   386 _PX1	=	0x00ba
                           0000BB   387 _PT1	=	0x00bb
                           0000BC   388 _PS	=	0x00bc
                           0000D0   389 _P	=	0x00d0
                           0000D1   390 _F1	=	0x00d1
                           0000D2   391 _OV	=	0x00d2
                           0000D3   392 _RS0	=	0x00d3
                           0000D4   393 _RS1	=	0x00d4
                           0000D5   394 _F0	=	0x00d5
                           0000D6   395 _AC	=	0x00d6
                           0000D7   396 _CY	=	0x00d7
                           0000AD   397 _ET2	=	0x00ad
                           0000BD   398 _PT2	=	0x00bd
                           0000C8   399 _T2CON_0	=	0x00c8
                           0000C9   400 _T2CON_1	=	0x00c9
                           0000CA   401 _T2CON_2	=	0x00ca
                           0000CB   402 _T2CON_3	=	0x00cb
                           0000CC   403 _T2CON_4	=	0x00cc
                           0000CD   404 _T2CON_5	=	0x00cd
                           0000CE   405 _T2CON_6	=	0x00ce
                           0000CF   406 _T2CON_7	=	0x00cf
                           0000C8   407 _CP_RL2	=	0x00c8
                           0000C9   408 _C_T2	=	0x00c9
                           0000CA   409 _TR2	=	0x00ca
                           0000CB   410 _EXEN2	=	0x00cb
                           0000CC   411 _TCLK	=	0x00cc
                           0000CD   412 _RCLK	=	0x00cd
                           0000CE   413 _EXF2	=	0x00ce
                           0000CF   414 _TF2	=	0x00cf
                           0000DF   415 _CF	=	0x00df
                           0000DE   416 _CR	=	0x00de
                           0000DC   417 _CCF4	=	0x00dc
                           0000DB   418 _CCF3	=	0x00db
                           0000DA   419 _CCF2	=	0x00da
                           0000D9   420 _CCF1	=	0x00d9
                           0000D8   421 _CCF0	=	0x00d8
                           0000AE   422 _EC	=	0x00ae
                           0000BE   423 _PPCL	=	0x00be
                           0000BD   424 _PT2L	=	0x00bd
                           0000BC   425 _PSL	=	0x00bc
                           0000BB   426 _PT1L	=	0x00bb
                           0000BA   427 _PX1L	=	0x00ba
                           0000B9   428 _PT0L	=	0x00b9
                           0000B8   429 _PX0L	=	0x00b8
                           0000C0   430 _P4_0	=	0x00c0
                           0000C1   431 _P4_1	=	0x00c1
                           0000C2   432 _P4_2	=	0x00c2
                           0000C3   433 _P4_3	=	0x00c3
                           0000C4   434 _P4_4	=	0x00c4
                           0000C5   435 _P4_5	=	0x00c5
                           0000C6   436 _P4_6	=	0x00c6
                           0000C7   437 _P4_7	=	0x00c7
                           0000E8   438 _P5_0	=	0x00e8
                           0000E9   439 _P5_1	=	0x00e9
                           0000EA   440 _P5_2	=	0x00ea
                           0000EB   441 _P5_3	=	0x00eb
                           0000EC   442 _P5_4	=	0x00ec
                           0000ED   443 _P5_5	=	0x00ed
                           0000EE   444 _P5_6	=	0x00ee
                           0000EF   445 _P5_7	=	0x00ef
                                    446 ;--------------------------------------------------------
                                    447 ; overlayable register banks
                                    448 ;--------------------------------------------------------
                                    449 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        450 	.ds 8
                                    451 ;--------------------------------------------------------
                                    452 ; internal ram data
                                    453 ;--------------------------------------------------------
                                    454 	.area DSEG    (DATA)
                                    455 ;--------------------------------------------------------
                                    456 ; overlayable items in internal ram 
                                    457 ;--------------------------------------------------------
                                    458 ;--------------------------------------------------------
                                    459 ; Stack segment in internal ram 
                                    460 ;--------------------------------------------------------
                                    461 	.area	SSEG
      000000                        462 __start__stack:
      000000                        463 	.ds	1
                                    464 
                                    465 ;--------------------------------------------------------
                                    466 ; indirectly addressable internal ram data
                                    467 ;--------------------------------------------------------
                                    468 	.area ISEG    (DATA)
                                    469 ;--------------------------------------------------------
                                    470 ; absolute internal ram data
                                    471 ;--------------------------------------------------------
                                    472 	.area IABS    (ABS,DATA)
                                    473 	.area IABS    (ABS,DATA)
                                    474 ;--------------------------------------------------------
                                    475 ; bit data
                                    476 ;--------------------------------------------------------
                                    477 	.area BSEG    (BIT)
                                    478 ;--------------------------------------------------------
                                    479 ; paged external ram data
                                    480 ;--------------------------------------------------------
                                    481 	.area PSEG    (PAG,XDATA)
                                    482 ;--------------------------------------------------------
                                    483 ; external ram data
                                    484 ;--------------------------------------------------------
                                    485 	.area XSEG    (XDATA)
                           00F000   486 _lcdGeneral	=	0xf000
                           00F200   487 _busyPoll	=	0xf200
                           00F100   488 _writeCharacter	=	0xf100
                           00F300   489 _readCharacter	=	0xf300
      000000                        490 _partSec::
      000000                        491 	.ds 1
      000001                        492 _sec::
      000001                        493 	.ds 1
      000002                        494 _min::
      000002                        495 	.ds 1
      000003                        496 _hour::
      000003                        497 	.ds 1
      000004                        498 _x2::
      000004                        499 	.ds 1
      000005                        500 _check::
      000005                        501 	.ds 1
      000006                        502 _ch::
      000006                        503 	.ds 1
      000007                        504 _main_input_65537_72:
      000007                        505 	.ds 60
      000043                        506 _main_x_196609_75:
      000043                        507 	.ds 10
      00004D                        508 _main_stringRead_196609_87:
      00004D                        509 	.ds 48
      00007D                        510 _putchar_c_65536_96:
      00007D                        511 	.ds 2
                                    512 ;--------------------------------------------------------
                                    513 ; absolute external ram data
                                    514 ;--------------------------------------------------------
                                    515 	.area XABS    (ABS,XDATA)
                                    516 ;--------------------------------------------------------
                                    517 ; external initialized ram data
                                    518 ;--------------------------------------------------------
                                    519 	.area XISEG   (XDATA)
                                    520 	.area HOME    (CODE)
                                    521 	.area GSINIT0 (CODE)
                                    522 	.area GSINIT1 (CODE)
                                    523 	.area GSINIT2 (CODE)
                                    524 	.area GSINIT3 (CODE)
                                    525 	.area GSINIT4 (CODE)
                                    526 	.area GSINIT5 (CODE)
                                    527 	.area GSINIT  (CODE)
                                    528 	.area GSFINAL (CODE)
                                    529 	.area CSEG    (CODE)
                                    530 ;--------------------------------------------------------
                                    531 ; interrupt vector 
                                    532 ;--------------------------------------------------------
                                    533 	.area HOME    (CODE)
      000000                        534 __interrupt_vect:
      000000 02r00r00         [24]  535 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  536 	reti
      000004                        537 	.ds	7
      00000B 02r02r19         [24]  538 	ljmp	_timer0_isr
                                    539 ;--------------------------------------------------------
                                    540 ; global & static initialisations
                                    541 ;--------------------------------------------------------
                                    542 	.area HOME    (CODE)
                                    543 	.area GSINIT  (CODE)
                                    544 	.area GSFINAL (CODE)
                                    545 	.area GSINIT  (CODE)
                                    546 	.globl __sdcc_gsinit_startup
                                    547 	.globl __sdcc_program_startup
                                    548 	.globl __start__stack
                                    549 	.globl __mcs51_genXINIT
                                    550 	.globl __mcs51_genXRAMCLEAR
                                    551 	.globl __mcs51_genRAMCLEAR
                                    552 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  553 	ljmp	__sdcc_program_startup
                                    554 ;--------------------------------------------------------
                                    555 ; Home
                                    556 ;--------------------------------------------------------
                                    557 	.area HOME    (CODE)
                                    558 	.area HOME    (CODE)
      00000E                        559 __sdcc_program_startup:
      00000E 02r00r00         [24]  560 	ljmp	_main
                                    561 ;	return from main will return to caller
                                    562 ;--------------------------------------------------------
                                    563 ; code
                                    564 ;--------------------------------------------------------
                                    565 	.area CSEG    (CODE)
                                    566 ;------------------------------------------------------------
                                    567 ;Allocation info for local variables in function 'main'
                                    568 ;------------------------------------------------------------
                                    569 ;input                     Allocated with name '_main_input_65537_72'
                                    570 ;x                         Allocated with name '_main_x_196609_75'
                                    571 ;row                       Allocated with name '_main_row_196610_76'
                                    572 ;column                    Allocated with name '_main_column_196611_78'
                                    573 ;ad                        Allocated with name '_main_ad_196612_80'
                                    574 ;inputWrite                Allocated with name '_main_inputWrite_196613_81'
                                    575 ;stringRead                Allocated with name '_main_stringRead_196609_87'
                                    576 ;------------------------------------------------------------
                                    577 ;	main.c:19: void main()
                                    578 ;	-----------------------------------------
                                    579 ;	 function main
                                    580 ;	-----------------------------------------
      000000                        581 _main:
                           000007   582 	ar7 = 0x07
                           000006   583 	ar6 = 0x06
                           000005   584 	ar5 = 0x05
                           000004   585 	ar4 = 0x04
                           000003   586 	ar3 = 0x03
                           000002   587 	ar2 = 0x02
                           000001   588 	ar1 = 0x01
                           000000   589 	ar0 = 0x00
                                    590 ;	main.c:21: check = 0;
      000000 90r00r05         [24]  591 	mov	dptr,#_check
      000003 E4               [12]  592 	clr	a
      000004 F0               [24]  593 	movx	@dptr,a
                                    594 ;	main.c:22: partSec = 0;
      000005 90r00r00         [24]  595 	mov	dptr,#_partSec
      000008 F0               [24]  596 	movx	@dptr,a
                                    597 ;	main.c:23: sec = 0;
      000009 90r00r01         [24]  598 	mov	dptr,#_sec
      00000C F0               [24]  599 	movx	@dptr,a
                                    600 ;	main.c:24: min = 0;
      00000D 90r00r02         [24]  601 	mov	dptr,#_min
      000010 F0               [24]  602 	movx	@dptr,a
                                    603 ;	main.c:25: hour = 0;
      000011 90r00r03         [24]  604 	mov	dptr,#_hour
      000014 F0               [24]  605 	movx	@dptr,a
                                    606 ;	main.c:26: x2 = 0;
      000015 90r00r04         [24]  607 	mov	dptr,#_x2
      000018 F0               [24]  608 	movx	@dptr,a
                                    609 ;	main.c:28: memset(input, '\0',60 * sizeof(char));
      000019 90r00r00         [24]  610 	mov	dptr,#_memset_PARM_2
      00001C F0               [24]  611 	movx	@dptr,a
      00001D 90r00r00         [24]  612 	mov	dptr,#_memset_PARM_3
      000020 74 3C            [12]  613 	mov	a,#0x3c
      000022 F0               [24]  614 	movx	@dptr,a
      000023 E4               [12]  615 	clr	a
      000024 A3               [24]  616 	inc	dptr
      000025 F0               [24]  617 	movx	@dptr,a
      000026 90r00r07         [24]  618 	mov	dptr,#_main_input_65537_72
      000029 75 F0 00         [24]  619 	mov	b,#0x00
      00002C 12r00r00         [24]  620 	lcall	_memset
                                    621 ;	main.c:29: lcdInit();
      00002F 12r00r00         [24]  622 	lcall	_lcdInit
                                    623 ;	main.c:30: lcdClear();
      000032 12r00r00         [24]  624 	lcall	_lcdClear
                                    625 ;	main.c:31: printMenu();
      000035 12r00r00         [24]  626 	lcall	_printMenu
                                    627 ;	main.c:32: timerInit();
      000038 12r00r00         [24]  628 	lcall	_timerInit
                                    629 ;	main.c:33: while(1)
      00003B                        630 00128$:
                                    631 ;	main.c:35: ch = getchar();
      00003B 12r02rC8         [24]  632 	lcall	_getchar
      00003E AE 82            [24]  633 	mov	r6,dpl
      000040 90r00r06         [24]  634 	mov	dptr,#_ch
      000043 EE               [12]  635 	mov	a,r6
      000044 F0               [24]  636 	movx	@dptr,a
                                    637 ;	main.c:36: if(check == 1)
      000045 90r00r05         [24]  638 	mov	dptr,#_check
      000048 E0               [24]  639 	movx	a,@dptr
      000049 FF               [12]  640 	mov	r7,a
      00004A BF 01 08         [24]  641 	cjne	r7,#0x01,00102$
                                    642 ;	main.c:38: check = 0;
      00004D 90r00r05         [24]  643 	mov	dptr,#_check
      000050 E4               [12]  644 	clr	a
      000051 F0               [24]  645 	movx	@dptr,a
                                    646 ;	main.c:39: printTimeStamp();
      000052 12r02rEA         [24]  647 	lcall	_printTimeStamp
      000055                        648 00102$:
                                    649 ;	main.c:42: if(ch == 'w')
      000055 90r00r06         [24]  650 	mov	dptr,#_ch
      000058 E0               [24]  651 	movx	a,@dptr
      000059 FF               [12]  652 	mov	r7,a
      00005A BF 77 02         [24]  653 	cjne	r7,#0x77,00190$
      00005D 80 03            [24]  654 	sjmp	00191$
      00005F                        655 00190$:
      00005F 02r01r7C         [24]  656 	ljmp	00108$
      000062                        657 00191$:
                                    658 ;	main.c:46: memset(x,'\0',10 * sizeof(char));
      000062 90r00r00         [24]  659 	mov	dptr,#_memset_PARM_2
      000065 E4               [12]  660 	clr	a
      000066 F0               [24]  661 	movx	@dptr,a
      000067 90r00r00         [24]  662 	mov	dptr,#_memset_PARM_3
      00006A 74 0A            [12]  663 	mov	a,#0x0a
      00006C F0               [24]  664 	movx	@dptr,a
      00006D E4               [12]  665 	clr	a
      00006E A3               [24]  666 	inc	dptr
      00006F F0               [24]  667 	movx	@dptr,a
      000070 90r00r43         [24]  668 	mov	dptr,#_main_x_196609_75
      000073 75 F0 00         [24]  669 	mov	b,#0x00
      000076 12r00r00         [24]  670 	lcall	_memset
                                    671 ;	main.c:47: printf_tiny("\n\rEnter the row number from 0 to 2\n\r");
      000079 74r40            [12]  672 	mov	a,#___str_0
      00007B C0 E0            [24]  673 	push	acc
      00007D 74s00            [12]  674 	mov	a,#(___str_0 >> 8)
      00007F C0 E0            [24]  675 	push	acc
      000081 12r00r00         [24]  676 	lcall	_printf_tiny
      000084 15 81            [12]  677 	dec	sp
      000086 15 81            [12]  678 	dec	sp
                                    679 ;	main.c:48: uint8_t row = getchar();
      000088 12r02rC8         [24]  680 	lcall	_getchar
      00008B AE 82            [24]  681 	mov	r6,dpl
                                    682 ;	main.c:49: putchar(row);
      00008D 8E 05            [24]  683 	mov	ar5,r6
      00008F 7F 00            [12]  684 	mov	r7,#0x00
      000091 8D 82            [24]  685 	mov	dpl,r5
      000093 8F 83            [24]  686 	mov	dph,r7
      000095 C0 06            [24]  687 	push	ar6
      000097 12r02r97         [24]  688 	lcall	_putchar
      00009A D0 06            [24]  689 	pop	ar6
                                    690 ;	main.c:50: row = row - '0';
      00009C EE               [12]  691 	mov	a,r6
      00009D 24 D0            [12]  692 	add	a,#0xd0
                                    693 ;	main.c:51: if(row > 2)
      00009F FF               [12]  694 	mov	r7,a
      0000A0 24 FD            [12]  695 	add	a,#0xff - 0x02
      0000A2 50 14            [24]  696 	jnc	00104$
                                    697 ;	main.c:53: printf_tiny("\n\rEntered Row is incorrect\n\r");
      0000A4 74r65            [12]  698 	mov	a,#___str_1
      0000A6 C0 E0            [24]  699 	push	acc
      0000A8 74s00            [12]  700 	mov	a,#(___str_1 >> 8)
      0000AA C0 E0            [24]  701 	push	acc
      0000AC 12r00r00         [24]  702 	lcall	_printf_tiny
      0000AF 15 81            [12]  703 	dec	sp
      0000B1 15 81            [12]  704 	dec	sp
                                    705 ;	main.c:54: printMenu();
      0000B3 12r00r00         [24]  706 	lcall	_printMenu
                                    707 ;	main.c:55: continue;
      0000B6 80 83            [24]  708 	sjmp	00128$
      0000B8                        709 00104$:
                                    710 ;	main.c:57: printf_tiny("\n\rEnter the column number from 0 to 15\n\r");
      0000B8 C0 07            [24]  711 	push	ar7
      0000BA 74r82            [12]  712 	mov	a,#___str_2
      0000BC C0 E0            [24]  713 	push	acc
      0000BE 74s00            [12]  714 	mov	a,#(___str_2 >> 8)
      0000C0 C0 E0            [24]  715 	push	acc
      0000C2 12r00r00         [24]  716 	lcall	_printf_tiny
      0000C5 15 81            [12]  717 	dec	sp
      0000C7 15 81            [12]  718 	dec	sp
                                    719 ;	main.c:58: gets(x);
      0000C9 90r00r43         [24]  720 	mov	dptr,#_main_x_196609_75
      0000CC 75 F0 00         [24]  721 	mov	b,#0x00
      0000CF 12r00r00         [24]  722 	lcall	_gets
                                    723 ;	main.c:59: uint8_t column = atoi(x);
      0000D2 90r00r43         [24]  724 	mov	dptr,#_main_x_196609_75
      0000D5 75 F0 00         [24]  725 	mov	b,#0x00
      0000D8 12r00r00         [24]  726 	lcall	_atoi
      0000DB AD 82            [24]  727 	mov	r5,dpl
      0000DD D0 07            [24]  728 	pop	ar7
                                    729 ;	main.c:61: if(column > 15)
      0000DF ED               [12]  730 	mov	a,r5
      0000E0 24 F0            [12]  731 	add	a,#0xff - 0x0f
      0000E2 50 15            [24]  732 	jnc	00106$
                                    733 ;	main.c:63: printf_tiny("\n\rEntered Column is incorrect\n\r");
      0000E4 74rAB            [12]  734 	mov	a,#___str_3
      0000E6 C0 E0            [24]  735 	push	acc
      0000E8 74s00            [12]  736 	mov	a,#(___str_3 >> 8)
      0000EA C0 E0            [24]  737 	push	acc
      0000EC 12r00r00         [24]  738 	lcall	_printf_tiny
      0000EF 15 81            [12]  739 	dec	sp
      0000F1 15 81            [12]  740 	dec	sp
                                    741 ;	main.c:64: printMenu();
      0000F3 12r00r00         [24]  742 	lcall	_printMenu
                                    743 ;	main.c:65: continue;
      0000F6 02r00r3B         [24]  744 	ljmp	00128$
      0000F9                        745 00106$:
                                    746 ;	main.c:67: uint8_t ad = lookUpTable1[row][column];
      0000F9 EF               [12]  747 	mov	a,r7
      0000FA 75 F0 10         [24]  748 	mov	b,#0x10
      0000FD A4               [48]  749 	mul	ab
      0000FE 24r00            [12]  750 	add	a,#_lookUpTable1
      000100 FC               [12]  751 	mov	r4,a
      000101 74s00            [12]  752 	mov	a,#(_lookUpTable1 >> 8)
      000103 35 F0            [12]  753 	addc	a,b
      000105 FE               [12]  754 	mov	r6,a
      000106 ED               [12]  755 	mov	a,r5
      000107 2C               [12]  756 	add	a,r4
      000108 F5 82            [12]  757 	mov	dpl,a
      00010A E4               [12]  758 	clr	a
      00010B 3E               [12]  759 	addc	a,r6
      00010C F5 83            [12]  760 	mov	dph,a
      00010E E4               [12]  761 	clr	a
      00010F 93               [24]  762 	movc	a,@a+dptr
                                    763 ;	main.c:68: printf("%d %d %d", row, column, ad);
      000110 FE               [12]  764 	mov	r6,a
      000111 FB               [12]  765 	mov	r3,a
      000112 7C 00            [12]  766 	mov	r4,#0x00
      000114 7A 00            [12]  767 	mov	r2,#0x00
      000116 8F 01            [24]  768 	mov	ar1,r7
      000118 7F 00            [12]  769 	mov	r7,#0x00
      00011A C0 06            [24]  770 	push	ar6
      00011C C0 03            [24]  771 	push	ar3
      00011E C0 04            [24]  772 	push	ar4
      000120 C0 05            [24]  773 	push	ar5
      000122 C0 02            [24]  774 	push	ar2
      000124 C0 01            [24]  775 	push	ar1
      000126 C0 07            [24]  776 	push	ar7
      000128 74rCB            [12]  777 	mov	a,#___str_4
      00012A C0 E0            [24]  778 	push	acc
      00012C 74s00            [12]  779 	mov	a,#(___str_4 >> 8)
      00012E C0 E0            [24]  780 	push	acc
      000130 74 80            [12]  781 	mov	a,#0x80
      000132 C0 E0            [24]  782 	push	acc
      000134 12r00r00         [24]  783 	lcall	_printf
      000137 E5 81            [12]  784 	mov	a,sp
      000139 24 F7            [12]  785 	add	a,#0xf7
      00013B F5 81            [12]  786 	mov	sp,a
      00013D D0 06            [24]  787 	pop	ar6
                                    788 ;	main.c:69: goToAddr(ad);
      00013F 8E 82            [24]  789 	mov	dpl,r6
      000141 C0 06            [24]  790 	push	ar6
      000143 12r00r00         [24]  791 	lcall	_goToAddr
                                    792 ;	main.c:70: busyWait();
      000146 12r00r00         [24]  793 	lcall	_busyWait
                                    794 ;	main.c:71: printf_tiny("\n\rEnter the character\n\r");
      000149 74rD4            [12]  795 	mov	a,#___str_5
      00014B C0 E0            [24]  796 	push	acc
      00014D 74s00            [12]  797 	mov	a,#(___str_5 >> 8)
      00014F C0 E0            [24]  798 	push	acc
      000151 12r00r00         [24]  799 	lcall	_printf_tiny
      000154 15 81            [12]  800 	dec	sp
      000156 15 81            [12]  801 	dec	sp
                                    802 ;	main.c:72: uint8_t inputWrite = getchar();
      000158 12r02rC8         [24]  803 	lcall	_getchar
      00015B AD 82            [24]  804 	mov	r5,dpl
                                    805 ;	main.c:73: putchar(inputWrite);
      00015D 8D 04            [24]  806 	mov	ar4,r5
      00015F 7F 00            [12]  807 	mov	r7,#0x00
      000161 8C 82            [24]  808 	mov	dpl,r4
      000163 8F 83            [24]  809 	mov	dph,r7
      000165 C0 05            [24]  810 	push	ar5
      000167 12r02r97         [24]  811 	lcall	_putchar
      00016A D0 05            [24]  812 	pop	ar5
      00016C D0 06            [24]  813 	pop	ar6
                                    814 ;	main.c:74: goToAddr(ad);
      00016E 8E 82            [24]  815 	mov	dpl,r6
      000170 C0 05            [24]  816 	push	ar5
      000172 12r00r00         [24]  817 	lcall	_goToAddr
      000175 D0 05            [24]  818 	pop	ar5
                                    819 ;	main.c:75: lcdPutCh(inputWrite);
      000177 8D 82            [24]  820 	mov	dpl,r5
      000179 12r00r00         [24]  821 	lcall	_lcdPutCh
      00017C                        822 00108$:
                                    823 ;	main.c:78: if (ch == 'm')
      00017C 90r00r06         [24]  824 	mov	dptr,#_ch
      00017F E0               [24]  825 	movx	a,@dptr
      000180 FF               [12]  826 	mov	r7,a
      000181 BF 6D 03         [24]  827 	cjne	r7,#0x6d,00110$
                                    828 ;	main.c:80: printMenu();
      000184 12r00r00         [24]  829 	lcall	_printMenu
      000187                        830 00110$:
                                    831 ;	main.c:83: if( ch == 'p')
      000187 90r00r06         [24]  832 	mov	dptr,#_ch
      00018A E0               [24]  833 	movx	a,@dptr
      00018B FF               [12]  834 	mov	r7,a
      00018C BF 70 03         [24]  835 	cjne	r7,#0x70,00112$
                                    836 ;	main.c:84: gamePacman();
      00018F 12r00r00         [24]  837 	lcall	_gamePacman
      000192                        838 00112$:
                                    839 ;	main.c:86: if(ch == 'x')
      000192 90r00r06         [24]  840 	mov	dptr,#_ch
      000195 E0               [24]  841 	movx	a,@dptr
      000196 FF               [12]  842 	mov	r7,a
      000197 BF 78 19         [24]  843 	cjne	r7,#0x78,00114$
                                    844 ;	main.c:88: check = 0;
      00019A 90r00r05         [24]  845 	mov	dptr,#_check
      00019D E4               [12]  846 	clr	a
      00019E F0               [24]  847 	movx	@dptr,a
                                    848 ;	main.c:89: partSec = 0;
      00019F 90r00r00         [24]  849 	mov	dptr,#_partSec
      0001A2 F0               [24]  850 	movx	@dptr,a
                                    851 ;	main.c:90: sec = 0;
      0001A3 90r00r01         [24]  852 	mov	dptr,#_sec
      0001A6 F0               [24]  853 	movx	@dptr,a
                                    854 ;	main.c:91: min = 0;
      0001A7 90r00r02         [24]  855 	mov	dptr,#_min
      0001AA F0               [24]  856 	movx	@dptr,a
                                    857 ;	main.c:92: hour = 0;
      0001AB 90r00r03         [24]  858 	mov	dptr,#_hour
      0001AE F0               [24]  859 	movx	@dptr,a
                                    860 ;	main.c:93: x2 = 0;
      0001AF 90r00r04         [24]  861 	mov	dptr,#_x2
      0001B2 F0               [24]  862 	movx	@dptr,a
      0001B3                        863 00114$:
                                    864 ;	main.c:96: if(ch == 'y')
      0001B3 90r00r06         [24]  865 	mov	dptr,#_ch
      0001B6 E0               [24]  866 	movx	a,@dptr
      0001B7 FF               [12]  867 	mov	r7,a
      0001B8 BF 79 02         [24]  868 	cjne	r7,#0x79,00116$
                                    869 ;	main.c:98: TR0 = 0;
                                    870 ;	assignBit
      0001BB C2 8C            [12]  871 	clr	_TR0
      0001BD                        872 00116$:
                                    873 ;	main.c:101: if(ch == 'z')
      0001BD 90r00r06         [24]  874 	mov	dptr,#_ch
      0001C0 E0               [24]  875 	movx	a,@dptr
      0001C1 FF               [12]  876 	mov	r7,a
      0001C2 BF 7A 02         [24]  877 	cjne	r7,#0x7a,00118$
                                    878 ;	main.c:103: TR0 = 1;
                                    879 ;	assignBit
      0001C5 D2 8C            [12]  880 	setb	_TR0
      0001C7                        881 00118$:
                                    882 ;	main.c:106: if(ch == 'c')
      0001C7 90r00r06         [24]  883 	mov	dptr,#_ch
      0001CA E0               [24]  884 	movx	a,@dptr
      0001CB FF               [12]  885 	mov	r7,a
      0001CC BF 63 03         [24]  886 	cjne	r7,#0x63,00120$
                                    887 ;	main.c:108: lcdClear();
      0001CF 12r00r00         [24]  888 	lcall	_lcdClear
      0001D2                        889 00120$:
                                    890 ;	main.c:111: if(ch == 's')
      0001D2 90r00r06         [24]  891 	mov	dptr,#_ch
      0001D5 E0               [24]  892 	movx	a,@dptr
      0001D6 FF               [12]  893 	mov	r7,a
      0001D7 BF 73 21         [24]  894 	cjne	r7,#0x73,00122$
                                    895 ;	main.c:114: printf_tiny("\n\rEnter the string\n\r");
      0001DA 74rEC            [12]  896 	mov	a,#___str_6
      0001DC C0 E0            [24]  897 	push	acc
      0001DE 74s00            [12]  898 	mov	a,#(___str_6 >> 8)
      0001E0 C0 E0            [24]  899 	push	acc
      0001E2 12r00r00         [24]  900 	lcall	_printf_tiny
      0001E5 15 81            [12]  901 	dec	sp
      0001E7 15 81            [12]  902 	dec	sp
                                    903 ;	main.c:115: gets(stringRead);
      0001E9 90r00r4D         [24]  904 	mov	dptr,#_main_stringRead_196609_87
      0001EC 75 F0 00         [24]  905 	mov	b,#0x00
      0001EF 12r00r00         [24]  906 	lcall	_gets
                                    907 ;	main.c:117: putsLCD(stringRead);
      0001F2 90r00r4D         [24]  908 	mov	dptr,#_main_stringRead_196609_87
      0001F5 75 F0 00         [24]  909 	mov	b,#0x00
      0001F8 12r00r00         [24]  910 	lcall	_putsLCD
      0001FB                        911 00122$:
                                    912 ;	main.c:120: if(ch == 'd')
      0001FB 90r00r06         [24]  913 	mov	dptr,#_ch
      0001FE E0               [24]  914 	movx	a,@dptr
      0001FF FF               [12]  915 	mov	r7,a
      000200 BF 64 03         [24]  916 	cjne	r7,#0x64,00124$
                                    917 ;	main.c:122: ramDump();
      000203 12r00r00         [24]  918 	lcall	_ramDump
      000206                        919 00124$:
                                    920 ;	main.c:125: if(ch == 'g')
      000206 90r00r06         [24]  921 	mov	dptr,#_ch
      000209 E0               [24]  922 	movx	a,@dptr
      00020A FF               [12]  923 	mov	r7,a
      00020B BF 67 02         [24]  924 	cjne	r7,#0x67,00210$
      00020E 80 03            [24]  925 	sjmp	00211$
      000210                        926 00210$:
      000210 02r00r3B         [24]  927 	ljmp	00128$
      000213                        928 00211$:
                                    929 ;	main.c:127: customCharacter();
      000213 12r00r00         [24]  930 	lcall	_customCharacter
                                    931 ;	main.c:131: }
      000216 02r00r3B         [24]  932 	ljmp	00128$
                                    933 ;------------------------------------------------------------
                                    934 ;Allocation info for local variables in function 'timer0_isr'
                                    935 ;------------------------------------------------------------
                                    936 ;	main.c:133: void timer0_isr() __interrupt (1)
                                    937 ;	-----------------------------------------
                                    938 ;	 function timer0_isr
                                    939 ;	-----------------------------------------
      000219                        940 _timer0_isr:
      000219 C0 E0            [24]  941 	push	acc
      00021B C0 82            [24]  942 	push	dpl
      00021D C0 83            [24]  943 	push	dph
      00021F C0 07            [24]  944 	push	ar7
      000221 C0 D0            [24]  945 	push	psw
      000223 75 D0 00         [24]  946 	mov	psw,#0x00
                                    947 ;	main.c:135: TH0 = 0x4B;
      000226 75 8C 4B         [24]  948 	mov	_TH0,#0x4b
                                    949 ;	main.c:136: TL0 = 0xFC;
      000229 75 8A FC         [24]  950 	mov	_TL0,#0xfc
                                    951 ;	main.c:137: x2++;
      00022C 90r00r04         [24]  952 	mov	dptr,#_x2
      00022F E0               [24]  953 	movx	a,@dptr
      000230 24 01            [12]  954 	add	a,#0x01
      000232 F0               [24]  955 	movx	@dptr,a
                                    956 ;	main.c:138: if(x2 == 2)
      000233 E0               [24]  957 	movx	a,@dptr
      000234 FF               [12]  958 	mov	r7,a
      000235 BF 02 54         [24]  959 	cjne	r7,#0x02,00111$
                                    960 ;	main.c:140: if(partSec > 9)
      000238 90r00r00         [24]  961 	mov	dptr,#_partSec
      00023B E0               [24]  962 	movx	a,@dptr
      00023C FF               [12]  963 	mov  r7,a
      00023D 24 F6            [12]  964 	add	a,#0xff - 0x09
      00023F 50 3A            [24]  965 	jnc	00108$
                                    966 ;	main.c:142: sec++;
      000241 90r00r01         [24]  967 	mov	dptr,#_sec
      000244 E0               [24]  968 	movx	a,@dptr
      000245 24 01            [12]  969 	add	a,#0x01
      000247 F0               [24]  970 	movx	@dptr,a
                                    971 ;	main.c:143: if( sec > 59)
      000248 E0               [24]  972 	movx	a,@dptr
      000249 FF               [12]  973 	mov  r7,a
      00024A 24 C4            [12]  974 	add	a,#0xff - 0x3b
      00024C 50 28            [24]  975 	jnc	00106$
                                    976 ;	main.c:145: min++;
      00024E 90r00r02         [24]  977 	mov	dptr,#_min
      000251 E0               [24]  978 	movx	a,@dptr
      000252 24 01            [12]  979 	add	a,#0x01
      000254 F0               [24]  980 	movx	@dptr,a
                                    981 ;	main.c:146: if( min == 59)
      000255 E0               [24]  982 	movx	a,@dptr
      000256 FF               [12]  983 	mov	r7,a
      000257 BF 3B 17         [24]  984 	cjne	r7,#0x3b,00104$
                                    985 ;	main.c:148: hour++;
      00025A 90r00r03         [24]  986 	mov	dptr,#_hour
      00025D E0               [24]  987 	movx	a,@dptr
      00025E 24 01            [12]  988 	add	a,#0x01
      000260 F0               [24]  989 	movx	@dptr,a
                                    990 ;	main.c:149: if(hour > 23)
      000261 E0               [24]  991 	movx	a,@dptr
      000262 FF               [12]  992 	mov  r7,a
      000263 24 E8            [12]  993 	add	a,#0xff - 0x17
      000265 50 05            [24]  994 	jnc	00102$
                                    995 ;	main.c:151: hour = 0;
      000267 90r00r03         [24]  996 	mov	dptr,#_hour
      00026A E4               [12]  997 	clr	a
      00026B F0               [24]  998 	movx	@dptr,a
      00026C                        999 00102$:
                                   1000 ;	main.c:153: min = 0;
      00026C 90r00r02         [24] 1001 	mov	dptr,#_min
      00026F E4               [12] 1002 	clr	a
      000270 F0               [24] 1003 	movx	@dptr,a
      000271                       1004 00104$:
                                   1005 ;	main.c:155: sec = 0;
      000271 90r00r01         [24] 1006 	mov	dptr,#_sec
      000274 E4               [12] 1007 	clr	a
      000275 F0               [24] 1008 	movx	@dptr,a
      000276                       1009 00106$:
                                   1010 ;	main.c:157: partSec = 0;
      000276 90r00r00         [24] 1011 	mov	dptr,#_partSec
      000279 E4               [12] 1012 	clr	a
      00027A F0               [24] 1013 	movx	@dptr,a
      00027B                       1014 00108$:
                                   1015 ;	main.c:159: partSec++;
      00027B 90r00r00         [24] 1016 	mov	dptr,#_partSec
      00027E E0               [24] 1017 	movx	a,@dptr
      00027F 24 01            [12] 1018 	add	a,#0x01
      000281 F0               [24] 1019 	movx	@dptr,a
                                   1020 ;	main.c:160: x2 = 0;
      000282 90r00r04         [24] 1021 	mov	dptr,#_x2
      000285 E4               [12] 1022 	clr	a
      000286 F0               [24] 1023 	movx	@dptr,a
                                   1024 ;	main.c:161: check = 1;
      000287 90r00r05         [24] 1025 	mov	dptr,#_check
      00028A 04               [12] 1026 	inc	a
      00028B F0               [24] 1027 	movx	@dptr,a
      00028C                       1028 00111$:
                                   1029 ;	main.c:163: }
      00028C D0 D0            [24] 1030 	pop	psw
      00028E D0 07            [24] 1031 	pop	ar7
      000290 D0 83            [24] 1032 	pop	dph
      000292 D0 82            [24] 1033 	pop	dpl
      000294 D0 E0            [24] 1034 	pop	acc
      000296 32               [24] 1035 	reti
                                   1036 ;	eliminated unneeded push/pop b
                                   1037 ;------------------------------------------------------------
                                   1038 ;Allocation info for local variables in function 'putchar'
                                   1039 ;------------------------------------------------------------
                                   1040 ;c                         Allocated with name '_putchar_c_65536_96'
                                   1041 ;------------------------------------------------------------
                                   1042 ;	main.c:166: int putchar (int c)
                                   1043 ;	-----------------------------------------
                                   1044 ;	 function putchar
                                   1045 ;	-----------------------------------------
      000297                       1046 _putchar:
      000297 AF 83            [24] 1047 	mov	r7,dph
      000299 E5 82            [12] 1048 	mov	a,dpl
      00029B 90r00r7D         [24] 1049 	mov	dptr,#_putchar_c_65536_96
      00029E F0               [24] 1050 	movx	@dptr,a
      00029F EF               [12] 1051 	mov	a,r7
      0002A0 A3               [24] 1052 	inc	dptr
      0002A1 F0               [24] 1053 	movx	@dptr,a
                                   1054 ;	main.c:168: while ((SCON & 0x02) == 0)    // wait for TX ready, spin on TI
      0002A2                       1055 00103$:
      0002A2 E5 98            [12] 1056 	mov	a,_SCON
      0002A4 20 E1 12         [24] 1057 	jb	acc.1,00105$
                                   1058 ;	main.c:170: if(check == 1)
      0002A7 90r00r05         [24] 1059 	mov	dptr,#_check
      0002AA E0               [24] 1060 	movx	a,@dptr
      0002AB FF               [12] 1061 	mov	r7,a
      0002AC BF 01 F3         [24] 1062 	cjne	r7,#0x01,00103$
                                   1063 ;	main.c:172: check = 0;
      0002AF 90r00r05         [24] 1064 	mov	dptr,#_check
      0002B2 E4               [12] 1065 	clr	a
      0002B3 F0               [24] 1066 	movx	@dptr,a
                                   1067 ;	main.c:173: printTimeStamp();
      0002B4 12r02rEA         [24] 1068 	lcall	_printTimeStamp
      0002B7 80 E9            [24] 1069 	sjmp	00103$
      0002B9                       1070 00105$:
                                   1071 ;	main.c:176: SBUF = c;  	// load serial port with transmit value
      0002B9 90r00r7D         [24] 1072 	mov	dptr,#_putchar_c_65536_96
      0002BC E0               [24] 1073 	movx	a,@dptr
      0002BD FE               [12] 1074 	mov	r6,a
      0002BE A3               [24] 1075 	inc	dptr
      0002BF E0               [24] 1076 	movx	a,@dptr
      0002C0 8E 99            [24] 1077 	mov	_SBUF,r6
                                   1078 ;	main.c:177: TI = 0;  	// clear TI flag
                                   1079 ;	assignBit
      0002C2 C2 99            [12] 1080 	clr	_TI
                                   1081 ;	main.c:178: return 0;
      0002C4 90 00 00         [24] 1082 	mov	dptr,#0x0000
                                   1083 ;	main.c:179: }
      0002C7 22               [24] 1084 	ret
                                   1085 ;------------------------------------------------------------
                                   1086 ;Allocation info for local variables in function 'getchar'
                                   1087 ;------------------------------------------------------------
                                   1088 ;	main.c:181: int getchar ()
                                   1089 ;	-----------------------------------------
                                   1090 ;	 function getchar
                                   1091 ;	-----------------------------------------
      0002C8                       1092 _getchar:
                                   1093 ;	main.c:183: while ((SCON & 0x01) == 0)  // wait for character to be received, spin on RI
      0002C8                       1094 00103$:
      0002C8 E5 98            [12] 1095 	mov	a,_SCON
      0002CA 20 E0 12         [24] 1096 	jb	acc.0,00105$
                                   1097 ;	main.c:185: if(check == 1)
      0002CD 90r00r05         [24] 1098 	mov	dptr,#_check
      0002D0 E0               [24] 1099 	movx	a,@dptr
      0002D1 FF               [12] 1100 	mov	r7,a
      0002D2 BF 01 F3         [24] 1101 	cjne	r7,#0x01,00103$
                                   1102 ;	main.c:187: check = 0;
      0002D5 90r00r05         [24] 1103 	mov	dptr,#_check
      0002D8 E4               [12] 1104 	clr	a
      0002D9 F0               [24] 1105 	movx	@dptr,a
                                   1106 ;	main.c:188: printTimeStamp();
      0002DA 12r02rEA         [24] 1107 	lcall	_printTimeStamp
      0002DD 80 E9            [24] 1108 	sjmp	00103$
      0002DF                       1109 00105$:
                                   1110 ;	main.c:191: RI = 0;			// clear RI flag
                                   1111 ;	assignBit
      0002DF C2 98            [12] 1112 	clr	_RI
                                   1113 ;	main.c:192: return SBUF;  	// return character from SBUF
      0002E1 AE 99            [24] 1114 	mov	r6,_SBUF
      0002E3 7F 00            [12] 1115 	mov	r7,#0x00
      0002E5 8E 82            [24] 1116 	mov	dpl,r6
      0002E7 8F 83            [24] 1117 	mov	dph,r7
                                   1118 ;	main.c:193: }
      0002E9 22               [24] 1119 	ret
                                   1120 ;------------------------------------------------------------
                                   1121 ;Allocation info for local variables in function 'printTimeStamp'
                                   1122 ;------------------------------------------------------------
                                   1123 ;	main.c:195: void printTimeStamp()
                                   1124 ;	-----------------------------------------
                                   1125 ;	 function printTimeStamp
                                   1126 ;	-----------------------------------------
      0002EA                       1127 _printTimeStamp:
                                   1128 ;	main.c:197: goToAddr(0x57);
      0002EA 75 82 57         [24] 1129 	mov	dpl,#0x57
      0002ED 12r00r00         [24] 1130 	lcall	_goToAddr
                                   1131 ;	main.c:198: lcdPutCh(hour + '0');
      0002F0 90r00r03         [24] 1132 	mov	dptr,#_hour
      0002F3 E0               [24] 1133 	movx	a,@dptr
      0002F4 24 30            [12] 1134 	add	a,#0x30
      0002F6 F5 82            [12] 1135 	mov	dpl,a
      0002F8 12r00r00         [24] 1136 	lcall	_lcdPutCh
                                   1137 ;	main.c:199: lcdPutCh(':');
      0002FB 75 82 3A         [24] 1138 	mov	dpl,#0x3a
      0002FE 12r00r00         [24] 1139 	lcall	_lcdPutCh
                                   1140 ;	main.c:200: lcdPutCh(min / 10 + '0');
      000301 90r00r02         [24] 1141 	mov	dptr,#_min
      000304 E0               [24] 1142 	movx	a,@dptr
      000305 FF               [12] 1143 	mov	r7,a
      000306 7E 00            [12] 1144 	mov	r6,#0x00
      000308 90r00r00         [24] 1145 	mov	dptr,#__divsint_PARM_2
      00030B 74 0A            [12] 1146 	mov	a,#0x0a
      00030D F0               [24] 1147 	movx	@dptr,a
      00030E E4               [12] 1148 	clr	a
      00030F A3               [24] 1149 	inc	dptr
      000310 F0               [24] 1150 	movx	@dptr,a
      000311 8F 82            [24] 1151 	mov	dpl,r7
      000313 8E 83            [24] 1152 	mov	dph,r6
      000315 12r00r00         [24] 1153 	lcall	__divsint
      000318 AE 82            [24] 1154 	mov	r6,dpl
      00031A 74 30            [12] 1155 	mov	a,#0x30
      00031C 2E               [12] 1156 	add	a,r6
      00031D F5 82            [12] 1157 	mov	dpl,a
      00031F 12r00r00         [24] 1158 	lcall	_lcdPutCh
                                   1159 ;	main.c:201: lcdPutCh(min % 10 + '0');
      000322 90r00r02         [24] 1160 	mov	dptr,#_min
      000325 E0               [24] 1161 	movx	a,@dptr
      000326 FF               [12] 1162 	mov	r7,a
      000327 7E 00            [12] 1163 	mov	r6,#0x00
      000329 90r00r00         [24] 1164 	mov	dptr,#__modsint_PARM_2
      00032C 74 0A            [12] 1165 	mov	a,#0x0a
      00032E F0               [24] 1166 	movx	@dptr,a
      00032F E4               [12] 1167 	clr	a
      000330 A3               [24] 1168 	inc	dptr
      000331 F0               [24] 1169 	movx	@dptr,a
      000332 8F 82            [24] 1170 	mov	dpl,r7
      000334 8E 83            [24] 1171 	mov	dph,r6
      000336 12r00r00         [24] 1172 	lcall	__modsint
      000339 AE 82            [24] 1173 	mov	r6,dpl
      00033B 74 30            [12] 1174 	mov	a,#0x30
      00033D 2E               [12] 1175 	add	a,r6
      00033E F5 82            [12] 1176 	mov	dpl,a
      000340 12r00r00         [24] 1177 	lcall	_lcdPutCh
                                   1178 ;	main.c:202: lcdPutCh(':');
      000343 75 82 3A         [24] 1179 	mov	dpl,#0x3a
      000346 12r00r00         [24] 1180 	lcall	_lcdPutCh
                                   1181 ;	main.c:203: lcdPutCh(sec / 10 + '0');
      000349 90r00r01         [24] 1182 	mov	dptr,#_sec
      00034C E0               [24] 1183 	movx	a,@dptr
      00034D FF               [12] 1184 	mov	r7,a
      00034E 7E 00            [12] 1185 	mov	r6,#0x00
      000350 90r00r00         [24] 1186 	mov	dptr,#__divsint_PARM_2
      000353 74 0A            [12] 1187 	mov	a,#0x0a
      000355 F0               [24] 1188 	movx	@dptr,a
      000356 E4               [12] 1189 	clr	a
      000357 A3               [24] 1190 	inc	dptr
      000358 F0               [24] 1191 	movx	@dptr,a
      000359 8F 82            [24] 1192 	mov	dpl,r7
      00035B 8E 83            [24] 1193 	mov	dph,r6
      00035D 12r00r00         [24] 1194 	lcall	__divsint
      000360 AE 82            [24] 1195 	mov	r6,dpl
      000362 74 30            [12] 1196 	mov	a,#0x30
      000364 2E               [12] 1197 	add	a,r6
      000365 F5 82            [12] 1198 	mov	dpl,a
      000367 12r00r00         [24] 1199 	lcall	_lcdPutCh
                                   1200 ;	main.c:204: lcdPutCh(sec % 10 + '0');
      00036A 90r00r01         [24] 1201 	mov	dptr,#_sec
      00036D E0               [24] 1202 	movx	a,@dptr
      00036E FF               [12] 1203 	mov	r7,a
      00036F 7E 00            [12] 1204 	mov	r6,#0x00
      000371 90r00r00         [24] 1205 	mov	dptr,#__modsint_PARM_2
      000374 74 0A            [12] 1206 	mov	a,#0x0a
      000376 F0               [24] 1207 	movx	@dptr,a
      000377 E4               [12] 1208 	clr	a
      000378 A3               [24] 1209 	inc	dptr
      000379 F0               [24] 1210 	movx	@dptr,a
      00037A 8F 82            [24] 1211 	mov	dpl,r7
      00037C 8E 83            [24] 1212 	mov	dph,r6
      00037E 12r00r00         [24] 1213 	lcall	__modsint
      000381 AE 82            [24] 1214 	mov	r6,dpl
      000383 74 30            [12] 1215 	mov	a,#0x30
      000385 2E               [12] 1216 	add	a,r6
      000386 F5 82            [12] 1217 	mov	dpl,a
      000388 12r00r00         [24] 1218 	lcall	_lcdPutCh
                                   1219 ;	main.c:205: lcdPutCh('.');
      00038B 75 82 2E         [24] 1220 	mov	dpl,#0x2e
      00038E 12r00r00         [24] 1221 	lcall	_lcdPutCh
                                   1222 ;	main.c:206: lcdPutCh(partSec + '0');
      000391 90r00r00         [24] 1223 	mov	dptr,#_partSec
      000394 E0               [24] 1224 	movx	a,@dptr
      000395 24 30            [12] 1225 	add	a,#0x30
      000397 F5 82            [12] 1226 	mov	dpl,a
                                   1227 ;	main.c:207: }
      000399 02r00r00         [24] 1228 	ljmp	_lcdPutCh
                                   1229 	.area CSEG    (CODE)
                                   1230 	.area CONST   (CODE)
      000000                       1231 _lookUpTable1:
      000000 00                    1232 	.db #0x00	; 0
      000001 01                    1233 	.db #0x01	; 1
      000002 02                    1234 	.db #0x02	; 2
      000003 03                    1235 	.db #0x03	; 3
      000004 04                    1236 	.db #0x04	; 4
      000005 05                    1237 	.db #0x05	; 5
      000006 06                    1238 	.db #0x06	; 6
      000007 07                    1239 	.db #0x07	; 7
      000008 08                    1240 	.db #0x08	; 8
      000009 09                    1241 	.db #0x09	; 9
      00000A 0A                    1242 	.db #0x0a	; 10
      00000B 0B                    1243 	.db #0x0b	; 11
      00000C 0C                    1244 	.db #0x0c	; 12
      00000D 0D                    1245 	.db #0x0d	; 13
      00000E 0E                    1246 	.db #0x0e	; 14
      00000F 0F                    1247 	.db #0x0f	; 15
      000010 40                    1248 	.db #0x40	; 64
      000011 41                    1249 	.db #0x41	; 65	'A'
      000012 42                    1250 	.db #0x42	; 66	'B'
      000013 43                    1251 	.db #0x43	; 67	'C'
      000014 44                    1252 	.db #0x44	; 68	'D'
      000015 45                    1253 	.db #0x45	; 69	'E'
      000016 46                    1254 	.db #0x46	; 70	'F'
      000017 47                    1255 	.db #0x47	; 71	'G'
      000018 48                    1256 	.db #0x48	; 72	'H'
      000019 49                    1257 	.db #0x49	; 73	'I'
      00001A 4A                    1258 	.db #0x4a	; 74	'J'
      00001B 4B                    1259 	.db #0x4b	; 75	'K'
      00001C 4C                    1260 	.db #0x4c	; 76	'L'
      00001D 4D                    1261 	.db #0x4d	; 77	'M'
      00001E 4E                    1262 	.db #0x4e	; 78	'N'
      00001F 4F                    1263 	.db #0x4f	; 79	'O'
      000020 10                    1264 	.db #0x10	; 16
      000021 11                    1265 	.db #0x11	; 17
      000022 12                    1266 	.db #0x12	; 18
      000023 13                    1267 	.db #0x13	; 19
      000024 14                    1268 	.db #0x14	; 20
      000025 15                    1269 	.db #0x15	; 21
      000026 16                    1270 	.db #0x16	; 22
      000027 17                    1271 	.db #0x17	; 23
      000028 18                    1272 	.db #0x18	; 24
      000029 19                    1273 	.db #0x19	; 25
      00002A 1A                    1274 	.db #0x1a	; 26
      00002B 1B                    1275 	.db #0x1b	; 27
      00002C 1C                    1276 	.db #0x1c	; 28
      00002D 1D                    1277 	.db #0x1d	; 29
      00002E 1E                    1278 	.db #0x1e	; 30
      00002F 1F                    1279 	.db #0x1f	; 31
      000030 50                    1280 	.db #0x50	; 80	'P'
      000031 51                    1281 	.db #0x51	; 81	'Q'
      000032 52                    1282 	.db #0x52	; 82	'R'
      000033 53                    1283 	.db #0x53	; 83	'S'
      000034 54                    1284 	.db #0x54	; 84	'T'
      000035 55                    1285 	.db #0x55	; 85	'U'
      000036 56                    1286 	.db #0x56	; 86	'V'
      000037 57                    1287 	.db #0x57	; 87	'W'
      000038 58                    1288 	.db #0x58	; 88	'X'
      000039 59                    1289 	.db #0x59	; 89	'Y'
      00003A 5A                    1290 	.db #0x5a	; 90	'Z'
      00003B 5B                    1291 	.db #0x5b	; 91
      00003C 5C                    1292 	.db #0x5c	; 92
      00003D 5D                    1293 	.db #0x5d	; 93
      00003E 5E                    1294 	.db #0x5e	; 94
      00003F 5F                    1295 	.db #0x5f	; 95
                                   1296 	.area CONST   (CODE)
      000040                       1297 ___str_0:
      000040 0A                    1298 	.db 0x0a
      000041 0D                    1299 	.db 0x0d
      000042 45 6E 74 65 72 20 74  1300 	.ascii "Enter the row number from 0 to 2"
             68 65 20 72 6F 77 20
             6E 75 6D 62 65 72 20
             66 72 6F 6D 20 30 20
             74 6F 20 32
      000062 0A                    1301 	.db 0x0a
      000063 0D                    1302 	.db 0x0d
      000064 00                    1303 	.db 0x00
                                   1304 	.area CSEG    (CODE)
                                   1305 	.area CONST   (CODE)
      000065                       1306 ___str_1:
      000065 0A                    1307 	.db 0x0a
      000066 0D                    1308 	.db 0x0d
      000067 45 6E 74 65 72 65 64  1309 	.ascii "Entered Row is incorrect"
             20 52 6F 77 20 69 73
             20 69 6E 63 6F 72 72
             65 63 74
      00007F 0A                    1310 	.db 0x0a
      000080 0D                    1311 	.db 0x0d
      000081 00                    1312 	.db 0x00
                                   1313 	.area CSEG    (CODE)
                                   1314 	.area CONST   (CODE)
      000082                       1315 ___str_2:
      000082 0A                    1316 	.db 0x0a
      000083 0D                    1317 	.db 0x0d
      000084 45 6E 74 65 72 20 74  1318 	.ascii "Enter the column number from 0 to 15"
             68 65 20 63 6F 6C 75
             6D 6E 20 6E 75 6D 62
             65 72 20 66 72 6F 6D
             20 30 20 74 6F 20 31
             35
      0000A8 0A                    1319 	.db 0x0a
      0000A9 0D                    1320 	.db 0x0d
      0000AA 00                    1321 	.db 0x00
                                   1322 	.area CSEG    (CODE)
                                   1323 	.area CONST   (CODE)
      0000AB                       1324 ___str_3:
      0000AB 0A                    1325 	.db 0x0a
      0000AC 0D                    1326 	.db 0x0d
      0000AD 45 6E 74 65 72 65 64  1327 	.ascii "Entered Column is incorrect"
             20 43 6F 6C 75 6D 6E
             20 69 73 20 69 6E 63
             6F 72 72 65 63 74
      0000C8 0A                    1328 	.db 0x0a
      0000C9 0D                    1329 	.db 0x0d
      0000CA 00                    1330 	.db 0x00
                                   1331 	.area CSEG    (CODE)
                                   1332 	.area CONST   (CODE)
      0000CB                       1333 ___str_4:
      0000CB 25 64 20 25 64 20 25  1334 	.ascii "%d %d %d"
             64
      0000D3 00                    1335 	.db 0x00
                                   1336 	.area CSEG    (CODE)
                                   1337 	.area CONST   (CODE)
      0000D4                       1338 ___str_5:
      0000D4 0A                    1339 	.db 0x0a
      0000D5 0D                    1340 	.db 0x0d
      0000D6 45 6E 74 65 72 20 74  1341 	.ascii "Enter the character"
             68 65 20 63 68 61 72
             61 63 74 65 72
      0000E9 0A                    1342 	.db 0x0a
      0000EA 0D                    1343 	.db 0x0d
      0000EB 00                    1344 	.db 0x00
                                   1345 	.area CSEG    (CODE)
                                   1346 	.area CONST   (CODE)
      0000EC                       1347 ___str_6:
      0000EC 0A                    1348 	.db 0x0a
      0000ED 0D                    1349 	.db 0x0d
      0000EE 45 6E 74 65 72 20 74  1350 	.ascii "Enter the string"
             68 65 20 73 74 72 69
             6E 67
      0000FE 0A                    1351 	.db 0x0a
      0000FF 0D                    1352 	.db 0x0d
      000100 00                    1353 	.db 0x00
                                   1354 	.area CSEG    (CODE)
                                   1355 	.area XINIT   (CODE)
                                   1356 	.area CABS    (ABS,CODE)
