                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module lcdCommands
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _lookUpTable
                                     12 	.globl _messages
                                     13 	.globl _uiLines
                                     14 	.globl _atoi
                                     15 	.globl _memset
                                     16 	.globl _printf_tiny
                                     17 	.globl _putchar
                                     18 	.globl _getchar
                                     19 	.globl _printf
                                     20 	.globl _P5_7
                                     21 	.globl _P5_6
                                     22 	.globl _P5_5
                                     23 	.globl _P5_4
                                     24 	.globl _P5_3
                                     25 	.globl _P5_2
                                     26 	.globl _P5_1
                                     27 	.globl _P5_0
                                     28 	.globl _P4_7
                                     29 	.globl _P4_6
                                     30 	.globl _P4_5
                                     31 	.globl _P4_4
                                     32 	.globl _P4_3
                                     33 	.globl _P4_2
                                     34 	.globl _P4_1
                                     35 	.globl _P4_0
                                     36 	.globl _PX0L
                                     37 	.globl _PT0L
                                     38 	.globl _PX1L
                                     39 	.globl _PT1L
                                     40 	.globl _PSL
                                     41 	.globl _PT2L
                                     42 	.globl _PPCL
                                     43 	.globl _EC
                                     44 	.globl _CCF0
                                     45 	.globl _CCF1
                                     46 	.globl _CCF2
                                     47 	.globl _CCF3
                                     48 	.globl _CCF4
                                     49 	.globl _CR
                                     50 	.globl _CF
                                     51 	.globl _TF2
                                     52 	.globl _EXF2
                                     53 	.globl _RCLK
                                     54 	.globl _TCLK
                                     55 	.globl _EXEN2
                                     56 	.globl _TR2
                                     57 	.globl _C_T2
                                     58 	.globl _CP_RL2
                                     59 	.globl _T2CON_7
                                     60 	.globl _T2CON_6
                                     61 	.globl _T2CON_5
                                     62 	.globl _T2CON_4
                                     63 	.globl _T2CON_3
                                     64 	.globl _T2CON_2
                                     65 	.globl _T2CON_1
                                     66 	.globl _T2CON_0
                                     67 	.globl _PT2
                                     68 	.globl _ET2
                                     69 	.globl _CY
                                     70 	.globl _AC
                                     71 	.globl _F0
                                     72 	.globl _RS1
                                     73 	.globl _RS0
                                     74 	.globl _OV
                                     75 	.globl _F1
                                     76 	.globl _P
                                     77 	.globl _PS
                                     78 	.globl _PT1
                                     79 	.globl _PX1
                                     80 	.globl _PT0
                                     81 	.globl _PX0
                                     82 	.globl _RD
                                     83 	.globl _WR
                                     84 	.globl _T1
                                     85 	.globl _T0
                                     86 	.globl _INT1
                                     87 	.globl _INT0
                                     88 	.globl _TXD
                                     89 	.globl _RXD
                                     90 	.globl _P3_7
                                     91 	.globl _P3_6
                                     92 	.globl _P3_5
                                     93 	.globl _P3_4
                                     94 	.globl _P3_3
                                     95 	.globl _P3_2
                                     96 	.globl _P3_1
                                     97 	.globl _P3_0
                                     98 	.globl _EA
                                     99 	.globl _ES
                                    100 	.globl _ET1
                                    101 	.globl _EX1
                                    102 	.globl _ET0
                                    103 	.globl _EX0
                                    104 	.globl _P2_7
                                    105 	.globl _P2_6
                                    106 	.globl _P2_5
                                    107 	.globl _P2_4
                                    108 	.globl _P2_3
                                    109 	.globl _P2_2
                                    110 	.globl _P2_1
                                    111 	.globl _P2_0
                                    112 	.globl _SM0
                                    113 	.globl _SM1
                                    114 	.globl _SM2
                                    115 	.globl _REN
                                    116 	.globl _TB8
                                    117 	.globl _RB8
                                    118 	.globl _TI
                                    119 	.globl _RI
                                    120 	.globl _P1_7
                                    121 	.globl _P1_6
                                    122 	.globl _P1_5
                                    123 	.globl _P1_4
                                    124 	.globl _P1_3
                                    125 	.globl _P1_2
                                    126 	.globl _P1_1
                                    127 	.globl _P1_0
                                    128 	.globl _TF1
                                    129 	.globl _TR1
                                    130 	.globl _TF0
                                    131 	.globl _TR0
                                    132 	.globl _IE1
                                    133 	.globl _IT1
                                    134 	.globl _IE0
                                    135 	.globl _IT0
                                    136 	.globl _P0_7
                                    137 	.globl _P0_6
                                    138 	.globl _P0_5
                                    139 	.globl _P0_4
                                    140 	.globl _P0_3
                                    141 	.globl _P0_2
                                    142 	.globl _P0_1
                                    143 	.globl _P0_0
                                    144 	.globl _EECON
                                    145 	.globl _KBF
                                    146 	.globl _KBE
                                    147 	.globl _KBLS
                                    148 	.globl _BRL
                                    149 	.globl _BDRCON
                                    150 	.globl _T2MOD
                                    151 	.globl _SPDAT
                                    152 	.globl _SPSTA
                                    153 	.globl _SPCON
                                    154 	.globl _SADEN
                                    155 	.globl _SADDR
                                    156 	.globl _WDTPRG
                                    157 	.globl _WDTRST
                                    158 	.globl _P5
                                    159 	.globl _P4
                                    160 	.globl _IPH1
                                    161 	.globl _IPL1
                                    162 	.globl _IPH0
                                    163 	.globl _IPL0
                                    164 	.globl _IEN1
                                    165 	.globl _IEN0
                                    166 	.globl _CMOD
                                    167 	.globl _CL
                                    168 	.globl _CH
                                    169 	.globl _CCON
                                    170 	.globl _CCAPM4
                                    171 	.globl _CCAPM3
                                    172 	.globl _CCAPM2
                                    173 	.globl _CCAPM1
                                    174 	.globl _CCAPM0
                                    175 	.globl _CCAP4L
                                    176 	.globl _CCAP3L
                                    177 	.globl _CCAP2L
                                    178 	.globl _CCAP1L
                                    179 	.globl _CCAP0L
                                    180 	.globl _CCAP4H
                                    181 	.globl _CCAP3H
                                    182 	.globl _CCAP2H
                                    183 	.globl _CCAP1H
                                    184 	.globl _CCAP0H
                                    185 	.globl _CKCON1
                                    186 	.globl _CKCON0
                                    187 	.globl _CKRL
                                    188 	.globl _AUXR1
                                    189 	.globl _AUXR
                                    190 	.globl _TH2
                                    191 	.globl _TL2
                                    192 	.globl _RCAP2H
                                    193 	.globl _RCAP2L
                                    194 	.globl _T2CON
                                    195 	.globl _B
                                    196 	.globl _ACC
                                    197 	.globl _PSW
                                    198 	.globl _IP
                                    199 	.globl _P3
                                    200 	.globl _IE
                                    201 	.globl _P2
                                    202 	.globl _SBUF
                                    203 	.globl _SCON
                                    204 	.globl _P1
                                    205 	.globl _TH1
                                    206 	.globl _TH0
                                    207 	.globl _TL1
                                    208 	.globl _TL0
                                    209 	.globl _TMOD
                                    210 	.globl _TCON
                                    211 	.globl _PCON
                                    212 	.globl _DPH
                                    213 	.globl _DPL
                                    214 	.globl _SP
                                    215 	.globl _P0
                                    216 	.globl _goToXY_PARM_2
                                    217 	.globl _readCharacter
                                    218 	.globl _writeCharacter
                                    219 	.globl _busyPoll
                                    220 	.globl _lcdGeneral
                                    221 	.globl _delay
                                    222 	.globl _timerInit
                                    223 	.globl _busyWait
                                    224 	.globl _lcdInit
                                    225 	.globl _lcdPutCh
                                    226 	.globl _lcdClear
                                    227 	.globl _goToAddr
                                    228 	.globl _goToXY
                                    229 	.globl _customCharacter
                                    230 	.globl _readLCD
                                    231 	.globl _putsLCD
                                    232 	.globl _gets
                                    233 	.globl _ramDump
                                    234 	.globl _gamePacman
                                    235 	.globl _makePacmanRight
                                    236 	.globl _makePacmanLeft
                                    237 	.globl _printBinary
                                    238 	.globl _atoh
                                    239 	.globl _printMenu
                                    240 ;--------------------------------------------------------
                                    241 ; special function registers
                                    242 ;--------------------------------------------------------
                                    243 	.area RSEG    (ABS,DATA)
      000000                        244 	.org 0x0000
                           000080   245 _P0	=	0x0080
                           000081   246 _SP	=	0x0081
                           000082   247 _DPL	=	0x0082
                           000083   248 _DPH	=	0x0083
                           000087   249 _PCON	=	0x0087
                           000088   250 _TCON	=	0x0088
                           000089   251 _TMOD	=	0x0089
                           00008A   252 _TL0	=	0x008a
                           00008B   253 _TL1	=	0x008b
                           00008C   254 _TH0	=	0x008c
                           00008D   255 _TH1	=	0x008d
                           000090   256 _P1	=	0x0090
                           000098   257 _SCON	=	0x0098
                           000099   258 _SBUF	=	0x0099
                           0000A0   259 _P2	=	0x00a0
                           0000A8   260 _IE	=	0x00a8
                           0000B0   261 _P3	=	0x00b0
                           0000B8   262 _IP	=	0x00b8
                           0000D0   263 _PSW	=	0x00d0
                           0000E0   264 _ACC	=	0x00e0
                           0000F0   265 _B	=	0x00f0
                           0000C8   266 _T2CON	=	0x00c8
                           0000CA   267 _RCAP2L	=	0x00ca
                           0000CB   268 _RCAP2H	=	0x00cb
                           0000CC   269 _TL2	=	0x00cc
                           0000CD   270 _TH2	=	0x00cd
                           00008E   271 _AUXR	=	0x008e
                           0000A2   272 _AUXR1	=	0x00a2
                           000097   273 _CKRL	=	0x0097
                           00008F   274 _CKCON0	=	0x008f
                           0000AF   275 _CKCON1	=	0x00af
                           0000FA   276 _CCAP0H	=	0x00fa
                           0000FB   277 _CCAP1H	=	0x00fb
                           0000FC   278 _CCAP2H	=	0x00fc
                           0000FD   279 _CCAP3H	=	0x00fd
                           0000FE   280 _CCAP4H	=	0x00fe
                           0000EA   281 _CCAP0L	=	0x00ea
                           0000EB   282 _CCAP1L	=	0x00eb
                           0000EC   283 _CCAP2L	=	0x00ec
                           0000ED   284 _CCAP3L	=	0x00ed
                           0000EE   285 _CCAP4L	=	0x00ee
                           0000DA   286 _CCAPM0	=	0x00da
                           0000DB   287 _CCAPM1	=	0x00db
                           0000DC   288 _CCAPM2	=	0x00dc
                           0000DD   289 _CCAPM3	=	0x00dd
                           0000DE   290 _CCAPM4	=	0x00de
                           0000D8   291 _CCON	=	0x00d8
                           0000F9   292 _CH	=	0x00f9
                           0000E9   293 _CL	=	0x00e9
                           0000D9   294 _CMOD	=	0x00d9
                           0000A8   295 _IEN0	=	0x00a8
                           0000B1   296 _IEN1	=	0x00b1
                           0000B8   297 _IPL0	=	0x00b8
                           0000B7   298 _IPH0	=	0x00b7
                           0000B2   299 _IPL1	=	0x00b2
                           0000B3   300 _IPH1	=	0x00b3
                           0000C0   301 _P4	=	0x00c0
                           0000E8   302 _P5	=	0x00e8
                           0000A6   303 _WDTRST	=	0x00a6
                           0000A7   304 _WDTPRG	=	0x00a7
                           0000A9   305 _SADDR	=	0x00a9
                           0000B9   306 _SADEN	=	0x00b9
                           0000C3   307 _SPCON	=	0x00c3
                           0000C4   308 _SPSTA	=	0x00c4
                           0000C5   309 _SPDAT	=	0x00c5
                           0000C9   310 _T2MOD	=	0x00c9
                           00009B   311 _BDRCON	=	0x009b
                           00009A   312 _BRL	=	0x009a
                           00009C   313 _KBLS	=	0x009c
                           00009D   314 _KBE	=	0x009d
                           00009E   315 _KBF	=	0x009e
                           0000D2   316 _EECON	=	0x00d2
                                    317 ;--------------------------------------------------------
                                    318 ; special function bits
                                    319 ;--------------------------------------------------------
                                    320 	.area RSEG    (ABS,DATA)
      000000                        321 	.org 0x0000
                           000080   322 _P0_0	=	0x0080
                           000081   323 _P0_1	=	0x0081
                           000082   324 _P0_2	=	0x0082
                           000083   325 _P0_3	=	0x0083
                           000084   326 _P0_4	=	0x0084
                           000085   327 _P0_5	=	0x0085
                           000086   328 _P0_6	=	0x0086
                           000087   329 _P0_7	=	0x0087
                           000088   330 _IT0	=	0x0088
                           000089   331 _IE0	=	0x0089
                           00008A   332 _IT1	=	0x008a
                           00008B   333 _IE1	=	0x008b
                           00008C   334 _TR0	=	0x008c
                           00008D   335 _TF0	=	0x008d
                           00008E   336 _TR1	=	0x008e
                           00008F   337 _TF1	=	0x008f
                           000090   338 _P1_0	=	0x0090
                           000091   339 _P1_1	=	0x0091
                           000092   340 _P1_2	=	0x0092
                           000093   341 _P1_3	=	0x0093
                           000094   342 _P1_4	=	0x0094
                           000095   343 _P1_5	=	0x0095
                           000096   344 _P1_6	=	0x0096
                           000097   345 _P1_7	=	0x0097
                           000098   346 _RI	=	0x0098
                           000099   347 _TI	=	0x0099
                           00009A   348 _RB8	=	0x009a
                           00009B   349 _TB8	=	0x009b
                           00009C   350 _REN	=	0x009c
                           00009D   351 _SM2	=	0x009d
                           00009E   352 _SM1	=	0x009e
                           00009F   353 _SM0	=	0x009f
                           0000A0   354 _P2_0	=	0x00a0
                           0000A1   355 _P2_1	=	0x00a1
                           0000A2   356 _P2_2	=	0x00a2
                           0000A3   357 _P2_3	=	0x00a3
                           0000A4   358 _P2_4	=	0x00a4
                           0000A5   359 _P2_5	=	0x00a5
                           0000A6   360 _P2_6	=	0x00a6
                           0000A7   361 _P2_7	=	0x00a7
                           0000A8   362 _EX0	=	0x00a8
                           0000A9   363 _ET0	=	0x00a9
                           0000AA   364 _EX1	=	0x00aa
                           0000AB   365 _ET1	=	0x00ab
                           0000AC   366 _ES	=	0x00ac
                           0000AF   367 _EA	=	0x00af
                           0000B0   368 _P3_0	=	0x00b0
                           0000B1   369 _P3_1	=	0x00b1
                           0000B2   370 _P3_2	=	0x00b2
                           0000B3   371 _P3_3	=	0x00b3
                           0000B4   372 _P3_4	=	0x00b4
                           0000B5   373 _P3_5	=	0x00b5
                           0000B6   374 _P3_6	=	0x00b6
                           0000B7   375 _P3_7	=	0x00b7
                           0000B0   376 _RXD	=	0x00b0
                           0000B1   377 _TXD	=	0x00b1
                           0000B2   378 _INT0	=	0x00b2
                           0000B3   379 _INT1	=	0x00b3
                           0000B4   380 _T0	=	0x00b4
                           0000B5   381 _T1	=	0x00b5
                           0000B6   382 _WR	=	0x00b6
                           0000B7   383 _RD	=	0x00b7
                           0000B8   384 _PX0	=	0x00b8
                           0000B9   385 _PT0	=	0x00b9
                           0000BA   386 _PX1	=	0x00ba
                           0000BB   387 _PT1	=	0x00bb
                           0000BC   388 _PS	=	0x00bc
                           0000D0   389 _P	=	0x00d0
                           0000D1   390 _F1	=	0x00d1
                           0000D2   391 _OV	=	0x00d2
                           0000D3   392 _RS0	=	0x00d3
                           0000D4   393 _RS1	=	0x00d4
                           0000D5   394 _F0	=	0x00d5
                           0000D6   395 _AC	=	0x00d6
                           0000D7   396 _CY	=	0x00d7
                           0000AD   397 _ET2	=	0x00ad
                           0000BD   398 _PT2	=	0x00bd
                           0000C8   399 _T2CON_0	=	0x00c8
                           0000C9   400 _T2CON_1	=	0x00c9
                           0000CA   401 _T2CON_2	=	0x00ca
                           0000CB   402 _T2CON_3	=	0x00cb
                           0000CC   403 _T2CON_4	=	0x00cc
                           0000CD   404 _T2CON_5	=	0x00cd
                           0000CE   405 _T2CON_6	=	0x00ce
                           0000CF   406 _T2CON_7	=	0x00cf
                           0000C8   407 _CP_RL2	=	0x00c8
                           0000C9   408 _C_T2	=	0x00c9
                           0000CA   409 _TR2	=	0x00ca
                           0000CB   410 _EXEN2	=	0x00cb
                           0000CC   411 _TCLK	=	0x00cc
                           0000CD   412 _RCLK	=	0x00cd
                           0000CE   413 _EXF2	=	0x00ce
                           0000CF   414 _TF2	=	0x00cf
                           0000DF   415 _CF	=	0x00df
                           0000DE   416 _CR	=	0x00de
                           0000DC   417 _CCF4	=	0x00dc
                           0000DB   418 _CCF3	=	0x00db
                           0000DA   419 _CCF2	=	0x00da
                           0000D9   420 _CCF1	=	0x00d9
                           0000D8   421 _CCF0	=	0x00d8
                           0000AE   422 _EC	=	0x00ae
                           0000BE   423 _PPCL	=	0x00be
                           0000BD   424 _PT2L	=	0x00bd
                           0000BC   425 _PSL	=	0x00bc
                           0000BB   426 _PT1L	=	0x00bb
                           0000BA   427 _PX1L	=	0x00ba
                           0000B9   428 _PT0L	=	0x00b9
                           0000B8   429 _PX0L	=	0x00b8
                           0000C0   430 _P4_0	=	0x00c0
                           0000C1   431 _P4_1	=	0x00c1
                           0000C2   432 _P4_2	=	0x00c2
                           0000C3   433 _P4_3	=	0x00c3
                           0000C4   434 _P4_4	=	0x00c4
                           0000C5   435 _P4_5	=	0x00c5
                           0000C6   436 _P4_6	=	0x00c6
                           0000C7   437 _P4_7	=	0x00c7
                           0000E8   438 _P5_0	=	0x00e8
                           0000E9   439 _P5_1	=	0x00e9
                           0000EA   440 _P5_2	=	0x00ea
                           0000EB   441 _P5_3	=	0x00eb
                           0000EC   442 _P5_4	=	0x00ec
                           0000ED   443 _P5_5	=	0x00ed
                           0000EE   444 _P5_6	=	0x00ee
                           0000EF   445 _P5_7	=	0x00ef
                                    446 ;--------------------------------------------------------
                                    447 ; overlayable register banks
                                    448 ;--------------------------------------------------------
                                    449 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        450 	.ds 8
                                    451 ;--------------------------------------------------------
                                    452 ; internal ram data
                                    453 ;--------------------------------------------------------
                                    454 	.area DSEG    (DATA)
      000000                        455 _putsLCD_sloc0_1_0:
      000000                        456 	.ds 2
      000002                        457 _putsLCD_sloc1_1_0:
      000002                        458 	.ds 3
                                    459 ;--------------------------------------------------------
                                    460 ; overlayable items in internal ram 
                                    461 ;--------------------------------------------------------
                                    462 ;--------------------------------------------------------
                                    463 ; indirectly addressable internal ram data
                                    464 ;--------------------------------------------------------
                                    465 	.area ISEG    (DATA)
                                    466 ;--------------------------------------------------------
                                    467 ; absolute internal ram data
                                    468 ;--------------------------------------------------------
                                    469 	.area IABS    (ABS,DATA)
                                    470 	.area IABS    (ABS,DATA)
                                    471 ;--------------------------------------------------------
                                    472 ; bit data
                                    473 ;--------------------------------------------------------
                                    474 	.area BSEG    (BIT)
                                    475 ;--------------------------------------------------------
                                    476 ; paged external ram data
                                    477 ;--------------------------------------------------------
                                    478 	.area PSEG    (PAG,XDATA)
                                    479 ;--------------------------------------------------------
                                    480 ; external ram data
                                    481 ;--------------------------------------------------------
                                    482 	.area XSEG    (XDATA)
                           00F000   483 _lcdGeneral	=	0xf000
                           00F200   484 _busyPoll	=	0xf200
                           00F100   485 _writeCharacter	=	0xf100
                           00F300   486 _readCharacter	=	0xf300
      000000                        487 _lcdPutCh_x_65536_76:
      000000                        488 	.ds 1
      000001                        489 _goToAddr_x_65536_79:
      000001                        490 	.ds 1
      000002                        491 _goToXY_PARM_2:
      000002                        492 	.ds 1
      000003                        493 _goToXY_x_65536_81:
      000003                        494 	.ds 1
      000004                        495 _customCharacter_x_65536_83:
      000004                        496 	.ds 8
      00000C                        497 _putsLCD_y_65536_94:
      00000C                        498 	.ds 3
      00000F                        499 _putsLCD_i_65536_95:
      00000F                        500 	.ds 2
      000011                        501 _gets_s_65536_98:
      000011                        502 	.ds 3
      000014                        503 _gets_count_65536_99:
      000014                        504 	.ds 2
      000016                        505 _ramDump_i_65536_104:
      000016                        506 	.ds 1
      000017                        507 _gamePacman_i_65536_115:
      000017                        508 	.ds 2
      000019                        509 _printBinary_x_65536_123:
      000019                        510 	.ds 2
      00001B                        511 _atoh_ap_65536_126:
      00001B                        512 	.ds 3
      00001E                        513 _atoh_p_65536_127:
      00001E                        514 	.ds 3
      000021                        515 _atoh_n_65536_127:
      000021                        516 	.ds 2
      000023                        517 _atoh_lcase_65536_127:
      000023                        518 	.ds 2
                                    519 ;--------------------------------------------------------
                                    520 ; absolute external ram data
                                    521 ;--------------------------------------------------------
                                    522 	.area XABS    (ABS,XDATA)
                                    523 ;--------------------------------------------------------
                                    524 ; external initialized ram data
                                    525 ;--------------------------------------------------------
                                    526 	.area XISEG   (XDATA)
                                    527 	.area HOME    (CODE)
                                    528 	.area GSINIT0 (CODE)
                                    529 	.area GSINIT1 (CODE)
                                    530 	.area GSINIT2 (CODE)
                                    531 	.area GSINIT3 (CODE)
                                    532 	.area GSINIT4 (CODE)
                                    533 	.area GSINIT5 (CODE)
                                    534 	.area GSINIT  (CODE)
                                    535 	.area GSFINAL (CODE)
                                    536 	.area CSEG    (CODE)
                                    537 ;--------------------------------------------------------
                                    538 ; global & static initialisations
                                    539 ;--------------------------------------------------------
                                    540 	.area HOME    (CODE)
                                    541 	.area GSINIT  (CODE)
                                    542 	.area GSFINAL (CODE)
                                    543 	.area GSINIT  (CODE)
                                    544 ;--------------------------------------------------------
                                    545 ; Home
                                    546 ;--------------------------------------------------------
                                    547 	.area HOME    (CODE)
                                    548 	.area HOME    (CODE)
                                    549 ;--------------------------------------------------------
                                    550 ; code
                                    551 ;--------------------------------------------------------
                                    552 	.area CSEG    (CODE)
                                    553 ;------------------------------------------------------------
                                    554 ;Allocation info for local variables in function 'delay'
                                    555 ;------------------------------------------------------------
                                    556 ;i                         Allocated with name '_delay_i_65536_71'
                                    557 ;------------------------------------------------------------
                                    558 ;	lcdCommands.c:9: void delay()
                                    559 ;	-----------------------------------------
                                    560 ;	 function delay
                                    561 ;	-----------------------------------------
      000000                        562 _delay:
                           000007   563 	ar7 = 0x07
                           000006   564 	ar6 = 0x06
                           000005   565 	ar5 = 0x05
                           000004   566 	ar4 = 0x04
                           000003   567 	ar3 = 0x03
                           000002   568 	ar2 = 0x02
                           000001   569 	ar1 = 0x01
                           000000   570 	ar0 = 0x00
                                    571 ;	lcdCommands.c:12: for ( i = 0 ; i < 1000; i++);
      000000 7E E8            [12]  572 	mov	r6,#0xe8
      000002 7F 03            [12]  573 	mov	r7,#0x03
      000004                        574 00104$:
      000004 1E               [12]  575 	dec	r6
      000005 BE FF 01         [24]  576 	cjne	r6,#0xff,00113$
      000008 1F               [12]  577 	dec	r7
      000009                        578 00113$:
      000009 EE               [12]  579 	mov	a,r6
      00000A 4F               [12]  580 	orl	a,r7
      00000B 70 F7            [24]  581 	jnz	00104$
                                    582 ;	lcdCommands.c:13: }
      00000D 22               [24]  583 	ret
                                    584 ;------------------------------------------------------------
                                    585 ;Allocation info for local variables in function 'timerInit'
                                    586 ;------------------------------------------------------------
                                    587 ;	lcdCommands.c:15: void timerInit()
                                    588 ;	-----------------------------------------
                                    589 ;	 function timerInit
                                    590 ;	-----------------------------------------
      00000E                        591 _timerInit:
                                    592 ;	lcdCommands.c:17: TMOD |= 0x01;
      00000E 43 89 01         [24]  593 	orl	_TMOD,#0x01
                                    594 ;	lcdCommands.c:18: TH0 = 0x4B;
      000011 75 8C 4B         [24]  595 	mov	_TH0,#0x4b
                                    596 ;	lcdCommands.c:19: TL0 = 0xFC;
      000014 75 8A FC         [24]  597 	mov	_TL0,#0xfc
                                    598 ;	lcdCommands.c:20: TR0 = 1;           //turn ON Timer zero
                                    599 ;	assignBit
      000017 D2 8C            [12]  600 	setb	_TR0
                                    601 ;	lcdCommands.c:21: EA = 1;            //Enable Global Interrupt bit
                                    602 ;	assignBit
      000019 D2 AF            [12]  603 	setb	_EA
                                    604 ;	lcdCommands.c:22: ET0 = 1;           //Enable TImer0 Interrupt
                                    605 ;	assignBit
      00001B D2 A9            [12]  606 	setb	_ET0
                                    607 ;	lcdCommands.c:23: }
      00001D 22               [24]  608 	ret
                                    609 ;------------------------------------------------------------
                                    610 ;Allocation info for local variables in function 'busyWait'
                                    611 ;------------------------------------------------------------
                                    612 ;	lcdCommands.c:25: void busyWait()
                                    613 ;	-----------------------------------------
                                    614 ;	 function busyWait
                                    615 ;	-----------------------------------------
      00001E                        616 _busyWait:
                                    617 ;	lcdCommands.c:27: while (busyPoll & 0x80);
      00001E                        618 00101$:
      00001E 90 F2 00         [24]  619 	mov	dptr,#_busyPoll
      000021 E0               [24]  620 	movx	a,@dptr
      000022 FE               [12]  621 	mov	r6,a
      000023 A3               [24]  622 	inc	dptr
      000024 E0               [24]  623 	movx	a,@dptr
      000025 EE               [12]  624 	mov	a,r6
      000026 20 E7 F5         [24]  625 	jb	acc.7,00101$
                                    626 ;	lcdCommands.c:28: }
      000029 22               [24]  627 	ret
                                    628 ;------------------------------------------------------------
                                    629 ;Allocation info for local variables in function 'lcdInit'
                                    630 ;------------------------------------------------------------
                                    631 ;	lcdCommands.c:30: void lcdInit()
                                    632 ;	-----------------------------------------
                                    633 ;	 function lcdInit
                                    634 ;	-----------------------------------------
      00002A                        635 _lcdInit:
                                    636 ;	lcdCommands.c:32: delay();
      00002A 12r00r00         [24]  637 	lcall	_delay
                                    638 ;	lcdCommands.c:33: lcdGeneral = 0x30;
      00002D 90 F0 00         [24]  639 	mov	dptr,#_lcdGeneral
      000030 74 30            [12]  640 	mov	a,#0x30
      000032 F0               [24]  641 	movx	@dptr,a
      000033 E4               [12]  642 	clr	a
      000034 A3               [24]  643 	inc	dptr
      000035 F0               [24]  644 	movx	@dptr,a
                                    645 ;	lcdCommands.c:34: delay();
      000036 12r00r00         [24]  646 	lcall	_delay
                                    647 ;	lcdCommands.c:35: lcdGeneral = 0x30;
      000039 90 F0 00         [24]  648 	mov	dptr,#_lcdGeneral
      00003C 74 30            [12]  649 	mov	a,#0x30
      00003E F0               [24]  650 	movx	@dptr,a
      00003F E4               [12]  651 	clr	a
      000040 A3               [24]  652 	inc	dptr
      000041 F0               [24]  653 	movx	@dptr,a
                                    654 ;	lcdCommands.c:36: delay();
      000042 12r00r00         [24]  655 	lcall	_delay
                                    656 ;	lcdCommands.c:37: lcdGeneral = 0x30;
      000045 90 F0 00         [24]  657 	mov	dptr,#_lcdGeneral
      000048 74 30            [12]  658 	mov	a,#0x30
      00004A F0               [24]  659 	movx	@dptr,a
      00004B E4               [12]  660 	clr	a
      00004C A3               [24]  661 	inc	dptr
      00004D F0               [24]  662 	movx	@dptr,a
                                    663 ;	lcdCommands.c:38: busyWait();
      00004E 12r00r1E         [24]  664 	lcall	_busyWait
                                    665 ;	lcdCommands.c:39: lcdGeneral = 0x38;
      000051 90 F0 00         [24]  666 	mov	dptr,#_lcdGeneral
      000054 74 38            [12]  667 	mov	a,#0x38
      000056 F0               [24]  668 	movx	@dptr,a
      000057 E4               [12]  669 	clr	a
      000058 A3               [24]  670 	inc	dptr
      000059 F0               [24]  671 	movx	@dptr,a
                                    672 ;	lcdCommands.c:40: busyWait();
      00005A 12r00r1E         [24]  673 	lcall	_busyWait
                                    674 ;	lcdCommands.c:41: lcdGeneral = 0x08;
      00005D 90 F0 00         [24]  675 	mov	dptr,#_lcdGeneral
      000060 74 08            [12]  676 	mov	a,#0x08
      000062 F0               [24]  677 	movx	@dptr,a
      000063 E4               [12]  678 	clr	a
      000064 A3               [24]  679 	inc	dptr
      000065 F0               [24]  680 	movx	@dptr,a
                                    681 ;	lcdCommands.c:42: busyWait();
      000066 12r00r1E         [24]  682 	lcall	_busyWait
                                    683 ;	lcdCommands.c:43: lcdGeneral = 0x0C;
      000069 90 F0 00         [24]  684 	mov	dptr,#_lcdGeneral
      00006C 74 0C            [12]  685 	mov	a,#0x0c
      00006E F0               [24]  686 	movx	@dptr,a
      00006F E4               [12]  687 	clr	a
      000070 A3               [24]  688 	inc	dptr
      000071 F0               [24]  689 	movx	@dptr,a
                                    690 ;	lcdCommands.c:44: busyWait();
      000072 12r00r1E         [24]  691 	lcall	_busyWait
                                    692 ;	lcdCommands.c:45: lcdGeneral = 0x06;
      000075 90 F0 00         [24]  693 	mov	dptr,#_lcdGeneral
      000078 74 06            [12]  694 	mov	a,#0x06
      00007A F0               [24]  695 	movx	@dptr,a
      00007B E4               [12]  696 	clr	a
      00007C A3               [24]  697 	inc	dptr
      00007D F0               [24]  698 	movx	@dptr,a
                                    699 ;	lcdCommands.c:46: busyWait();
      00007E 12r00r1E         [24]  700 	lcall	_busyWait
                                    701 ;	lcdCommands.c:47: lcdGeneral = 0x01;
      000081 90 F0 00         [24]  702 	mov	dptr,#_lcdGeneral
      000084 74 01            [12]  703 	mov	a,#0x01
      000086 F0               [24]  704 	movx	@dptr,a
      000087 E4               [12]  705 	clr	a
      000088 A3               [24]  706 	inc	dptr
      000089 F0               [24]  707 	movx	@dptr,a
                                    708 ;	lcdCommands.c:48: }
      00008A 22               [24]  709 	ret
                                    710 ;------------------------------------------------------------
                                    711 ;Allocation info for local variables in function 'lcdPutCh'
                                    712 ;------------------------------------------------------------
                                    713 ;x                         Allocated with name '_lcdPutCh_x_65536_76'
                                    714 ;------------------------------------------------------------
                                    715 ;	lcdCommands.c:50: void lcdPutCh(uint8_t x)
                                    716 ;	-----------------------------------------
                                    717 ;	 function lcdPutCh
                                    718 ;	-----------------------------------------
      00008B                        719 _lcdPutCh:
      00008B E5 82            [12]  720 	mov	a,dpl
      00008D 90r00r00         [24]  721 	mov	dptr,#_lcdPutCh_x_65536_76
      000090 F0               [24]  722 	movx	@dptr,a
                                    723 ;	lcdCommands.c:52: busyWait();
      000091 12r00r1E         [24]  724 	lcall	_busyWait
                                    725 ;	lcdCommands.c:53: writeCharacter = x;
      000094 90r00r00         [24]  726 	mov	dptr,#_lcdPutCh_x_65536_76
      000097 E0               [24]  727 	movx	a,@dptr
      000098 90 F1 00         [24]  728 	mov	dptr,#_writeCharacter
      00009B F0               [24]  729 	movx	@dptr,a
      00009C E4               [12]  730 	clr	a
      00009D A3               [24]  731 	inc	dptr
      00009E F0               [24]  732 	movx	@dptr,a
                                    733 ;	lcdCommands.c:54: }
      00009F 22               [24]  734 	ret
                                    735 ;------------------------------------------------------------
                                    736 ;Allocation info for local variables in function 'lcdClear'
                                    737 ;------------------------------------------------------------
                                    738 ;	lcdCommands.c:56: void lcdClear()
                                    739 ;	-----------------------------------------
                                    740 ;	 function lcdClear
                                    741 ;	-----------------------------------------
      0000A0                        742 _lcdClear:
                                    743 ;	lcdCommands.c:58: busyWait();
      0000A0 12r00r1E         [24]  744 	lcall	_busyWait
                                    745 ;	lcdCommands.c:59: lcdGeneral = 0x01;
      0000A3 90 F0 00         [24]  746 	mov	dptr,#_lcdGeneral
      0000A6 74 01            [12]  747 	mov	a,#0x01
      0000A8 F0               [24]  748 	movx	@dptr,a
      0000A9 E4               [12]  749 	clr	a
      0000AA A3               [24]  750 	inc	dptr
      0000AB F0               [24]  751 	movx	@dptr,a
                                    752 ;	lcdCommands.c:60: }
      0000AC 22               [24]  753 	ret
                                    754 ;------------------------------------------------------------
                                    755 ;Allocation info for local variables in function 'goToAddr'
                                    756 ;------------------------------------------------------------
                                    757 ;x                         Allocated with name '_goToAddr_x_65536_79'
                                    758 ;------------------------------------------------------------
                                    759 ;	lcdCommands.c:62: void goToAddr(uint8_t x)
                                    760 ;	-----------------------------------------
                                    761 ;	 function goToAddr
                                    762 ;	-----------------------------------------
      0000AD                        763 _goToAddr:
      0000AD E5 82            [12]  764 	mov	a,dpl
      0000AF 90r00r01         [24]  765 	mov	dptr,#_goToAddr_x_65536_79
      0000B2 F0               [24]  766 	movx	@dptr,a
                                    767 ;	lcdCommands.c:64: busyWait();
      0000B3 12r00r1E         [24]  768 	lcall	_busyWait
                                    769 ;	lcdCommands.c:65: lcdGeneral = 0x80 | x;
      0000B6 90r00r01         [24]  770 	mov	dptr,#_goToAddr_x_65536_79
      0000B9 E0               [24]  771 	movx	a,@dptr
      0000BA FF               [12]  772 	mov	r7,a
      0000BB 7E 00            [12]  773 	mov	r6,#0x00
      0000BD 90 F0 00         [24]  774 	mov	dptr,#_lcdGeneral
      0000C0 74 80            [12]  775 	mov	a,#0x80
      0000C2 4F               [12]  776 	orl	a,r7
      0000C3 F0               [24]  777 	movx	@dptr,a
      0000C4 EE               [12]  778 	mov	a,r6
      0000C5 A3               [24]  779 	inc	dptr
      0000C6 F0               [24]  780 	movx	@dptr,a
                                    781 ;	lcdCommands.c:66: }
      0000C7 22               [24]  782 	ret
                                    783 ;------------------------------------------------------------
                                    784 ;Allocation info for local variables in function 'goToXY'
                                    785 ;------------------------------------------------------------
                                    786 ;y                         Allocated with name '_goToXY_PARM_2'
                                    787 ;x                         Allocated with name '_goToXY_x_65536_81'
                                    788 ;------------------------------------------------------------
                                    789 ;	lcdCommands.c:68: void goToXY(uint8_t x, uint8_t y)
                                    790 ;	-----------------------------------------
                                    791 ;	 function goToXY
                                    792 ;	-----------------------------------------
      0000C8                        793 _goToXY:
      0000C8 E5 82            [12]  794 	mov	a,dpl
      0000CA 90r00r03         [24]  795 	mov	dptr,#_goToXY_x_65536_81
      0000CD F0               [24]  796 	movx	@dptr,a
                                    797 ;	lcdCommands.c:70: busyWait();
      0000CE 12r00r1E         [24]  798 	lcall	_busyWait
                                    799 ;	lcdCommands.c:71: goToAddr(lookUpTable[x][y]);
      0000D1 90r00r03         [24]  800 	mov	dptr,#_goToXY_x_65536_81
      0000D4 E0               [24]  801 	movx	a,@dptr
      0000D5 75 F0 10         [24]  802 	mov	b,#0x10
      0000D8 A4               [48]  803 	mul	ab
      0000D9 24rF4            [12]  804 	add	a,#_lookUpTable
      0000DB FE               [12]  805 	mov	r6,a
      0000DC 74s01            [12]  806 	mov	a,#(_lookUpTable >> 8)
      0000DE 35 F0            [12]  807 	addc	a,b
      0000E0 FF               [12]  808 	mov	r7,a
      0000E1 90r00r02         [24]  809 	mov	dptr,#_goToXY_PARM_2
      0000E4 E0               [24]  810 	movx	a,@dptr
      0000E5 2E               [12]  811 	add	a,r6
      0000E6 F5 82            [12]  812 	mov	dpl,a
      0000E8 E4               [12]  813 	clr	a
      0000E9 3F               [12]  814 	addc	a,r7
      0000EA F5 83            [12]  815 	mov	dph,a
      0000EC E4               [12]  816 	clr	a
      0000ED 93               [24]  817 	movc	a,@a+dptr
      0000EE F5 82            [12]  818 	mov	dpl,a
                                    819 ;	lcdCommands.c:72: }
      0000F0 02r00rAD         [24]  820 	ljmp	_goToAddr
                                    821 ;------------------------------------------------------------
                                    822 ;Allocation info for local variables in function 'customCharacter'
                                    823 ;------------------------------------------------------------
                                    824 ;temp                      Allocated with name '_customCharacter_temp_65536_83'
                                    825 ;decimal                   Allocated with name '_customCharacter_decimal_65536_83'
                                    826 ;x                         Allocated with name '_customCharacter_x_65536_83'
                                    827 ;------------------------------------------------------------
                                    828 ;	lcdCommands.c:74: void customCharacter()
                                    829 ;	-----------------------------------------
                                    830 ;	 function customCharacter
                                    831 ;	-----------------------------------------
      0000F3                        832 _customCharacter:
                                    833 ;	lcdCommands.c:79: busyWait();
      0000F3 12r00r1E         [24]  834 	lcall	_busyWait
                                    835 ;	lcdCommands.c:80: lcdGeneral = 0x40 | 0x10;
      0000F6 90 F0 00         [24]  836 	mov	dptr,#_lcdGeneral
      0000F9 74 50            [12]  837 	mov	a,#0x50
      0000FB F0               [24]  838 	movx	@dptr,a
      0000FC E4               [12]  839 	clr	a
      0000FD A3               [24]  840 	inc	dptr
      0000FE F0               [24]  841 	movx	@dptr,a
                                    842 ;	lcdCommands.c:81: busyWait();
      0000FF 12r00r1E         [24]  843 	lcall	_busyWait
                                    844 ;	lcdCommands.c:82: do{
      000102                        845 00102$:
                                    846 ;	lcdCommands.c:83: printf_tiny("\n\rEnter value for Row 1\n\r");
      000102 74r34            [12]  847 	mov	a,#___str_0
      000104 C0 E0            [24]  848 	push	acc
      000106 74s02            [12]  849 	mov	a,#(___str_0 >> 8)
      000108 C0 E0            [24]  850 	push	acc
      00010A 12r00r00         [24]  851 	lcall	_printf_tiny
      00010D 15 81            [12]  852 	dec	sp
      00010F 15 81            [12]  853 	dec	sp
                                    854 ;	lcdCommands.c:84: gets(x);
      000111 90r00r04         [24]  855 	mov	dptr,#_customCharacter_x_65536_83
      000114 75 F0 00         [24]  856 	mov	b,#0x00
      000117 12r06r4D         [24]  857 	lcall	_gets
                                    858 ;	lcdCommands.c:85: temp = atoh(x);
      00011A 90r00r04         [24]  859 	mov	dptr,#_customCharacter_x_65536_83
      00011D 75 F0 00         [24]  860 	mov	b,#0x00
      000120 12r0Dr83         [24]  861 	lcall	_atoh
      000123 AE 82            [24]  862 	mov	r6,dpl
                                    863 ;	lcdCommands.c:86: }while(temp < 0 || temp > 0x1F);
      000125 E5 83            [12]  864 	mov	a,dph
      000127 FF               [12]  865 	mov	r7,a
      000128 20 E7 D7         [24]  866 	jb	acc.7,00102$
      00012B C3               [12]  867 	clr	c
      00012C 74 1F            [12]  868 	mov	a,#0x1f
      00012E 9E               [12]  869 	subb	a,r6
      00012F 74 80            [12]  870 	mov	a,#(0x00 ^ 0x80)
      000131 8F F0            [24]  871 	mov	b,r7
      000133 63 F0 80         [24]  872 	xrl	b,#0x80
      000136 95 F0            [12]  873 	subb	a,b
      000138 40 C8            [24]  874 	jc	00102$
                                    875 ;	lcdCommands.c:88: memset(x,'\0',8 * sizeof(char));
      00013A 90r00r00         [24]  876 	mov	dptr,#_memset_PARM_2
      00013D E4               [12]  877 	clr	a
      00013E F0               [24]  878 	movx	@dptr,a
      00013F 90r00r00         [24]  879 	mov	dptr,#_memset_PARM_3
      000142 74 08            [12]  880 	mov	a,#0x08
      000144 F0               [24]  881 	movx	@dptr,a
      000145 E4               [12]  882 	clr	a
      000146 A3               [24]  883 	inc	dptr
      000147 F0               [24]  884 	movx	@dptr,a
      000148 90r00r04         [24]  885 	mov	dptr,#_customCharacter_x_65536_83
      00014B 75 F0 00         [24]  886 	mov	b,#0x00
      00014E C0 07            [24]  887 	push	ar7
      000150 C0 06            [24]  888 	push	ar6
      000152 12r00r00         [24]  889 	lcall	_memset
      000155 D0 06            [24]  890 	pop	ar6
      000157 D0 07            [24]  891 	pop	ar7
                                    892 ;	lcdCommands.c:89: writeCharacter = temp & 0xFF;
      000159 90 F1 00         [24]  893 	mov	dptr,#_writeCharacter
      00015C EE               [12]  894 	mov	a,r6
      00015D F0               [24]  895 	movx	@dptr,a
      00015E E4               [12]  896 	clr	a
      00015F A3               [24]  897 	inc	dptr
      000160 F0               [24]  898 	movx	@dptr,a
                                    899 ;	lcdCommands.c:90: busyWait();
      000161 12r00r1E         [24]  900 	lcall	_busyWait
                                    901 ;	lcdCommands.c:91: lcdGeneral = 0x40 | 0x11;
      000164 90 F0 00         [24]  902 	mov	dptr,#_lcdGeneral
      000167 74 51            [12]  903 	mov	a,#0x51
      000169 F0               [24]  904 	movx	@dptr,a
      00016A E4               [12]  905 	clr	a
      00016B A3               [24]  906 	inc	dptr
      00016C F0               [24]  907 	movx	@dptr,a
                                    908 ;	lcdCommands.c:92: busyWait();
      00016D 12r00r1E         [24]  909 	lcall	_busyWait
                                    910 ;	lcdCommands.c:93: do{
      000170                        911 00106$:
                                    912 ;	lcdCommands.c:94: printf_tiny("\n\rEnter value for Row 2\n\r");
      000170 74r4E            [12]  913 	mov	a,#___str_1
      000172 C0 E0            [24]  914 	push	acc
      000174 74s02            [12]  915 	mov	a,#(___str_1 >> 8)
      000176 C0 E0            [24]  916 	push	acc
      000178 12r00r00         [24]  917 	lcall	_printf_tiny
      00017B 15 81            [12]  918 	dec	sp
      00017D 15 81            [12]  919 	dec	sp
                                    920 ;	lcdCommands.c:95: gets(x);
      00017F 90r00r04         [24]  921 	mov	dptr,#_customCharacter_x_65536_83
      000182 75 F0 00         [24]  922 	mov	b,#0x00
      000185 12r06r4D         [24]  923 	lcall	_gets
                                    924 ;	lcdCommands.c:96: temp = atoh(x);
      000188 90r00r04         [24]  925 	mov	dptr,#_customCharacter_x_65536_83
      00018B 75 F0 00         [24]  926 	mov	b,#0x00
      00018E 12r0Dr83         [24]  927 	lcall	_atoh
      000191 AE 82            [24]  928 	mov	r6,dpl
                                    929 ;	lcdCommands.c:97: }while(temp < 0 || temp > 0x1F);
      000193 E5 83            [12]  930 	mov	a,dph
      000195 FF               [12]  931 	mov	r7,a
      000196 20 E7 D7         [24]  932 	jb	acc.7,00106$
      000199 C3               [12]  933 	clr	c
      00019A 74 1F            [12]  934 	mov	a,#0x1f
      00019C 9E               [12]  935 	subb	a,r6
      00019D 74 80            [12]  936 	mov	a,#(0x00 ^ 0x80)
      00019F 8F F0            [24]  937 	mov	b,r7
      0001A1 63 F0 80         [24]  938 	xrl	b,#0x80
      0001A4 95 F0            [12]  939 	subb	a,b
      0001A6 40 C8            [24]  940 	jc	00106$
                                    941 ;	lcdCommands.c:98: gets(x);
      0001A8 90r00r04         [24]  942 	mov	dptr,#_customCharacter_x_65536_83
      0001AB 75 F0 00         [24]  943 	mov	b,#0x00
      0001AE 12r06r4D         [24]  944 	lcall	_gets
                                    945 ;	lcdCommands.c:99: decimal = atoi(x);
      0001B1 90r00r04         [24]  946 	mov	dptr,#_customCharacter_x_65536_83
      0001B4 75 F0 00         [24]  947 	mov	b,#0x00
      0001B7 12r00r00         [24]  948 	lcall	_atoi
                                    949 ;	lcdCommands.c:100: printBinary(decimal);
      0001BA AE 82            [24]  950 	mov	r6,dpl
      0001BC AF 83            [24]  951 	mov  r7,dph
      0001BE C0 07            [24]  952 	push	ar7
      0001C0 C0 06            [24]  953 	push	ar6
      0001C2 12r0Dr32         [24]  954 	lcall	_printBinary
                                    955 ;	lcdCommands.c:101: temp = atoh(x);
      0001C5 90r00r04         [24]  956 	mov	dptr,#_customCharacter_x_65536_83
      0001C8 75 F0 00         [24]  957 	mov	b,#0x00
      0001CB 12r0Dr83         [24]  958 	lcall	_atoh
      0001CE AC 82            [24]  959 	mov	r4,dpl
      0001D0 AD 83            [24]  960 	mov	r5,dph
                                    961 ;	lcdCommands.c:102: memset(x,'\0',8 * sizeof(char));
      0001D2 90r00r00         [24]  962 	mov	dptr,#_memset_PARM_2
      0001D5 E4               [12]  963 	clr	a
      0001D6 F0               [24]  964 	movx	@dptr,a
      0001D7 90r00r00         [24]  965 	mov	dptr,#_memset_PARM_3
      0001DA 74 08            [12]  966 	mov	a,#0x08
      0001DC F0               [24]  967 	movx	@dptr,a
      0001DD E4               [12]  968 	clr	a
      0001DE A3               [24]  969 	inc	dptr
      0001DF F0               [24]  970 	movx	@dptr,a
      0001E0 90r00r04         [24]  971 	mov	dptr,#_customCharacter_x_65536_83
      0001E3 75 F0 00         [24]  972 	mov	b,#0x00
      0001E6 C0 05            [24]  973 	push	ar5
      0001E8 C0 04            [24]  974 	push	ar4
      0001EA 12r00r00         [24]  975 	lcall	_memset
      0001ED D0 04            [24]  976 	pop	ar4
      0001EF D0 05            [24]  977 	pop	ar5
                                    978 ;	lcdCommands.c:103: writeCharacter = temp & 0xFF;
      0001F1 90 F1 00         [24]  979 	mov	dptr,#_writeCharacter
      0001F4 EC               [12]  980 	mov	a,r4
      0001F5 F0               [24]  981 	movx	@dptr,a
      0001F6 E4               [12]  982 	clr	a
      0001F7 A3               [24]  983 	inc	dptr
      0001F8 F0               [24]  984 	movx	@dptr,a
                                    985 ;	lcdCommands.c:104: busyWait();
      0001F9 12r00r1E         [24]  986 	lcall	_busyWait
                                    987 ;	lcdCommands.c:105: lcdGeneral = 0x40 | 0x12;
      0001FC 90 F0 00         [24]  988 	mov	dptr,#_lcdGeneral
      0001FF 74 52            [12]  989 	mov	a,#0x52
      000201 F0               [24]  990 	movx	@dptr,a
      000202 E4               [12]  991 	clr	a
      000203 A3               [24]  992 	inc	dptr
      000204 F0               [24]  993 	movx	@dptr,a
                                    994 ;	lcdCommands.c:106: busyWait();
      000205 12r00r1E         [24]  995 	lcall	_busyWait
      000208 D0 06            [24]  996 	pop	ar6
      00020A D0 07            [24]  997 	pop	ar7
                                    998 ;	lcdCommands.c:107: do{
      00020C                        999 00110$:
                                   1000 ;	lcdCommands.c:108: printf_tiny("\n\rEnter value for Row 3\n\r");
      00020C C0 07            [24] 1001 	push	ar7
      00020E C0 06            [24] 1002 	push	ar6
      000210 74r68            [12] 1003 	mov	a,#___str_2
      000212 C0 E0            [24] 1004 	push	acc
      000214 74s02            [12] 1005 	mov	a,#(___str_2 >> 8)
      000216 C0 E0            [24] 1006 	push	acc
      000218 12r00r00         [24] 1007 	lcall	_printf_tiny
      00021B 15 81            [12] 1008 	dec	sp
      00021D 15 81            [12] 1009 	dec	sp
                                   1010 ;	lcdCommands.c:109: gets(x);
      00021F 90r00r04         [24] 1011 	mov	dptr,#_customCharacter_x_65536_83
      000222 75 F0 00         [24] 1012 	mov	b,#0x00
      000225 12r06r4D         [24] 1013 	lcall	_gets
                                   1014 ;	lcdCommands.c:110: temp = atoh(x);
      000228 90r00r04         [24] 1015 	mov	dptr,#_customCharacter_x_65536_83
      00022B 75 F0 00         [24] 1016 	mov	b,#0x00
      00022E 12r0Dr83         [24] 1017 	lcall	_atoh
      000231 AC 82            [24] 1018 	mov	r4,dpl
      000233 AD 83            [24] 1019 	mov	r5,dph
      000235 D0 06            [24] 1020 	pop	ar6
      000237 D0 07            [24] 1021 	pop	ar7
                                   1022 ;	lcdCommands.c:111: }while(temp < 0 || temp > 0x1F);
      000239 ED               [12] 1023 	mov	a,r5
      00023A 20 E7 CF         [24] 1024 	jb	acc.7,00110$
      00023D C3               [12] 1025 	clr	c
      00023E 74 1F            [12] 1026 	mov	a,#0x1f
      000240 9C               [12] 1027 	subb	a,r4
      000241 74 80            [12] 1028 	mov	a,#(0x00 ^ 0x80)
      000243 8D F0            [24] 1029 	mov	b,r5
      000245 63 F0 80         [24] 1030 	xrl	b,#0x80
      000248 95 F0            [12] 1031 	subb	a,b
      00024A 40 C0            [24] 1032 	jc	00110$
                                   1033 ;	lcdCommands.c:112: printBinary(decimal);
      00024C 8E 82            [24] 1034 	mov	dpl,r6
      00024E 8F 83            [24] 1035 	mov	dph,r7
      000250 12r0Dr32         [24] 1036 	lcall	_printBinary
                                   1037 ;	lcdCommands.c:113: temp = atoh(x);
      000253 90r00r04         [24] 1038 	mov	dptr,#_customCharacter_x_65536_83
      000256 75 F0 00         [24] 1039 	mov	b,#0x00
      000259 12r0Dr83         [24] 1040 	lcall	_atoh
      00025C AE 82            [24] 1041 	mov	r6,dpl
      00025E AF 83            [24] 1042 	mov	r7,dph
                                   1043 ;	lcdCommands.c:114: memset(x,'\0',8 * sizeof(char));
      000260 90r00r00         [24] 1044 	mov	dptr,#_memset_PARM_2
      000263 E4               [12] 1045 	clr	a
      000264 F0               [24] 1046 	movx	@dptr,a
      000265 90r00r00         [24] 1047 	mov	dptr,#_memset_PARM_3
      000268 74 08            [12] 1048 	mov	a,#0x08
      00026A F0               [24] 1049 	movx	@dptr,a
      00026B E4               [12] 1050 	clr	a
      00026C A3               [24] 1051 	inc	dptr
      00026D F0               [24] 1052 	movx	@dptr,a
      00026E 90r00r04         [24] 1053 	mov	dptr,#_customCharacter_x_65536_83
      000271 75 F0 00         [24] 1054 	mov	b,#0x00
      000274 C0 07            [24] 1055 	push	ar7
      000276 C0 06            [24] 1056 	push	ar6
      000278 12r00r00         [24] 1057 	lcall	_memset
      00027B D0 06            [24] 1058 	pop	ar6
      00027D D0 07            [24] 1059 	pop	ar7
                                   1060 ;	lcdCommands.c:115: writeCharacter = temp & 0xFF;
      00027F 90 F1 00         [24] 1061 	mov	dptr,#_writeCharacter
      000282 EE               [12] 1062 	mov	a,r6
      000283 F0               [24] 1063 	movx	@dptr,a
      000284 E4               [12] 1064 	clr	a
      000285 A3               [24] 1065 	inc	dptr
      000286 F0               [24] 1066 	movx	@dptr,a
                                   1067 ;	lcdCommands.c:116: busyWait();
      000287 12r00r1E         [24] 1068 	lcall	_busyWait
                                   1069 ;	lcdCommands.c:117: lcdGeneral = 0x40 | 0x13;
      00028A 90 F0 00         [24] 1070 	mov	dptr,#_lcdGeneral
      00028D 74 53            [12] 1071 	mov	a,#0x53
      00028F F0               [24] 1072 	movx	@dptr,a
      000290 E4               [12] 1073 	clr	a
      000291 A3               [24] 1074 	inc	dptr
      000292 F0               [24] 1075 	movx	@dptr,a
                                   1076 ;	lcdCommands.c:118: busyWait();
      000293 12r00r1E         [24] 1077 	lcall	_busyWait
                                   1078 ;	lcdCommands.c:119: do{
      000296                       1079 00114$:
                                   1080 ;	lcdCommands.c:120: printf_tiny("\n\rEnter value for Row 4\n\r");
      000296 74r82            [12] 1081 	mov	a,#___str_3
      000298 C0 E0            [24] 1082 	push	acc
      00029A 74s02            [12] 1083 	mov	a,#(___str_3 >> 8)
      00029C C0 E0            [24] 1084 	push	acc
      00029E 12r00r00         [24] 1085 	lcall	_printf_tiny
      0002A1 15 81            [12] 1086 	dec	sp
      0002A3 15 81            [12] 1087 	dec	sp
                                   1088 ;	lcdCommands.c:121: gets(x);
      0002A5 90r00r04         [24] 1089 	mov	dptr,#_customCharacter_x_65536_83
      0002A8 75 F0 00         [24] 1090 	mov	b,#0x00
      0002AB 12r06r4D         [24] 1091 	lcall	_gets
                                   1092 ;	lcdCommands.c:122: temp = atoh(x);
      0002AE 90r00r04         [24] 1093 	mov	dptr,#_customCharacter_x_65536_83
      0002B1 75 F0 00         [24] 1094 	mov	b,#0x00
      0002B4 12r0Dr83         [24] 1095 	lcall	_atoh
      0002B7 AE 82            [24] 1096 	mov	r6,dpl
                                   1097 ;	lcdCommands.c:123: }while(temp < 0 || temp > 0x1F);
      0002B9 E5 83            [12] 1098 	mov	a,dph
      0002BB FF               [12] 1099 	mov	r7,a
      0002BC 20 E7 D7         [24] 1100 	jb	acc.7,00114$
      0002BF C3               [12] 1101 	clr	c
      0002C0 74 1F            [12] 1102 	mov	a,#0x1f
      0002C2 9E               [12] 1103 	subb	a,r6
      0002C3 74 80            [12] 1104 	mov	a,#(0x00 ^ 0x80)
      0002C5 8F F0            [24] 1105 	mov	b,r7
      0002C7 63 F0 80         [24] 1106 	xrl	b,#0x80
      0002CA 95 F0            [12] 1107 	subb	a,b
      0002CC 40 C8            [24] 1108 	jc	00114$
                                   1109 ;	lcdCommands.c:124: memset(x,'\0',8 * sizeof(char));
      0002CE 90r00r00         [24] 1110 	mov	dptr,#_memset_PARM_2
      0002D1 E4               [12] 1111 	clr	a
      0002D2 F0               [24] 1112 	movx	@dptr,a
      0002D3 90r00r00         [24] 1113 	mov	dptr,#_memset_PARM_3
      0002D6 74 08            [12] 1114 	mov	a,#0x08
      0002D8 F0               [24] 1115 	movx	@dptr,a
      0002D9 E4               [12] 1116 	clr	a
      0002DA A3               [24] 1117 	inc	dptr
      0002DB F0               [24] 1118 	movx	@dptr,a
      0002DC 90r00r04         [24] 1119 	mov	dptr,#_customCharacter_x_65536_83
      0002DF 75 F0 00         [24] 1120 	mov	b,#0x00
      0002E2 C0 07            [24] 1121 	push	ar7
      0002E4 C0 06            [24] 1122 	push	ar6
      0002E6 12r00r00         [24] 1123 	lcall	_memset
      0002E9 D0 06            [24] 1124 	pop	ar6
      0002EB D0 07            [24] 1125 	pop	ar7
                                   1126 ;	lcdCommands.c:125: writeCharacter = temp & 0xFF;
      0002ED 90 F1 00         [24] 1127 	mov	dptr,#_writeCharacter
      0002F0 EE               [12] 1128 	mov	a,r6
      0002F1 F0               [24] 1129 	movx	@dptr,a
      0002F2 E4               [12] 1130 	clr	a
      0002F3 A3               [24] 1131 	inc	dptr
      0002F4 F0               [24] 1132 	movx	@dptr,a
                                   1133 ;	lcdCommands.c:126: busyWait();
      0002F5 12r00r1E         [24] 1134 	lcall	_busyWait
                                   1135 ;	lcdCommands.c:127: lcdGeneral = 0x40 | 0x14;
      0002F8 90 F0 00         [24] 1136 	mov	dptr,#_lcdGeneral
      0002FB 74 54            [12] 1137 	mov	a,#0x54
      0002FD F0               [24] 1138 	movx	@dptr,a
      0002FE E4               [12] 1139 	clr	a
      0002FF A3               [24] 1140 	inc	dptr
      000300 F0               [24] 1141 	movx	@dptr,a
                                   1142 ;	lcdCommands.c:128: busyWait();
      000301 12r00r1E         [24] 1143 	lcall	_busyWait
                                   1144 ;	lcdCommands.c:129: do{
      000304                       1145 00118$:
                                   1146 ;	lcdCommands.c:130: printf_tiny("\n\rEnter value for Row 5\n\r");
      000304 74r9C            [12] 1147 	mov	a,#___str_4
      000306 C0 E0            [24] 1148 	push	acc
      000308 74s02            [12] 1149 	mov	a,#(___str_4 >> 8)
      00030A C0 E0            [24] 1150 	push	acc
      00030C 12r00r00         [24] 1151 	lcall	_printf_tiny
      00030F 15 81            [12] 1152 	dec	sp
      000311 15 81            [12] 1153 	dec	sp
                                   1154 ;	lcdCommands.c:131: gets(x);
      000313 90r00r04         [24] 1155 	mov	dptr,#_customCharacter_x_65536_83
      000316 75 F0 00         [24] 1156 	mov	b,#0x00
      000319 12r06r4D         [24] 1157 	lcall	_gets
                                   1158 ;	lcdCommands.c:132: temp = atoh(x);
      00031C 90r00r04         [24] 1159 	mov	dptr,#_customCharacter_x_65536_83
      00031F 75 F0 00         [24] 1160 	mov	b,#0x00
      000322 12r0Dr83         [24] 1161 	lcall	_atoh
      000325 AE 82            [24] 1162 	mov	r6,dpl
                                   1163 ;	lcdCommands.c:133: }while(temp < 0 || temp > 0x1F);
      000327 E5 83            [12] 1164 	mov	a,dph
      000329 FF               [12] 1165 	mov	r7,a
      00032A 20 E7 D7         [24] 1166 	jb	acc.7,00118$
      00032D C3               [12] 1167 	clr	c
      00032E 74 1F            [12] 1168 	mov	a,#0x1f
      000330 9E               [12] 1169 	subb	a,r6
      000331 74 80            [12] 1170 	mov	a,#(0x00 ^ 0x80)
      000333 8F F0            [24] 1171 	mov	b,r7
      000335 63 F0 80         [24] 1172 	xrl	b,#0x80
      000338 95 F0            [12] 1173 	subb	a,b
      00033A 40 C8            [24] 1174 	jc	00118$
                                   1175 ;	lcdCommands.c:134: memset(x,'\0',8 * sizeof(char));
      00033C 90r00r00         [24] 1176 	mov	dptr,#_memset_PARM_2
      00033F E4               [12] 1177 	clr	a
      000340 F0               [24] 1178 	movx	@dptr,a
      000341 90r00r00         [24] 1179 	mov	dptr,#_memset_PARM_3
      000344 74 08            [12] 1180 	mov	a,#0x08
      000346 F0               [24] 1181 	movx	@dptr,a
      000347 E4               [12] 1182 	clr	a
      000348 A3               [24] 1183 	inc	dptr
      000349 F0               [24] 1184 	movx	@dptr,a
      00034A 90r00r04         [24] 1185 	mov	dptr,#_customCharacter_x_65536_83
      00034D 75 F0 00         [24] 1186 	mov	b,#0x00
      000350 C0 07            [24] 1187 	push	ar7
      000352 C0 06            [24] 1188 	push	ar6
      000354 12r00r00         [24] 1189 	lcall	_memset
      000357 D0 06            [24] 1190 	pop	ar6
      000359 D0 07            [24] 1191 	pop	ar7
                                   1192 ;	lcdCommands.c:135: writeCharacter = temp & 0xFF;
      00035B 90 F1 00         [24] 1193 	mov	dptr,#_writeCharacter
      00035E EE               [12] 1194 	mov	a,r6
      00035F F0               [24] 1195 	movx	@dptr,a
      000360 E4               [12] 1196 	clr	a
      000361 A3               [24] 1197 	inc	dptr
      000362 F0               [24] 1198 	movx	@dptr,a
                                   1199 ;	lcdCommands.c:136: busyWait();
      000363 12r00r1E         [24] 1200 	lcall	_busyWait
                                   1201 ;	lcdCommands.c:137: lcdGeneral = 0x40 | 0x15;
      000366 90 F0 00         [24] 1202 	mov	dptr,#_lcdGeneral
      000369 74 55            [12] 1203 	mov	a,#0x55
      00036B F0               [24] 1204 	movx	@dptr,a
      00036C E4               [12] 1205 	clr	a
      00036D A3               [24] 1206 	inc	dptr
      00036E F0               [24] 1207 	movx	@dptr,a
                                   1208 ;	lcdCommands.c:138: busyWait();
      00036F 12r00r1E         [24] 1209 	lcall	_busyWait
                                   1210 ;	lcdCommands.c:139: do{
      000372                       1211 00122$:
                                   1212 ;	lcdCommands.c:140: printf_tiny("\n\rEnter value for Row 6\n\r");
      000372 74rB6            [12] 1213 	mov	a,#___str_5
      000374 C0 E0            [24] 1214 	push	acc
      000376 74s02            [12] 1215 	mov	a,#(___str_5 >> 8)
      000378 C0 E0            [24] 1216 	push	acc
      00037A 12r00r00         [24] 1217 	lcall	_printf_tiny
      00037D 15 81            [12] 1218 	dec	sp
      00037F 15 81            [12] 1219 	dec	sp
                                   1220 ;	lcdCommands.c:141: gets(x);
      000381 90r00r04         [24] 1221 	mov	dptr,#_customCharacter_x_65536_83
      000384 75 F0 00         [24] 1222 	mov	b,#0x00
      000387 12r06r4D         [24] 1223 	lcall	_gets
                                   1224 ;	lcdCommands.c:142: temp = atoh(x);
      00038A 90r00r04         [24] 1225 	mov	dptr,#_customCharacter_x_65536_83
      00038D 75 F0 00         [24] 1226 	mov	b,#0x00
      000390 12r0Dr83         [24] 1227 	lcall	_atoh
      000393 AE 82            [24] 1228 	mov	r6,dpl
                                   1229 ;	lcdCommands.c:143: }while(temp < 0 || temp > 0x1F);
      000395 E5 83            [12] 1230 	mov	a,dph
      000397 FF               [12] 1231 	mov	r7,a
      000398 20 E7 D7         [24] 1232 	jb	acc.7,00122$
      00039B C3               [12] 1233 	clr	c
      00039C 74 1F            [12] 1234 	mov	a,#0x1f
      00039E 9E               [12] 1235 	subb	a,r6
      00039F 74 80            [12] 1236 	mov	a,#(0x00 ^ 0x80)
      0003A1 8F F0            [24] 1237 	mov	b,r7
      0003A3 63 F0 80         [24] 1238 	xrl	b,#0x80
      0003A6 95 F0            [12] 1239 	subb	a,b
      0003A8 40 C8            [24] 1240 	jc	00122$
                                   1241 ;	lcdCommands.c:144: memset(x,'\0',8 * sizeof(char));
      0003AA 90r00r00         [24] 1242 	mov	dptr,#_memset_PARM_2
      0003AD E4               [12] 1243 	clr	a
      0003AE F0               [24] 1244 	movx	@dptr,a
      0003AF 90r00r00         [24] 1245 	mov	dptr,#_memset_PARM_3
      0003B2 74 08            [12] 1246 	mov	a,#0x08
      0003B4 F0               [24] 1247 	movx	@dptr,a
      0003B5 E4               [12] 1248 	clr	a
      0003B6 A3               [24] 1249 	inc	dptr
      0003B7 F0               [24] 1250 	movx	@dptr,a
      0003B8 90r00r04         [24] 1251 	mov	dptr,#_customCharacter_x_65536_83
      0003BB 75 F0 00         [24] 1252 	mov	b,#0x00
      0003BE C0 07            [24] 1253 	push	ar7
      0003C0 C0 06            [24] 1254 	push	ar6
      0003C2 12r00r00         [24] 1255 	lcall	_memset
      0003C5 D0 06            [24] 1256 	pop	ar6
      0003C7 D0 07            [24] 1257 	pop	ar7
                                   1258 ;	lcdCommands.c:145: writeCharacter = temp & 0xFF;
      0003C9 90 F1 00         [24] 1259 	mov	dptr,#_writeCharacter
      0003CC EE               [12] 1260 	mov	a,r6
      0003CD F0               [24] 1261 	movx	@dptr,a
      0003CE E4               [12] 1262 	clr	a
      0003CF A3               [24] 1263 	inc	dptr
      0003D0 F0               [24] 1264 	movx	@dptr,a
                                   1265 ;	lcdCommands.c:146: busyWait();
      0003D1 12r00r1E         [24] 1266 	lcall	_busyWait
                                   1267 ;	lcdCommands.c:147: lcdGeneral = 0x40 | 0x16;
      0003D4 90 F0 00         [24] 1268 	mov	dptr,#_lcdGeneral
      0003D7 74 56            [12] 1269 	mov	a,#0x56
      0003D9 F0               [24] 1270 	movx	@dptr,a
      0003DA E4               [12] 1271 	clr	a
      0003DB A3               [24] 1272 	inc	dptr
      0003DC F0               [24] 1273 	movx	@dptr,a
                                   1274 ;	lcdCommands.c:148: busyWait();
      0003DD 12r00r1E         [24] 1275 	lcall	_busyWait
                                   1276 ;	lcdCommands.c:149: do{
      0003E0                       1277 00126$:
                                   1278 ;	lcdCommands.c:150: printf_tiny("\n\rEnter value for Row 7\n\r");
      0003E0 74rD0            [12] 1279 	mov	a,#___str_6
      0003E2 C0 E0            [24] 1280 	push	acc
      0003E4 74s02            [12] 1281 	mov	a,#(___str_6 >> 8)
      0003E6 C0 E0            [24] 1282 	push	acc
      0003E8 12r00r00         [24] 1283 	lcall	_printf_tiny
      0003EB 15 81            [12] 1284 	dec	sp
      0003ED 15 81            [12] 1285 	dec	sp
                                   1286 ;	lcdCommands.c:151: gets(x);
      0003EF 90r00r04         [24] 1287 	mov	dptr,#_customCharacter_x_65536_83
      0003F2 75 F0 00         [24] 1288 	mov	b,#0x00
      0003F5 12r06r4D         [24] 1289 	lcall	_gets
                                   1290 ;	lcdCommands.c:152: temp = atoh(x);
      0003F8 90r00r04         [24] 1291 	mov	dptr,#_customCharacter_x_65536_83
      0003FB 75 F0 00         [24] 1292 	mov	b,#0x00
      0003FE 12r0Dr83         [24] 1293 	lcall	_atoh
      000401 AE 82            [24] 1294 	mov	r6,dpl
                                   1295 ;	lcdCommands.c:153: }while(temp < 0 || temp > 0x1F);
      000403 E5 83            [12] 1296 	mov	a,dph
      000405 FF               [12] 1297 	mov	r7,a
      000406 20 E7 D7         [24] 1298 	jb	acc.7,00126$
      000409 C3               [12] 1299 	clr	c
      00040A 74 1F            [12] 1300 	mov	a,#0x1f
      00040C 9E               [12] 1301 	subb	a,r6
      00040D 74 80            [12] 1302 	mov	a,#(0x00 ^ 0x80)
      00040F 8F F0            [24] 1303 	mov	b,r7
      000411 63 F0 80         [24] 1304 	xrl	b,#0x80
      000414 95 F0            [12] 1305 	subb	a,b
      000416 40 C8            [24] 1306 	jc	00126$
                                   1307 ;	lcdCommands.c:154: memset(x,'\0',8 * sizeof(char));
      000418 90r00r00         [24] 1308 	mov	dptr,#_memset_PARM_2
      00041B E4               [12] 1309 	clr	a
      00041C F0               [24] 1310 	movx	@dptr,a
      00041D 90r00r00         [24] 1311 	mov	dptr,#_memset_PARM_3
      000420 74 08            [12] 1312 	mov	a,#0x08
      000422 F0               [24] 1313 	movx	@dptr,a
      000423 E4               [12] 1314 	clr	a
      000424 A3               [24] 1315 	inc	dptr
      000425 F0               [24] 1316 	movx	@dptr,a
      000426 90r00r04         [24] 1317 	mov	dptr,#_customCharacter_x_65536_83
      000429 75 F0 00         [24] 1318 	mov	b,#0x00
      00042C C0 07            [24] 1319 	push	ar7
      00042E C0 06            [24] 1320 	push	ar6
      000430 12r00r00         [24] 1321 	lcall	_memset
      000433 D0 06            [24] 1322 	pop	ar6
      000435 D0 07            [24] 1323 	pop	ar7
                                   1324 ;	lcdCommands.c:155: writeCharacter = temp & 0xFF;
      000437 90 F1 00         [24] 1325 	mov	dptr,#_writeCharacter
      00043A EE               [12] 1326 	mov	a,r6
      00043B F0               [24] 1327 	movx	@dptr,a
      00043C E4               [12] 1328 	clr	a
      00043D A3               [24] 1329 	inc	dptr
      00043E F0               [24] 1330 	movx	@dptr,a
                                   1331 ;	lcdCommands.c:156: busyWait();
      00043F 12r00r1E         [24] 1332 	lcall	_busyWait
                                   1333 ;	lcdCommands.c:157: lcdGeneral = 0x40 | 0x17;
      000442 90 F0 00         [24] 1334 	mov	dptr,#_lcdGeneral
      000445 74 57            [12] 1335 	mov	a,#0x57
      000447 F0               [24] 1336 	movx	@dptr,a
      000448 E4               [12] 1337 	clr	a
      000449 A3               [24] 1338 	inc	dptr
      00044A F0               [24] 1339 	movx	@dptr,a
                                   1340 ;	lcdCommands.c:158: busyWait();
      00044B 12r00r1E         [24] 1341 	lcall	_busyWait
                                   1342 ;	lcdCommands.c:159: do{
      00044E                       1343 00130$:
                                   1344 ;	lcdCommands.c:160: printf_tiny("\n\rEnter value for Row 8\n\r");
      00044E 74rEA            [12] 1345 	mov	a,#___str_7
      000450 C0 E0            [24] 1346 	push	acc
      000452 74s02            [12] 1347 	mov	a,#(___str_7 >> 8)
      000454 C0 E0            [24] 1348 	push	acc
      000456 12r00r00         [24] 1349 	lcall	_printf_tiny
      000459 15 81            [12] 1350 	dec	sp
      00045B 15 81            [12] 1351 	dec	sp
                                   1352 ;	lcdCommands.c:161: gets(x);
      00045D 90r00r04         [24] 1353 	mov	dptr,#_customCharacter_x_65536_83
      000460 75 F0 00         [24] 1354 	mov	b,#0x00
      000463 12r06r4D         [24] 1355 	lcall	_gets
                                   1356 ;	lcdCommands.c:162: temp = atoh(x);
      000466 90r00r04         [24] 1357 	mov	dptr,#_customCharacter_x_65536_83
      000469 75 F0 00         [24] 1358 	mov	b,#0x00
      00046C 12r0Dr83         [24] 1359 	lcall	_atoh
      00046F AE 82            [24] 1360 	mov	r6,dpl
                                   1361 ;	lcdCommands.c:163: }while(temp < 0 || temp > 0x1F);
      000471 E5 83            [12] 1362 	mov	a,dph
      000473 FF               [12] 1363 	mov	r7,a
      000474 20 E7 D7         [24] 1364 	jb	acc.7,00130$
      000477 C3               [12] 1365 	clr	c
      000478 74 1F            [12] 1366 	mov	a,#0x1f
      00047A 9E               [12] 1367 	subb	a,r6
      00047B 74 80            [12] 1368 	mov	a,#(0x00 ^ 0x80)
      00047D 8F F0            [24] 1369 	mov	b,r7
      00047F 63 F0 80         [24] 1370 	xrl	b,#0x80
      000482 95 F0            [12] 1371 	subb	a,b
      000484 40 C8            [24] 1372 	jc	00130$
                                   1373 ;	lcdCommands.c:164: memset(x,'\0',8 * sizeof(char));
      000486 90r00r00         [24] 1374 	mov	dptr,#_memset_PARM_2
      000489 E4               [12] 1375 	clr	a
      00048A F0               [24] 1376 	movx	@dptr,a
      00048B 90r00r00         [24] 1377 	mov	dptr,#_memset_PARM_3
      00048E 74 08            [12] 1378 	mov	a,#0x08
      000490 F0               [24] 1379 	movx	@dptr,a
      000491 E4               [12] 1380 	clr	a
      000492 A3               [24] 1381 	inc	dptr
      000493 F0               [24] 1382 	movx	@dptr,a
      000494 90r00r04         [24] 1383 	mov	dptr,#_customCharacter_x_65536_83
      000497 75 F0 00         [24] 1384 	mov	b,#0x00
      00049A C0 07            [24] 1385 	push	ar7
      00049C C0 06            [24] 1386 	push	ar6
      00049E 12r00r00         [24] 1387 	lcall	_memset
      0004A1 D0 06            [24] 1388 	pop	ar6
      0004A3 D0 07            [24] 1389 	pop	ar7
                                   1390 ;	lcdCommands.c:165: writeCharacter = temp & 0xFF;
      0004A5 90 F1 00         [24] 1391 	mov	dptr,#_writeCharacter
      0004A8 EE               [12] 1392 	mov	a,r6
      0004A9 F0               [24] 1393 	movx	@dptr,a
      0004AA E4               [12] 1394 	clr	a
      0004AB A3               [24] 1395 	inc	dptr
      0004AC F0               [24] 1396 	movx	@dptr,a
                                   1397 ;	lcdCommands.c:166: busyWait();
      0004AD 12r00r1E         [24] 1398 	lcall	_busyWait
                                   1399 ;	lcdCommands.c:167: goToXY(3,1);
      0004B0 90r00r02         [24] 1400 	mov	dptr,#_goToXY_PARM_2
      0004B3 74 01            [12] 1401 	mov	a,#0x01
      0004B5 F0               [24] 1402 	movx	@dptr,a
      0004B6 75 82 03         [24] 1403 	mov	dpl,#0x03
      0004B9 12r00rC8         [24] 1404 	lcall	_goToXY
                                   1405 ;	lcdCommands.c:168: busyWait();
      0004BC 12r00r1E         [24] 1406 	lcall	_busyWait
                                   1407 ;	lcdCommands.c:169: lcdGeneral = 0x80 | 0x01;
      0004BF 90 F0 00         [24] 1408 	mov	dptr,#_lcdGeneral
      0004C2 74 81            [12] 1409 	mov	a,#0x81
      0004C4 F0               [24] 1410 	movx	@dptr,a
      0004C5 E4               [12] 1411 	clr	a
      0004C6 A3               [24] 1412 	inc	dptr
      0004C7 F0               [24] 1413 	movx	@dptr,a
                                   1414 ;	lcdCommands.c:170: busyWait();
      0004C8 12r00r1E         [24] 1415 	lcall	_busyWait
                                   1416 ;	lcdCommands.c:171: writeCharacter = 0x01;
      0004CB 90 F1 00         [24] 1417 	mov	dptr,#_writeCharacter
      0004CE 74 01            [12] 1418 	mov	a,#0x01
      0004D0 F0               [24] 1419 	movx	@dptr,a
      0004D1 E4               [12] 1420 	clr	a
      0004D2 A3               [24] 1421 	inc	dptr
      0004D3 F0               [24] 1422 	movx	@dptr,a
                                   1423 ;	lcdCommands.c:172: }
      0004D4 22               [24] 1424 	ret
                                   1425 ;------------------------------------------------------------
                                   1426 ;Allocation info for local variables in function 'readLCD'
                                   1427 ;------------------------------------------------------------
                                   1428 ;temp1                     Allocated with name '_readLCD_temp1_65537_93'
                                   1429 ;------------------------------------------------------------
                                   1430 ;	lcdCommands.c:174: uint8_t readLCD()
                                   1431 ;	-----------------------------------------
                                   1432 ;	 function readLCD
                                   1433 ;	-----------------------------------------
      0004D5                       1434 _readLCD:
                                   1435 ;	lcdCommands.c:176: busyWait();
      0004D5 12r00r1E         [24] 1436 	lcall	_busyWait
                                   1437 ;	lcdCommands.c:177: uint8_t temp1 = readCharacter;
      0004D8 90 F3 00         [24] 1438 	mov	dptr,#_readCharacter
      0004DB E0               [24] 1439 	movx	a,@dptr
      0004DC FE               [12] 1440 	mov	r6,a
      0004DD A3               [24] 1441 	inc	dptr
      0004DE E0               [24] 1442 	movx	a,@dptr
                                   1443 ;	lcdCommands.c:178: return temp1;
      0004DF 8E 82            [24] 1444 	mov	dpl,r6
                                   1445 ;	lcdCommands.c:179: }
      0004E1 22               [24] 1446 	ret
                                   1447 ;------------------------------------------------------------
                                   1448 ;Allocation info for local variables in function 'putsLCD'
                                   1449 ;------------------------------------------------------------
                                   1450 ;sloc0                     Allocated with name '_putsLCD_sloc0_1_0'
                                   1451 ;sloc1                     Allocated with name '_putsLCD_sloc1_1_0'
                                   1452 ;y                         Allocated with name '_putsLCD_y_65536_94'
                                   1453 ;i                         Allocated with name '_putsLCD_i_65536_95'
                                   1454 ;j                         Allocated with name '_putsLCD_j_65536_95'
                                   1455 ;k                         Allocated with name '_putsLCD_k_65536_95'
                                   1456 ;------------------------------------------------------------
                                   1457 ;	lcdCommands.c:181: void putsLCD(char* y)
                                   1458 ;	-----------------------------------------
                                   1459 ;	 function putsLCD
                                   1460 ;	-----------------------------------------
      0004E2                       1461 _putsLCD:
      0004E2 AF F0            [24] 1462 	mov	r7,b
      0004E4 AE 83            [24] 1463 	mov	r6,dph
      0004E6 E5 82            [12] 1464 	mov	a,dpl
      0004E8 90r00r0C         [24] 1465 	mov	dptr,#_putsLCD_y_65536_94
      0004EB F0               [24] 1466 	movx	@dptr,a
      0004EC EE               [12] 1467 	mov	a,r6
      0004ED A3               [24] 1468 	inc	dptr
      0004EE F0               [24] 1469 	movx	@dptr,a
      0004EF EF               [12] 1470 	mov	a,r7
      0004F0 A3               [24] 1471 	inc	dptr
      0004F1 F0               [24] 1472 	movx	@dptr,a
                                   1473 ;	lcdCommands.c:183: int i = 0,j = 0, k =0;
      0004F2 90r00r0F         [24] 1474 	mov	dptr,#_putsLCD_i_65536_95
      0004F5 E4               [12] 1475 	clr	a
      0004F6 F0               [24] 1476 	movx	@dptr,a
      0004F7 A3               [24] 1477 	inc	dptr
      0004F8 F0               [24] 1478 	movx	@dptr,a
                                   1479 ;	lcdCommands.c:184: while(y[i + (j * 16)] != '\0')
      0004F9 90r00r0C         [24] 1480 	mov	dptr,#_putsLCD_y_65536_94
      0004FC E0               [24] 1481 	movx	a,@dptr
      0004FD F5*02            [12] 1482 	mov	_putsLCD_sloc1_1_0,a
      0004FF A3               [24] 1483 	inc	dptr
      000500 E0               [24] 1484 	movx	a,@dptr
      000501 F5*03            [12] 1485 	mov	(_putsLCD_sloc1_1_0 + 1),a
      000503 A3               [24] 1486 	inc	dptr
      000504 E0               [24] 1487 	movx	a,@dptr
      000505 F5*04            [12] 1488 	mov	(_putsLCD_sloc1_1_0 + 2),a
      000507 AA*02            [24] 1489 	mov	r2,_putsLCD_sloc1_1_0
      000509 AB*03            [24] 1490 	mov	r3,(_putsLCD_sloc1_1_0 + 1)
      00050B AC*04            [24] 1491 	mov	r4,(_putsLCD_sloc1_1_0 + 2)
      00050D 78 00            [12] 1492 	mov	r0,#0x00
      00050F 79 00            [12] 1493 	mov	r1,#0x00
      000511                       1494 00103$:
      000511 88 06            [24] 1495 	mov	ar6,r0
      000513 E9               [12] 1496 	mov	a,r1
      000514 C4               [12] 1497 	swap	a
      000515 54 F0            [12] 1498 	anl	a,#0xf0
      000517 CE               [12] 1499 	xch	a,r6
      000518 C4               [12] 1500 	swap	a
      000519 CE               [12] 1501 	xch	a,r6
      00051A 6E               [12] 1502 	xrl	a,r6
      00051B CE               [12] 1503 	xch	a,r6
      00051C 54 F0            [12] 1504 	anl	a,#0xf0
      00051E CE               [12] 1505 	xch	a,r6
      00051F 6E               [12] 1506 	xrl	a,r6
      000520 FF               [12] 1507 	mov	r7,a
      000521 90r00r0F         [24] 1508 	mov	dptr,#_putsLCD_i_65536_95
      000524 E0               [24] 1509 	movx	a,@dptr
      000525 F5*00            [12] 1510 	mov	_putsLCD_sloc0_1_0,a
      000527 A3               [24] 1511 	inc	dptr
      000528 E0               [24] 1512 	movx	a,@dptr
      000529 F5*01            [12] 1513 	mov	(_putsLCD_sloc0_1_0 + 1),a
      00052B EE               [12] 1514 	mov	a,r6
      00052C 25*00            [12] 1515 	add	a,_putsLCD_sloc0_1_0
      00052E FE               [12] 1516 	mov	r6,a
      00052F EF               [12] 1517 	mov	a,r7
      000530 35*01            [12] 1518 	addc	a,(_putsLCD_sloc0_1_0 + 1)
      000532 FF               [12] 1519 	mov	r7,a
      000533 EE               [12] 1520 	mov	a,r6
      000534 2A               [12] 1521 	add	a,r2
      000535 FE               [12] 1522 	mov	r6,a
      000536 EF               [12] 1523 	mov	a,r7
      000537 3B               [12] 1524 	addc	a,r3
      000538 FF               [12] 1525 	mov	r7,a
      000539 8C 05            [24] 1526 	mov	ar5,r4
      00053B 8E 82            [24] 1527 	mov	dpl,r6
      00053D 8F 83            [24] 1528 	mov	dph,r7
      00053F 8D F0            [24] 1529 	mov	b,r5
      000541 12r00r00         [24] 1530 	lcall	__gptrget
      000544 70 01            [24] 1531 	jnz	00121$
      000546 22               [24] 1532 	ret
      000547                       1533 00121$:
                                   1534 ;	lcdCommands.c:186: busyWait();
      000547 C0 04            [24] 1535 	push	ar4
      000549 C0 03            [24] 1536 	push	ar3
      00054B C0 02            [24] 1537 	push	ar2
      00054D C0 01            [24] 1538 	push	ar1
      00054F C0 00            [24] 1539 	push	ar0
      000551 12r00r1E         [24] 1540 	lcall	_busyWait
      000554 D0 00            [24] 1541 	pop	ar0
      000556 D0 01            [24] 1542 	pop	ar1
      000558 D0 02            [24] 1543 	pop	ar2
      00055A D0 03            [24] 1544 	pop	ar3
      00055C D0 04            [24] 1545 	pop	ar4
                                   1546 ;	lcdCommands.c:187: if( i > 15)
      00055E C3               [12] 1547 	clr	c
      00055F 74 0F            [12] 1548 	mov	a,#0x0f
      000561 95*00            [12] 1549 	subb	a,_putsLCD_sloc0_1_0
      000563 74 80            [12] 1550 	mov	a,#(0x00 ^ 0x80)
      000565 85*01 F0         [24] 1551 	mov	b,(_putsLCD_sloc0_1_0 + 1)
      000568 63 F0 80         [24] 1552 	xrl	b,#0x80
      00056B 95 F0            [12] 1553 	subb	a,b
      00056D 50 0C            [24] 1554 	jnc	00102$
                                   1555 ;	lcdCommands.c:189: j++;
      00056F 08               [12] 1556 	inc	r0
      000570 B8 00 01         [24] 1557 	cjne	r0,#0x00,00123$
      000573 09               [12] 1558 	inc	r1
      000574                       1559 00123$:
                                   1560 ;	lcdCommands.c:190: i = 0;
      000574 90r00r0F         [24] 1561 	mov	dptr,#_putsLCD_i_65536_95
      000577 E4               [12] 1562 	clr	a
      000578 F0               [24] 1563 	movx	@dptr,a
      000579 A3               [24] 1564 	inc	dptr
      00057A F0               [24] 1565 	movx	@dptr,a
      00057B                       1566 00102$:
                                   1567 ;	lcdCommands.c:193: goToAddr(lookUpTable[j][i]);
      00057B C0 02            [24] 1568 	push	ar2
      00057D C0 03            [24] 1569 	push	ar3
      00057F C0 04            [24] 1570 	push	ar4
      000581 88 03            [24] 1571 	mov	ar3,r0
      000583 E9               [12] 1572 	mov	a,r1
      000584 C4               [12] 1573 	swap	a
      000585 54 F0            [12] 1574 	anl	a,#0xf0
      000587 CB               [12] 1575 	xch	a,r3
      000588 C4               [12] 1576 	swap	a
      000589 CB               [12] 1577 	xch	a,r3
      00058A 6B               [12] 1578 	xrl	a,r3
      00058B CB               [12] 1579 	xch	a,r3
      00058C 54 F0            [12] 1580 	anl	a,#0xf0
      00058E CB               [12] 1581 	xch	a,r3
      00058F 6B               [12] 1582 	xrl	a,r3
      000590 FC               [12] 1583 	mov	r4,a
      000591 EB               [12] 1584 	mov	a,r3
      000592 24rF4            [12] 1585 	add	a,#_lookUpTable
      000594 FA               [12] 1586 	mov	r2,a
      000595 EC               [12] 1587 	mov	a,r4
      000596 34s01            [12] 1588 	addc	a,#(_lookUpTable >> 8)
      000598 FF               [12] 1589 	mov	r7,a
      000599 90r00r0F         [24] 1590 	mov	dptr,#_putsLCD_i_65536_95
      00059C E0               [24] 1591 	movx	a,@dptr
      00059D FD               [12] 1592 	mov	r5,a
      00059E A3               [24] 1593 	inc	dptr
      00059F E0               [24] 1594 	movx	a,@dptr
      0005A0 FE               [12] 1595 	mov	r6,a
      0005A1 ED               [12] 1596 	mov	a,r5
      0005A2 2A               [12] 1597 	add	a,r2
      0005A3 F5*00            [12] 1598 	mov	_putsLCD_sloc0_1_0,a
      0005A5 EE               [12] 1599 	mov	a,r6
      0005A6 3F               [12] 1600 	addc	a,r7
      0005A7 F5*01            [12] 1601 	mov	(_putsLCD_sloc0_1_0 + 1),a
      0005A9 85*00 82         [24] 1602 	mov	dpl,_putsLCD_sloc0_1_0
      0005AC 85*01 83         [24] 1603 	mov	dph,(_putsLCD_sloc0_1_0 + 1)
      0005AF E4               [12] 1604 	clr	a
      0005B0 93               [24] 1605 	movc	a,@a+dptr
      0005B1 F5 82            [12] 1606 	mov	dpl,a
      0005B3 C0 06            [24] 1607 	push	ar6
      0005B5 C0 05            [24] 1608 	push	ar5
      0005B7 C0 04            [24] 1609 	push	ar4
      0005B9 C0 03            [24] 1610 	push	ar3
      0005BB C0 02            [24] 1611 	push	ar2
      0005BD C0 01            [24] 1612 	push	ar1
      0005BF C0 00            [24] 1613 	push	ar0
      0005C1 12r00rAD         [24] 1614 	lcall	_goToAddr
      0005C4 D0 00            [24] 1615 	pop	ar0
      0005C6 D0 01            [24] 1616 	pop	ar1
      0005C8 D0 02            [24] 1617 	pop	ar2
                                   1618 ;	lcdCommands.c:194: printf_tiny("%d\n\r", lookUpTable[j][i]);
      0005CA 85*00 82         [24] 1619 	mov	dpl,_putsLCD_sloc0_1_0
      0005CD 85*01 83         [24] 1620 	mov	dph,(_putsLCD_sloc0_1_0 + 1)
      0005D0 E4               [12] 1621 	clr	a
      0005D1 93               [24] 1622 	movc	a,@a+dptr
      0005D2 FF               [12] 1623 	mov	r7,a
      0005D3 7A 00            [12] 1624 	mov	r2,#0x00
      0005D5 C0 02            [24] 1625 	push	ar2
      0005D7 C0 01            [24] 1626 	push	ar1
      0005D9 C0 00            [24] 1627 	push	ar0
      0005DB C0 07            [24] 1628 	push	ar7
      0005DD C0 02            [24] 1629 	push	ar2
      0005DF 74r04            [12] 1630 	mov	a,#___str_8
      0005E1 C0 E0            [24] 1631 	push	acc
      0005E3 74s03            [12] 1632 	mov	a,#(___str_8 >> 8)
      0005E5 C0 E0            [24] 1633 	push	acc
      0005E7 12r00r00         [24] 1634 	lcall	_printf_tiny
      0005EA E5 81            [12] 1635 	mov	a,sp
      0005EC 24 FC            [12] 1636 	add	a,#0xfc
      0005EE F5 81            [12] 1637 	mov	sp,a
      0005F0 D0 00            [24] 1638 	pop	ar0
      0005F2 D0 01            [24] 1639 	pop	ar1
      0005F4 D0 02            [24] 1640 	pop	ar2
      0005F6 D0 03            [24] 1641 	pop	ar3
      0005F8 D0 04            [24] 1642 	pop	ar4
      0005FA D0 05            [24] 1643 	pop	ar5
      0005FC D0 06            [24] 1644 	pop	ar6
                                   1645 ;	lcdCommands.c:195: lcdPutCh(y[i + (j * 16)]);
      0005FE EB               [12] 1646 	mov	a,r3
      0005FF 2D               [12] 1647 	add	a,r5
      000600 FB               [12] 1648 	mov	r3,a
      000601 EC               [12] 1649 	mov	a,r4
      000602 3E               [12] 1650 	addc	a,r6
      000603 FC               [12] 1651 	mov	r4,a
      000604 EB               [12] 1652 	mov	a,r3
      000605 25*02            [12] 1653 	add	a,_putsLCD_sloc1_1_0
      000607 FB               [12] 1654 	mov	r3,a
      000608 EC               [12] 1655 	mov	a,r4
      000609 35*03            [12] 1656 	addc	a,(_putsLCD_sloc1_1_0 + 1)
      00060B FC               [12] 1657 	mov	r4,a
      00060C AF*04            [24] 1658 	mov	r7,(_putsLCD_sloc1_1_0 + 2)
      00060E 8B 82            [24] 1659 	mov	dpl,r3
      000610 8C 83            [24] 1660 	mov	dph,r4
      000612 8F F0            [24] 1661 	mov	b,r7
      000614 12r00r00         [24] 1662 	lcall	__gptrget
      000617 FB               [12] 1663 	mov	r3,a
      000618 F5 82            [12] 1664 	mov	dpl,a
      00061A C0 06            [24] 1665 	push	ar6
      00061C C0 05            [24] 1666 	push	ar5
      00061E C0 04            [24] 1667 	push	ar4
      000620 C0 03            [24] 1668 	push	ar3
      000622 C0 02            [24] 1669 	push	ar2
      000624 C0 01            [24] 1670 	push	ar1
      000626 C0 00            [24] 1671 	push	ar0
      000628 12r00r8B         [24] 1672 	lcall	_lcdPutCh
      00062B D0 00            [24] 1673 	pop	ar0
      00062D D0 01            [24] 1674 	pop	ar1
      00062F D0 02            [24] 1675 	pop	ar2
      000631 D0 03            [24] 1676 	pop	ar3
      000633 D0 04            [24] 1677 	pop	ar4
      000635 D0 05            [24] 1678 	pop	ar5
      000637 D0 06            [24] 1679 	pop	ar6
                                   1680 ;	lcdCommands.c:196: i++;
      000639 90r00r0F         [24] 1681 	mov	dptr,#_putsLCD_i_65536_95
      00063C 74 01            [12] 1682 	mov	a,#0x01
      00063E 2D               [12] 1683 	add	a,r5
      00063F F0               [24] 1684 	movx	@dptr,a
      000640 E4               [12] 1685 	clr	a
      000641 3E               [12] 1686 	addc	a,r6
      000642 A3               [24] 1687 	inc	dptr
      000643 F0               [24] 1688 	movx	@dptr,a
      000644 D0 04            [24] 1689 	pop	ar4
      000646 D0 03            [24] 1690 	pop	ar3
      000648 D0 02            [24] 1691 	pop	ar2
                                   1692 ;	lcdCommands.c:198: }
      00064A 02r05r11         [24] 1693 	ljmp	00103$
                                   1694 ;------------------------------------------------------------
                                   1695 ;Allocation info for local variables in function 'gets'
                                   1696 ;------------------------------------------------------------
                                   1697 ;s                         Allocated with name '_gets_s_65536_98'
                                   1698 ;c                         Allocated with name '_gets_c_65536_99'
                                   1699 ;count                     Allocated with name '_gets_count_65536_99'
                                   1700 ;------------------------------------------------------------
                                   1701 ;	lcdCommands.c:200: char *gets (char *s)
                                   1702 ;	-----------------------------------------
                                   1703 ;	 function gets
                                   1704 ;	-----------------------------------------
      00064D                       1705 _gets:
      00064D AF F0            [24] 1706 	mov	r7,b
      00064F AE 83            [24] 1707 	mov	r6,dph
      000651 E5 82            [12] 1708 	mov	a,dpl
      000653 90r00r11         [24] 1709 	mov	dptr,#_gets_s_65536_98
      000656 F0               [24] 1710 	movx	@dptr,a
      000657 EE               [12] 1711 	mov	a,r6
      000658 A3               [24] 1712 	inc	dptr
      000659 F0               [24] 1713 	movx	@dptr,a
      00065A EF               [12] 1714 	mov	a,r7
      00065B A3               [24] 1715 	inc	dptr
      00065C F0               [24] 1716 	movx	@dptr,a
                                   1717 ;	lcdCommands.c:203: unsigned int count = 0;
      00065D 90r00r14         [24] 1718 	mov	dptr,#_gets_count_65536_99
      000660 E4               [12] 1719 	clr	a
      000661 F0               [24] 1720 	movx	@dptr,a
      000662 A3               [24] 1721 	inc	dptr
      000663 F0               [24] 1722 	movx	@dptr,a
                                   1723 ;	lcdCommands.c:205: while (1)
      000664                       1724 00111$:
                                   1725 ;	lcdCommands.c:207: c = getchar ();
      000664 12r00r00         [24] 1726 	lcall	_getchar
      000667 AE 82            [24] 1727 	mov	r6,dpl
      000669 AF 83            [24] 1728 	mov	r7,dph
                                   1729 ;	lcdCommands.c:208: switch(c)
      00066B BE 08 02         [24] 1730 	cjne	r6,#0x08,00139$
      00066E 80 0D            [24] 1731 	sjmp	00101$
      000670                       1732 00139$:
      000670 BE 0A 02         [24] 1733 	cjne	r6,#0x0a,00140$
      000673 80 62            [24] 1734 	sjmp	00105$
      000675                       1735 00140$:
      000675 BE 0D 02         [24] 1736 	cjne	r6,#0x0d,00141$
      000678 80 5D            [24] 1737 	sjmp	00105$
      00067A                       1738 00141$:
      00067A 02r06rFF         [24] 1739 	ljmp	00106$
                                   1740 ;	lcdCommands.c:210: case '\b': /* backspace */
      00067D                       1741 00101$:
                                   1742 ;	lcdCommands.c:211: if (count)
      00067D 90r00r14         [24] 1743 	mov	dptr,#_gets_count_65536_99
      000680 E0               [24] 1744 	movx	a,@dptr
      000681 FD               [12] 1745 	mov	r5,a
      000682 A3               [24] 1746 	inc	dptr
      000683 E0               [24] 1747 	movx	a,@dptr
      000684 FF               [12] 1748 	mov	r7,a
      000685 90r00r14         [24] 1749 	mov	dptr,#_gets_count_65536_99
      000688 E0               [24] 1750 	movx	a,@dptr
      000689 F5 F0            [12] 1751 	mov	b,a
      00068B A3               [24] 1752 	inc	dptr
      00068C E0               [24] 1753 	movx	a,@dptr
      00068D 45 F0            [12] 1754 	orl	a,b
      00068F 70 03            [24] 1755 	jnz	00142$
      000691 02r07r37         [24] 1756 	ljmp	00107$
      000694                       1757 00142$:
                                   1758 ;	lcdCommands.c:213: putchar ('\b');
      000694 90 00 08         [24] 1759 	mov	dptr,#0x0008
      000697 C0 07            [24] 1760 	push	ar7
      000699 C0 05            [24] 1761 	push	ar5
      00069B 12r00r00         [24] 1762 	lcall	_putchar
                                   1763 ;	lcdCommands.c:214: putchar (' ');
      00069E 90 00 20         [24] 1764 	mov	dptr,#0x0020
      0006A1 12r00r00         [24] 1765 	lcall	_putchar
                                   1766 ;	lcdCommands.c:215: putchar ('\b');
      0006A4 90 00 08         [24] 1767 	mov	dptr,#0x0008
      0006A7 12r00r00         [24] 1768 	lcall	_putchar
      0006AA D0 05            [24] 1769 	pop	ar5
      0006AC D0 07            [24] 1770 	pop	ar7
                                   1771 ;	lcdCommands.c:216: --s;
      0006AE 90r00r11         [24] 1772 	mov	dptr,#_gets_s_65536_98
      0006B1 E0               [24] 1773 	movx	a,@dptr
      0006B2 24 FF            [12] 1774 	add	a,#0xff
      0006B4 FA               [12] 1775 	mov	r2,a
      0006B5 A3               [24] 1776 	inc	dptr
      0006B6 E0               [24] 1777 	movx	a,@dptr
      0006B7 34 FF            [12] 1778 	addc	a,#0xff
      0006B9 FB               [12] 1779 	mov	r3,a
      0006BA A3               [24] 1780 	inc	dptr
      0006BB E0               [24] 1781 	movx	a,@dptr
      0006BC FC               [12] 1782 	mov	r4,a
      0006BD 90r00r11         [24] 1783 	mov	dptr,#_gets_s_65536_98
      0006C0 EA               [12] 1784 	mov	a,r2
      0006C1 F0               [24] 1785 	movx	@dptr,a
      0006C2 EB               [12] 1786 	mov	a,r3
      0006C3 A3               [24] 1787 	inc	dptr
      0006C4 F0               [24] 1788 	movx	@dptr,a
      0006C5 EC               [12] 1789 	mov	a,r4
      0006C6 A3               [24] 1790 	inc	dptr
      0006C7 F0               [24] 1791 	movx	@dptr,a
                                   1792 ;	lcdCommands.c:217: --count;
      0006C8 1D               [12] 1793 	dec	r5
      0006C9 BD FF 01         [24] 1794 	cjne	r5,#0xff,00143$
      0006CC 1F               [12] 1795 	dec	r7
      0006CD                       1796 00143$:
      0006CD 90r00r14         [24] 1797 	mov	dptr,#_gets_count_65536_99
      0006D0 ED               [12] 1798 	mov	a,r5
      0006D1 F0               [24] 1799 	movx	@dptr,a
      0006D2 EF               [12] 1800 	mov	a,r7
      0006D3 A3               [24] 1801 	inc	dptr
      0006D4 F0               [24] 1802 	movx	@dptr,a
                                   1803 ;	lcdCommands.c:219: break;
                                   1804 ;	lcdCommands.c:222: case '\r': /* CR or LF */
      0006D5 80 60            [24] 1805 	sjmp	00107$
      0006D7                       1806 00105$:
                                   1807 ;	lcdCommands.c:223: putchar ('\r');
      0006D7 90 00 0D         [24] 1808 	mov	dptr,#0x000d
      0006DA 12r00r00         [24] 1809 	lcall	_putchar
                                   1810 ;	lcdCommands.c:224: putchar ('\n');
      0006DD 90 00 0A         [24] 1811 	mov	dptr,#0x000a
      0006E0 12r00r00         [24] 1812 	lcall	_putchar
                                   1813 ;	lcdCommands.c:225: *s = 0;
      0006E3 90r00r11         [24] 1814 	mov	dptr,#_gets_s_65536_98
      0006E6 E0               [24] 1815 	movx	a,@dptr
      0006E7 FC               [12] 1816 	mov	r4,a
      0006E8 A3               [24] 1817 	inc	dptr
      0006E9 E0               [24] 1818 	movx	a,@dptr
      0006EA FD               [12] 1819 	mov	r5,a
      0006EB A3               [24] 1820 	inc	dptr
      0006EC E0               [24] 1821 	movx	a,@dptr
      0006ED FF               [12] 1822 	mov	r7,a
      0006EE 8C 82            [24] 1823 	mov	dpl,r4
      0006F0 8D 83            [24] 1824 	mov	dph,r5
      0006F2 8F F0            [24] 1825 	mov	b,r7
      0006F4 E4               [12] 1826 	clr	a
      0006F5 12r00r00         [24] 1827 	lcall	__gptrput
                                   1828 ;	lcdCommands.c:226: return s;
      0006F8 8C 82            [24] 1829 	mov	dpl,r4
      0006FA 8D 83            [24] 1830 	mov	dph,r5
      0006FC 8F F0            [24] 1831 	mov	b,r7
                                   1832 ;	lcdCommands.c:228: default:
      0006FE 22               [24] 1833 	ret
      0006FF                       1834 00106$:
                                   1835 ;	lcdCommands.c:229: *s++ = c;
      0006FF 90r00r11         [24] 1836 	mov	dptr,#_gets_s_65536_98
      000702 E0               [24] 1837 	movx	a,@dptr
      000703 FC               [12] 1838 	mov	r4,a
      000704 A3               [24] 1839 	inc	dptr
      000705 E0               [24] 1840 	movx	a,@dptr
      000706 FD               [12] 1841 	mov	r5,a
      000707 A3               [24] 1842 	inc	dptr
      000708 E0               [24] 1843 	movx	a,@dptr
      000709 FF               [12] 1844 	mov	r7,a
      00070A 8C 82            [24] 1845 	mov	dpl,r4
      00070C 8D 83            [24] 1846 	mov	dph,r5
      00070E 8F F0            [24] 1847 	mov	b,r7
      000710 EE               [12] 1848 	mov	a,r6
      000711 12r00r00         [24] 1849 	lcall	__gptrput
      000714 90r00r11         [24] 1850 	mov	dptr,#_gets_s_65536_98
      000717 74 01            [12] 1851 	mov	a,#0x01
      000719 2C               [12] 1852 	add	a,r4
      00071A F0               [24] 1853 	movx	@dptr,a
      00071B E4               [12] 1854 	clr	a
      00071C 3D               [12] 1855 	addc	a,r5
      00071D A3               [24] 1856 	inc	dptr
      00071E F0               [24] 1857 	movx	@dptr,a
      00071F EF               [12] 1858 	mov	a,r7
      000720 A3               [24] 1859 	inc	dptr
      000721 F0               [24] 1860 	movx	@dptr,a
                                   1861 ;	lcdCommands.c:230: ++count;
      000722 90r00r14         [24] 1862 	mov	dptr,#_gets_count_65536_99
      000725 E0               [24] 1863 	movx	a,@dptr
      000726 24 01            [12] 1864 	add	a,#0x01
      000728 F0               [24] 1865 	movx	@dptr,a
      000729 A3               [24] 1866 	inc	dptr
      00072A E0               [24] 1867 	movx	a,@dptr
      00072B 34 00            [12] 1868 	addc	a,#0x00
      00072D F0               [24] 1869 	movx	@dptr,a
                                   1870 ;	lcdCommands.c:231: putchar (c);
      00072E 7F 00            [12] 1871 	mov	r7,#0x00
      000730 8E 82            [24] 1872 	mov	dpl,r6
      000732 8F 83            [24] 1873 	mov	dph,r7
      000734 12r00r00         [24] 1874 	lcall	_putchar
                                   1875 ;	lcdCommands.c:233: }
      000737                       1876 00107$:
                                   1877 ;	lcdCommands.c:234: if (count == 48)
      000737 90r00r14         [24] 1878 	mov	dptr,#_gets_count_65536_99
      00073A E0               [24] 1879 	movx	a,@dptr
      00073B FE               [12] 1880 	mov	r6,a
      00073C A3               [24] 1881 	inc	dptr
      00073D E0               [24] 1882 	movx	a,@dptr
      00073E FF               [12] 1883 	mov	r7,a
      00073F BE 30 05         [24] 1884 	cjne	r6,#0x30,00144$
      000742 BF 00 02         [24] 1885 	cjne	r7,#0x00,00144$
      000745 80 03            [24] 1886 	sjmp	00145$
      000747                       1887 00144$:
      000747 02r06r64         [24] 1888 	ljmp	00111$
      00074A                       1889 00145$:
                                   1890 ;	lcdCommands.c:236: printf("\n\rPlease Input a maximum of 48 characters\n\r");
      00074A 74r09            [12] 1891 	mov	a,#___str_9
      00074C C0 E0            [24] 1892 	push	acc
      00074E 74s03            [12] 1893 	mov	a,#(___str_9 >> 8)
      000750 C0 E0            [24] 1894 	push	acc
      000752 74 80            [12] 1895 	mov	a,#0x80
      000754 C0 E0            [24] 1896 	push	acc
      000756 12r00r00         [24] 1897 	lcall	_printf
      000759 15 81            [12] 1898 	dec	sp
      00075B 15 81            [12] 1899 	dec	sp
      00075D 15 81            [12] 1900 	dec	sp
                                   1901 ;	lcdCommands.c:237: break;
                                   1902 ;	lcdCommands.c:240: }
      00075F 22               [24] 1903 	ret
                                   1904 ;------------------------------------------------------------
                                   1905 ;Allocation info for local variables in function 'ramDump'
                                   1906 ;------------------------------------------------------------
                                   1907 ;i                         Allocated with name '_ramDump_i_65536_104'
                                   1908 ;j                         Allocated with name '_ramDump_j_65536_104'
                                   1909 ;x                         Allocated with name '_ramDump_x_196609_107'
                                   1910 ;x                         Allocated with name '_ramDump_x_196609_112'
                                   1911 ;------------------------------------------------------------
                                   1912 ;	lcdCommands.c:242: void ramDump()
                                   1913 ;	-----------------------------------------
                                   1914 ;	 function ramDump
                                   1915 ;	-----------------------------------------
      000760                       1916 _ramDump:
                                   1917 ;	lcdCommands.c:246: printf_tiny("\n\rDDRAM Contents\n\r");
      000760 74r35            [12] 1918 	mov	a,#___str_10
      000762 C0 E0            [24] 1919 	push	acc
      000764 74s03            [12] 1920 	mov	a,#(___str_10 >> 8)
      000766 C0 E0            [24] 1921 	push	acc
      000768 12r00r00         [24] 1922 	lcall	_printf_tiny
      00076B 15 81            [12] 1923 	dec	sp
      00076D 15 81            [12] 1924 	dec	sp
                                   1925 ;	lcdCommands.c:247: for (i = 0; i < 128; i += 16)      //Print 64 ASCII characters in each line
      00076F 90r00r16         [24] 1926 	mov	dptr,#_ramDump_i_65536_104
      000772 E4               [12] 1927 	clr	a
      000773 F0               [24] 1928 	movx	@dptr,a
      000774                       1929 00109$:
                                   1930 ;	lcdCommands.c:249: lcdGeneral = 0x80 | i;
      000774 90r00r16         [24] 1931 	mov	dptr,#_ramDump_i_65536_104
      000777 E0               [24] 1932 	movx	a,@dptr
      000778 FF               [12] 1933 	mov	r7,a
      000779 FD               [12] 1934 	mov	r5,a
      00077A 7E 00            [12] 1935 	mov	r6,#0x00
      00077C 90 F0 00         [24] 1936 	mov	dptr,#_lcdGeneral
      00077F 74 80            [12] 1937 	mov	a,#0x80
      000781 4D               [12] 1938 	orl	a,r5
      000782 F0               [24] 1939 	movx	@dptr,a
      000783 EE               [12] 1940 	mov	a,r6
      000784 A3               [24] 1941 	inc	dptr
      000785 F0               [24] 1942 	movx	@dptr,a
                                   1943 ;	lcdCommands.c:250: uint8_t x = readLCD();
      000786 C0 07            [24] 1944 	push	ar7
      000788 C0 06            [24] 1945 	push	ar6
      00078A C0 05            [24] 1946 	push	ar5
      00078C 12r04rD5         [24] 1947 	lcall	_readLCD
      00078F AC 82            [24] 1948 	mov	r4,dpl
      000791 D0 05            [24] 1949 	pop	ar5
      000793 D0 06            [24] 1950 	pop	ar6
                                   1951 ;	lcdCommands.c:251: printf("%2x: ",i);
      000795 C0 06            [24] 1952 	push	ar6
      000797 C0 05            [24] 1953 	push	ar5
      000799 C0 04            [24] 1954 	push	ar4
      00079B C0 05            [24] 1955 	push	ar5
      00079D C0 06            [24] 1956 	push	ar6
      00079F 74r48            [12] 1957 	mov	a,#___str_11
      0007A1 C0 E0            [24] 1958 	push	acc
      0007A3 74s03            [12] 1959 	mov	a,#(___str_11 >> 8)
      0007A5 C0 E0            [24] 1960 	push	acc
      0007A7 74 80            [12] 1961 	mov	a,#0x80
      0007A9 C0 E0            [24] 1962 	push	acc
      0007AB 12r00r00         [24] 1963 	lcall	_printf
      0007AE E5 81            [12] 1964 	mov	a,sp
      0007B0 24 FB            [12] 1965 	add	a,#0xfb
      0007B2 F5 81            [12] 1966 	mov	sp,a
      0007B4 D0 04            [24] 1967 	pop	ar4
      0007B6 D0 05            [24] 1968 	pop	ar5
      0007B8 D0 06            [24] 1969 	pop	ar6
      0007BA D0 07            [24] 1970 	pop	ar7
                                   1971 ;	lcdCommands.c:252: for (j = i; j < (i+16) && j < 128; j++)    //Print the contents of buffer in ASCII
      0007BC                       1972 00107$:
      0007BC 8F 02            [24] 1973 	mov	ar2,r7
      0007BE 7B 00            [12] 1974 	mov	r3,#0x00
      0007C0 74 10            [12] 1975 	mov	a,#0x10
      0007C2 2A               [12] 1976 	add	a,r2
      0007C3 FA               [12] 1977 	mov	r2,a
      0007C4 E4               [12] 1978 	clr	a
      0007C5 3B               [12] 1979 	addc	a,r3
      0007C6 FB               [12] 1980 	mov	r3,a
      0007C7 C3               [12] 1981 	clr	c
      0007C8 ED               [12] 1982 	mov	a,r5
      0007C9 9A               [12] 1983 	subb	a,r2
      0007CA EE               [12] 1984 	mov	a,r6
      0007CB 64 80            [12] 1985 	xrl	a,#0x80
      0007CD 8B F0            [24] 1986 	mov	b,r3
      0007CF 63 F0 80         [24] 1987 	xrl	b,#0x80
      0007D2 95 F0            [12] 1988 	subb	a,b
      0007D4 50 3F            [24] 1989 	jnc	00101$
      0007D6 C3               [12] 1990 	clr	c
      0007D7 ED               [12] 1991 	mov	a,r5
      0007D8 94 80            [12] 1992 	subb	a,#0x80
      0007DA EE               [12] 1993 	mov	a,r6
      0007DB 64 80            [12] 1994 	xrl	a,#0x80
      0007DD 94 80            [12] 1995 	subb	a,#0x80
      0007DF 50 34            [24] 1996 	jnc	00101$
                                   1997 ;	lcdCommands.c:254: printf("%2x ", x);
      0007E1 8C 02            [24] 1998 	mov	ar2,r4
      0007E3 7B 00            [12] 1999 	mov	r3,#0x00
      0007E5 C0 07            [24] 2000 	push	ar7
      0007E7 C0 06            [24] 2001 	push	ar6
      0007E9 C0 05            [24] 2002 	push	ar5
      0007EB C0 04            [24] 2003 	push	ar4
      0007ED C0 02            [24] 2004 	push	ar2
      0007EF C0 03            [24] 2005 	push	ar3
      0007F1 74r4E            [12] 2006 	mov	a,#___str_12
      0007F3 C0 E0            [24] 2007 	push	acc
      0007F5 74s03            [12] 2008 	mov	a,#(___str_12 >> 8)
      0007F7 C0 E0            [24] 2009 	push	acc
      0007F9 74 80            [12] 2010 	mov	a,#0x80
      0007FB C0 E0            [24] 2011 	push	acc
      0007FD 12r00r00         [24] 2012 	lcall	_printf
      000800 E5 81            [12] 2013 	mov	a,sp
      000802 24 FB            [12] 2014 	add	a,#0xfb
      000804 F5 81            [12] 2015 	mov	sp,a
      000806 D0 04            [24] 2016 	pop	ar4
      000808 D0 05            [24] 2017 	pop	ar5
      00080A D0 06            [24] 2018 	pop	ar6
      00080C D0 07            [24] 2019 	pop	ar7
                                   2020 ;	lcdCommands.c:252: for (j = i; j < (i+16) && j < 128; j++)    //Print the contents of buffer in ASCII
      00080E 0D               [12] 2021 	inc	r5
      00080F BD 00 AA         [24] 2022 	cjne	r5,#0x00,00107$
      000812 0E               [12] 2023 	inc	r6
      000813 80 A7            [24] 2024 	sjmp	00107$
      000815                       2025 00101$:
                                   2026 ;	lcdCommands.c:256: printf_tiny("\n\r");
      000815 74r53            [12] 2027 	mov	a,#___str_13
      000817 C0 E0            [24] 2028 	push	acc
      000819 74s03            [12] 2029 	mov	a,#(___str_13 >> 8)
      00081B C0 E0            [24] 2030 	push	acc
      00081D 12r00r00         [24] 2031 	lcall	_printf_tiny
      000820 15 81            [12] 2032 	dec	sp
      000822 15 81            [12] 2033 	dec	sp
                                   2034 ;	lcdCommands.c:247: for (i = 0; i < 128; i += 16)      //Print 64 ASCII characters in each line
      000824 90r00r16         [24] 2035 	mov	dptr,#_ramDump_i_65536_104
      000827 E0               [24] 2036 	movx	a,@dptr
      000828 24 10            [12] 2037 	add	a,#0x10
      00082A F0               [24] 2038 	movx	@dptr,a
      00082B E0               [24] 2039 	movx	a,@dptr
      00082C FF               [12] 2040 	mov	r7,a
      00082D BF 80 00         [24] 2041 	cjne	r7,#0x80,00160$
      000830                       2042 00160$:
      000830 50 03            [24] 2043 	jnc	00161$
      000832 02r07r74         [24] 2044 	ljmp	00109$
      000835                       2045 00161$:
                                   2046 ;	lcdCommands.c:258: printf_tiny("\n\rCGRAM Contents\n\r");
      000835 74r56            [12] 2047 	mov	a,#___str_14
      000837 C0 E0            [24] 2048 	push	acc
      000839 74s03            [12] 2049 	mov	a,#(___str_14 >> 8)
      00083B C0 E0            [24] 2050 	push	acc
      00083D 12r00r00         [24] 2051 	lcall	_printf_tiny
      000840 15 81            [12] 2052 	dec	sp
      000842 15 81            [12] 2053 	dec	sp
                                   2054 ;	lcdCommands.c:259: for (i = 0; i < 64; i += 16)      //Print 64 ASCII characters in each line
      000844 90r00r16         [24] 2055 	mov	dptr,#_ramDump_i_65536_104
      000847 E4               [12] 2056 	clr	a
      000848 F0               [24] 2057 	movx	@dptr,a
      000849                       2058 00115$:
                                   2059 ;	lcdCommands.c:261: lcdGeneral = 0x40 | i;
      000849 90r00r16         [24] 2060 	mov	dptr,#_ramDump_i_65536_104
      00084C E0               [24] 2061 	movx	a,@dptr
      00084D FF               [12] 2062 	mov	r7,a
      00084E FD               [12] 2063 	mov	r5,a
      00084F 7E 00            [12] 2064 	mov	r6,#0x00
      000851 90 F0 00         [24] 2065 	mov	dptr,#_lcdGeneral
      000854 74 40            [12] 2066 	mov	a,#0x40
      000856 4D               [12] 2067 	orl	a,r5
      000857 F0               [24] 2068 	movx	@dptr,a
      000858 EE               [12] 2069 	mov	a,r6
      000859 A3               [24] 2070 	inc	dptr
      00085A F0               [24] 2071 	movx	@dptr,a
                                   2072 ;	lcdCommands.c:262: uint8_t x = readLCD();
      00085B C0 07            [24] 2073 	push	ar7
      00085D C0 06            [24] 2074 	push	ar6
      00085F C0 05            [24] 2075 	push	ar5
      000861 12r04rD5         [24] 2076 	lcall	_readLCD
      000864 AC 82            [24] 2077 	mov	r4,dpl
      000866 D0 05            [24] 2078 	pop	ar5
      000868 D0 06            [24] 2079 	pop	ar6
                                   2080 ;	lcdCommands.c:263: printf("%2x: ",i);
      00086A C0 06            [24] 2081 	push	ar6
      00086C C0 05            [24] 2082 	push	ar5
      00086E C0 04            [24] 2083 	push	ar4
      000870 C0 05            [24] 2084 	push	ar5
      000872 C0 06            [24] 2085 	push	ar6
      000874 74r48            [12] 2086 	mov	a,#___str_11
      000876 C0 E0            [24] 2087 	push	acc
      000878 74s03            [12] 2088 	mov	a,#(___str_11 >> 8)
      00087A C0 E0            [24] 2089 	push	acc
      00087C 74 80            [12] 2090 	mov	a,#0x80
      00087E C0 E0            [24] 2091 	push	acc
      000880 12r00r00         [24] 2092 	lcall	_printf
      000883 E5 81            [12] 2093 	mov	a,sp
      000885 24 FB            [12] 2094 	add	a,#0xfb
      000887 F5 81            [12] 2095 	mov	sp,a
      000889 D0 04            [24] 2096 	pop	ar4
      00088B D0 05            [24] 2097 	pop	ar5
      00088D D0 06            [24] 2098 	pop	ar6
      00088F D0 07            [24] 2099 	pop	ar7
                                   2100 ;	lcdCommands.c:264: for (j = i; j < (i+16) && j < 64; j++)    //Print the contents of buffer in ASCII
      000891                       2101 00113$:
      000891 8F 02            [24] 2102 	mov	ar2,r7
      000893 7B 00            [12] 2103 	mov	r3,#0x00
      000895 74 10            [12] 2104 	mov	a,#0x10
      000897 2A               [12] 2105 	add	a,r2
      000898 FA               [12] 2106 	mov	r2,a
      000899 E4               [12] 2107 	clr	a
      00089A 3B               [12] 2108 	addc	a,r3
      00089B FB               [12] 2109 	mov	r3,a
      00089C C3               [12] 2110 	clr	c
      00089D ED               [12] 2111 	mov	a,r5
      00089E 9A               [12] 2112 	subb	a,r2
      00089F EE               [12] 2113 	mov	a,r6
      0008A0 64 80            [12] 2114 	xrl	a,#0x80
      0008A2 8B F0            [24] 2115 	mov	b,r3
      0008A4 63 F0 80         [24] 2116 	xrl	b,#0x80
      0008A7 95 F0            [12] 2117 	subb	a,b
      0008A9 50 3F            [24] 2118 	jnc	00103$
      0008AB C3               [12] 2119 	clr	c
      0008AC ED               [12] 2120 	mov	a,r5
      0008AD 94 40            [12] 2121 	subb	a,#0x40
      0008AF EE               [12] 2122 	mov	a,r6
      0008B0 64 80            [12] 2123 	xrl	a,#0x80
      0008B2 94 80            [12] 2124 	subb	a,#0x80
      0008B4 50 34            [24] 2125 	jnc	00103$
                                   2126 ;	lcdCommands.c:266: printf("%2x ", x);
      0008B6 8C 02            [24] 2127 	mov	ar2,r4
      0008B8 7B 00            [12] 2128 	mov	r3,#0x00
      0008BA C0 07            [24] 2129 	push	ar7
      0008BC C0 06            [24] 2130 	push	ar6
      0008BE C0 05            [24] 2131 	push	ar5
      0008C0 C0 04            [24] 2132 	push	ar4
      0008C2 C0 02            [24] 2133 	push	ar2
      0008C4 C0 03            [24] 2134 	push	ar3
      0008C6 74r4E            [12] 2135 	mov	a,#___str_12
      0008C8 C0 E0            [24] 2136 	push	acc
      0008CA 74s03            [12] 2137 	mov	a,#(___str_12 >> 8)
      0008CC C0 E0            [24] 2138 	push	acc
      0008CE 74 80            [12] 2139 	mov	a,#0x80
      0008D0 C0 E0            [24] 2140 	push	acc
      0008D2 12r00r00         [24] 2141 	lcall	_printf
      0008D5 E5 81            [12] 2142 	mov	a,sp
      0008D7 24 FB            [12] 2143 	add	a,#0xfb
      0008D9 F5 81            [12] 2144 	mov	sp,a
      0008DB D0 04            [24] 2145 	pop	ar4
      0008DD D0 05            [24] 2146 	pop	ar5
      0008DF D0 06            [24] 2147 	pop	ar6
      0008E1 D0 07            [24] 2148 	pop	ar7
                                   2149 ;	lcdCommands.c:264: for (j = i; j < (i+16) && j < 64; j++)    //Print the contents of buffer in ASCII
      0008E3 0D               [12] 2150 	inc	r5
      0008E4 BD 00 AA         [24] 2151 	cjne	r5,#0x00,00113$
      0008E7 0E               [12] 2152 	inc	r6
      0008E8 80 A7            [24] 2153 	sjmp	00113$
      0008EA                       2154 00103$:
                                   2155 ;	lcdCommands.c:268: printf_tiny("\n\r");
      0008EA 74r53            [12] 2156 	mov	a,#___str_13
      0008EC C0 E0            [24] 2157 	push	acc
      0008EE 74s03            [12] 2158 	mov	a,#(___str_13 >> 8)
      0008F0 C0 E0            [24] 2159 	push	acc
      0008F2 12r00r00         [24] 2160 	lcall	_printf_tiny
      0008F5 15 81            [12] 2161 	dec	sp
      0008F7 15 81            [12] 2162 	dec	sp
                                   2163 ;	lcdCommands.c:259: for (i = 0; i < 64; i += 16)      //Print 64 ASCII characters in each line
      0008F9 90r00r16         [24] 2164 	mov	dptr,#_ramDump_i_65536_104
      0008FC E0               [24] 2165 	movx	a,@dptr
      0008FD 24 10            [12] 2166 	add	a,#0x10
      0008FF F0               [24] 2167 	movx	@dptr,a
      000900 E0               [24] 2168 	movx	a,@dptr
      000901 FF               [12] 2169 	mov	r7,a
      000902 BF 40 00         [24] 2170 	cjne	r7,#0x40,00165$
      000905                       2171 00165$:
      000905 50 03            [24] 2172 	jnc	00166$
      000907 02r08r49         [24] 2173 	ljmp	00115$
      00090A                       2174 00166$:
                                   2175 ;	lcdCommands.c:270: }
      00090A 22               [24] 2176 	ret
                                   2177 ;------------------------------------------------------------
                                   2178 ;Allocation info for local variables in function 'gamePacman'
                                   2179 ;------------------------------------------------------------
                                   2180 ;ch                        Allocated with name '_gamePacman_ch_65536_115'
                                   2181 ;i                         Allocated with name '_gamePacman_i_65536_115'
                                   2182 ;------------------------------------------------------------
                                   2183 ;	lcdCommands.c:272: void gamePacman()
                                   2184 ;	-----------------------------------------
                                   2185 ;	 function gamePacman
                                   2186 ;	-----------------------------------------
      00090B                       2187 _gamePacman:
                                   2188 ;	lcdCommands.c:275: int i = 1;
      00090B 90r00r17         [24] 2189 	mov	dptr,#_gamePacman_i_65536_115
      00090E 74 01            [12] 2190 	mov	a,#0x01
      000910 F0               [24] 2191 	movx	@dptr,a
      000911 E4               [12] 2192 	clr	a
      000912 A3               [24] 2193 	inc	dptr
      000913 F0               [24] 2194 	movx	@dptr,a
                                   2195 ;	lcdCommands.c:276: makePacmanRight();
      000914 12r0Br77         [24] 2196 	lcall	_makePacmanRight
                                   2197 ;	lcdCommands.c:277: makePacmanLeft();
      000917 12r0Cr5D         [24] 2198 	lcall	_makePacmanLeft
                                   2199 ;	lcdCommands.c:278: goToAddr(lookUpTable[0][4]);
      00091A 90r01rF8         [24] 2200 	mov	dptr,#(_lookUpTable + 0x0004)
      00091D E4               [12] 2201 	clr	a
      00091E 93               [24] 2202 	movc	a,@a+dptr
      00091F F5 82            [12] 2203 	mov	dpl,a
      000921 12r00rAD         [24] 2204 	lcall	_goToAddr
                                   2205 ;	lcdCommands.c:279: lcdPutCh('*');
      000924 75 82 2A         [24] 2206 	mov	dpl,#0x2a
      000927 12r00r8B         [24] 2207 	lcall	_lcdPutCh
                                   2208 ;	lcdCommands.c:280: goToAddr(lookUpTable[0][5]);
      00092A 90r01rF9         [24] 2209 	mov	dptr,#(_lookUpTable + 0x0005)
      00092D E4               [12] 2210 	clr	a
      00092E 93               [24] 2211 	movc	a,@a+dptr
      00092F F5 82            [12] 2212 	mov	dpl,a
      000931 12r00rAD         [24] 2213 	lcall	_goToAddr
                                   2214 ;	lcdCommands.c:281: lcdPutCh('*');
      000934 75 82 2A         [24] 2215 	mov	dpl,#0x2a
      000937 12r00r8B         [24] 2216 	lcall	_lcdPutCh
                                   2217 ;	lcdCommands.c:282: goToAddr(lookUpTable[0][8]);
      00093A 90r01rFC         [24] 2218 	mov	dptr,#(_lookUpTable + 0x0008)
      00093D E4               [12] 2219 	clr	a
      00093E 93               [24] 2220 	movc	a,@a+dptr
      00093F F5 82            [12] 2221 	mov	dpl,a
      000941 12r00rAD         [24] 2222 	lcall	_goToAddr
                                   2223 ;	lcdCommands.c:283: lcdPutCh('*');
      000944 75 82 2A         [24] 2224 	mov	dpl,#0x2a
      000947 12r00r8B         [24] 2225 	lcall	_lcdPutCh
                                   2226 ;	lcdCommands.c:284: goToAddr(lookUpTable[0][9]);
      00094A 90r01rFD         [24] 2227 	mov	dptr,#(_lookUpTable + 0x0009)
      00094D E4               [12] 2228 	clr	a
      00094E 93               [24] 2229 	movc	a,@a+dptr
      00094F F5 82            [12] 2230 	mov	dpl,a
      000951 12r00rAD         [24] 2231 	lcall	_goToAddr
                                   2232 ;	lcdCommands.c:285: lcdPutCh('*');
      000954 75 82 2A         [24] 2233 	mov	dpl,#0x2a
      000957 12r00r8B         [24] 2234 	lcall	_lcdPutCh
                                   2235 ;	lcdCommands.c:286: goToAddr(lookUpTable[0][12]);
      00095A 90r02r00         [24] 2236 	mov	dptr,#(_lookUpTable + 0x000c)
      00095D E4               [12] 2237 	clr	a
      00095E 93               [24] 2238 	movc	a,@a+dptr
      00095F F5 82            [12] 2239 	mov	dpl,a
      000961 12r00rAD         [24] 2240 	lcall	_goToAddr
                                   2241 ;	lcdCommands.c:287: lcdPutCh('*');
      000964 75 82 2A         [24] 2242 	mov	dpl,#0x2a
      000967 12r00r8B         [24] 2243 	lcall	_lcdPutCh
                                   2244 ;	lcdCommands.c:288: goToAddr(lookUpTable[0][13]);
      00096A 90r02r01         [24] 2245 	mov	dptr,#(_lookUpTable + 0x000d)
      00096D E4               [12] 2246 	clr	a
      00096E 93               [24] 2247 	movc	a,@a+dptr
      00096F F5 82            [12] 2248 	mov	dpl,a
      000971 12r00rAD         [24] 2249 	lcall	_goToAddr
                                   2250 ;	lcdCommands.c:289: lcdPutCh('*');
      000974 75 82 2A         [24] 2251 	mov	dpl,#0x2a
      000977 12r00r8B         [24] 2252 	lcall	_lcdPutCh
                                   2253 ;	lcdCommands.c:290: goToAddr(lookUpTable[0][14]);
      00097A 90r02r02         [24] 2254 	mov	dptr,#(_lookUpTable + 0x000e)
      00097D E4               [12] 2255 	clr	a
      00097E 93               [24] 2256 	movc	a,@a+dptr
      00097F F5 82            [12] 2257 	mov	dpl,a
      000981 12r00rAD         [24] 2258 	lcall	_goToAddr
                                   2259 ;	lcdCommands.c:291: lcdPutCh('*');
      000984 75 82 2A         [24] 2260 	mov	dpl,#0x2a
      000987 12r00r8B         [24] 2261 	lcall	_lcdPutCh
                                   2262 ;	lcdCommands.c:292: goToAddr(lookUpTable[1][1]);
      00098A 90r02r05         [24] 2263 	mov	dptr,#(_lookUpTable + 0x0011)
      00098D E4               [12] 2264 	clr	a
      00098E 93               [24] 2265 	movc	a,@a+dptr
      00098F F5 82            [12] 2266 	mov	dpl,a
      000991 12r00rAD         [24] 2267 	lcall	_goToAddr
                                   2268 ;	lcdCommands.c:293: lcdPutCh('*');
      000994 75 82 2A         [24] 2269 	mov	dpl,#0x2a
      000997 12r00r8B         [24] 2270 	lcall	_lcdPutCh
                                   2271 ;	lcdCommands.c:294: goToAddr(lookUpTable[1][2]);
      00099A 90r02r06         [24] 2272 	mov	dptr,#(_lookUpTable + 0x0012)
      00099D E4               [12] 2273 	clr	a
      00099E 93               [24] 2274 	movc	a,@a+dptr
      00099F F5 82            [12] 2275 	mov	dpl,a
      0009A1 12r00rAD         [24] 2276 	lcall	_goToAddr
                                   2277 ;	lcdCommands.c:295: lcdPutCh('*');
      0009A4 75 82 2A         [24] 2278 	mov	dpl,#0x2a
      0009A7 12r00r8B         [24] 2279 	lcall	_lcdPutCh
                                   2280 ;	lcdCommands.c:296: goToAddr(lookUpTable[1][3]);
      0009AA 90r02r07         [24] 2281 	mov	dptr,#(_lookUpTable + 0x0013)
      0009AD E4               [12] 2282 	clr	a
      0009AE 93               [24] 2283 	movc	a,@a+dptr
      0009AF F5 82            [12] 2284 	mov	dpl,a
      0009B1 12r00rAD         [24] 2285 	lcall	_goToAddr
                                   2286 ;	lcdCommands.c:297: lcdPutCh('*');
      0009B4 75 82 2A         [24] 2287 	mov	dpl,#0x2a
      0009B7 12r00r8B         [24] 2288 	lcall	_lcdPutCh
                                   2289 ;	lcdCommands.c:298: goToAddr(lookUpTable[1][12]);
      0009BA 90r02r10         [24] 2290 	mov	dptr,#(_lookUpTable + 0x001c)
      0009BD E4               [12] 2291 	clr	a
      0009BE 93               [24] 2292 	movc	a,@a+dptr
      0009BF F5 82            [12] 2293 	mov	dpl,a
      0009C1 12r00rAD         [24] 2294 	lcall	_goToAddr
                                   2295 ;	lcdCommands.c:299: lcdPutCh('*');
      0009C4 75 82 2A         [24] 2296 	mov	dpl,#0x2a
      0009C7 12r00r8B         [24] 2297 	lcall	_lcdPutCh
                                   2298 ;	lcdCommands.c:300: goToAddr(lookUpTable[1][13]);
      0009CA 90r02r11         [24] 2299 	mov	dptr,#(_lookUpTable + 0x001d)
      0009CD E4               [12] 2300 	clr	a
      0009CE 93               [24] 2301 	movc	a,@a+dptr
      0009CF F5 82            [12] 2302 	mov	dpl,a
      0009D1 12r00rAD         [24] 2303 	lcall	_goToAddr
                                   2304 ;	lcdCommands.c:301: lcdPutCh('*');
      0009D4 75 82 2A         [24] 2305 	mov	dpl,#0x2a
      0009D7 12r00r8B         [24] 2306 	lcall	_lcdPutCh
                                   2307 ;	lcdCommands.c:302: printf_tiny("\n\rEnter w to go up, s to go down, a to go left and d to go right and q to quit\n\r");
      0009DA 74r69            [12] 2308 	mov	a,#___str_15
      0009DC C0 E0            [24] 2309 	push	acc
      0009DE 74s03            [12] 2310 	mov	a,#(___str_15 >> 8)
      0009E0 C0 E0            [24] 2311 	push	acc
      0009E2 12r00r00         [24] 2312 	lcall	_printf_tiny
      0009E5 15 81            [12] 2313 	dec	sp
      0009E7 15 81            [12] 2314 	dec	sp
                                   2315 ;	lcdCommands.c:303: do{
      0009E9                       2316 00109$:
                                   2317 ;	lcdCommands.c:304: ch = getchar();
      0009E9 12r00r00         [24] 2318 	lcall	_getchar
      0009EC AE 82            [24] 2319 	mov	r6,dpl
      0009EE AF 83            [24] 2320 	mov	r7,dph
                                   2321 ;	lcdCommands.c:305: if(ch == 'd')
      0009F0 BE 64 02         [24] 2322 	cjne	r6,#0x64,00134$
      0009F3 80 03            [24] 2323 	sjmp	00135$
      0009F5                       2324 00134$:
      0009F5 02r0Ar99         [24] 2325 	ljmp	00104$
      0009F8                       2326 00135$:
                                   2327 ;	lcdCommands.c:307: putchar(7);
      0009F8 90 00 07         [24] 2328 	mov	dptr,#0x0007
      0009FB C0 06            [24] 2329 	push	ar6
      0009FD 12r00r00         [24] 2330 	lcall	_putchar
      000A00 D0 06            [24] 2331 	pop	ar6
                                   2332 ;	lcdCommands.c:308: goToAddr(lookUpTable[0][i-1]);
      000A02 90r00r17         [24] 2333 	mov	dptr,#_gamePacman_i_65536_115
      000A05 E0               [24] 2334 	movx	a,@dptr
      000A06 FD               [12] 2335 	mov	r5,a
      000A07 A3               [24] 2336 	inc	dptr
      000A08 E0               [24] 2337 	movx	a,@dptr
      000A09 FF               [12] 2338 	mov	r7,a
      000A0A 8D 04            [24] 2339 	mov	ar4,r5
      000A0C EC               [12] 2340 	mov	a,r4
      000A0D 14               [12] 2341 	dec	a
      000A0E 90r01rF4         [24] 2342 	mov	dptr,#_lookUpTable
      000A11 93               [24] 2343 	movc	a,@a+dptr
      000A12 F5 82            [12] 2344 	mov	dpl,a
      000A14 C0 07            [24] 2345 	push	ar7
      000A16 C0 06            [24] 2346 	push	ar6
      000A18 C0 05            [24] 2347 	push	ar5
      000A1A 12r00rAD         [24] 2348 	lcall	_goToAddr
                                   2349 ;	lcdCommands.c:309: busyWait();
      000A1D 12r00r1E         [24] 2350 	lcall	_busyWait
                                   2351 ;	lcdCommands.c:310: lcdPutCh(' ');
      000A20 75 82 20         [24] 2352 	mov	dpl,#0x20
      000A23 12r00r8B         [24] 2353 	lcall	_lcdPutCh
                                   2354 ;	lcdCommands.c:311: busyWait();
      000A26 12r00r1E         [24] 2355 	lcall	_busyWait
      000A29 D0 05            [24] 2356 	pop	ar5
      000A2B D0 06            [24] 2357 	pop	ar6
      000A2D D0 07            [24] 2358 	pop	ar7
                                   2359 ;	lcdCommands.c:312: lcdGeneral = 0x80 | (lookUpTable[0][i]);
      000A2F ED               [12] 2360 	mov	a,r5
      000A30 24rF4            [12] 2361 	add	a,#_lookUpTable
      000A32 F5 82            [12] 2362 	mov	dpl,a
      000A34 EF               [12] 2363 	mov	a,r7
      000A35 34s01            [12] 2364 	addc	a,#(_lookUpTable >> 8)
      000A37 F5 83            [12] 2365 	mov	dph,a
      000A39 E4               [12] 2366 	clr	a
      000A3A 93               [24] 2367 	movc	a,@a+dptr
      000A3B FC               [12] 2368 	mov	r4,a
      000A3C 7B 00            [12] 2369 	mov	r3,#0x00
      000A3E 90 F0 00         [24] 2370 	mov	dptr,#_lcdGeneral
      000A41 74 80            [12] 2371 	mov	a,#0x80
      000A43 4C               [12] 2372 	orl	a,r4
      000A44 F0               [24] 2373 	movx	@dptr,a
      000A45 EB               [12] 2374 	mov	a,r3
      000A46 A3               [24] 2375 	inc	dptr
      000A47 F0               [24] 2376 	movx	@dptr,a
                                   2377 ;	lcdCommands.c:313: busyWait();
      000A48 C0 07            [24] 2378 	push	ar7
      000A4A C0 06            [24] 2379 	push	ar6
      000A4C C0 05            [24] 2380 	push	ar5
      000A4E 12r00r1E         [24] 2381 	lcall	_busyWait
                                   2382 ;	lcdCommands.c:314: writeCharacter = 0x00;
      000A51 90 F1 00         [24] 2383 	mov	dptr,#_writeCharacter
      000A54 E4               [12] 2384 	clr	a
      000A55 F0               [24] 2385 	movx	@dptr,a
      000A56 A3               [24] 2386 	inc	dptr
      000A57 F0               [24] 2387 	movx	@dptr,a
                                   2388 ;	lcdCommands.c:315: busyWait();
      000A58 12r00r1E         [24] 2389 	lcall	_busyWait
      000A5B D0 05            [24] 2390 	pop	ar5
      000A5D D0 06            [24] 2391 	pop	ar6
      000A5F D0 07            [24] 2392 	pop	ar7
                                   2393 ;	lcdCommands.c:316: if(i >= 47)
      000A61 C3               [12] 2394 	clr	c
      000A62 ED               [12] 2395 	mov	a,r5
      000A63 94 2F            [12] 2396 	subb	a,#0x2f
      000A65 EF               [12] 2397 	mov	a,r7
      000A66 64 80            [12] 2398 	xrl	a,#0x80
      000A68 94 80            [12] 2399 	subb	a,#0x80
      000A6A 40 21            [24] 2400 	jc	00102$
                                   2401 ;	lcdCommands.c:318: goToAddr(lookUpTable[2][15]);
      000A6C 90r02r23         [24] 2402 	mov	dptr,#(_lookUpTable + 0x002f)
      000A6F E4               [12] 2403 	clr	a
      000A70 93               [24] 2404 	movc	a,@a+dptr
      000A71 F5 82            [12] 2405 	mov	dpl,a
      000A73 C0 06            [24] 2406 	push	ar6
      000A75 12r00rAD         [24] 2407 	lcall	_goToAddr
                                   2408 ;	lcdCommands.c:319: busyWait();
      000A78 12r00r1E         [24] 2409 	lcall	_busyWait
                                   2410 ;	lcdCommands.c:320: lcdPutCh(' ');
      000A7B 75 82 20         [24] 2411 	mov	dpl,#0x20
      000A7E 12r00r8B         [24] 2412 	lcall	_lcdPutCh
                                   2413 ;	lcdCommands.c:321: busyWait();
      000A81 12r00r1E         [24] 2414 	lcall	_busyWait
      000A84 D0 06            [24] 2415 	pop	ar6
                                   2416 ;	lcdCommands.c:322: i = 0;
      000A86 90r00r17         [24] 2417 	mov	dptr,#_gamePacman_i_65536_115
      000A89 E4               [12] 2418 	clr	a
      000A8A F0               [24] 2419 	movx	@dptr,a
      000A8B A3               [24] 2420 	inc	dptr
      000A8C F0               [24] 2421 	movx	@dptr,a
      000A8D                       2422 00102$:
                                   2423 ;	lcdCommands.c:324: i++;
      000A8D 90r00r17         [24] 2424 	mov	dptr,#_gamePacman_i_65536_115
      000A90 E0               [24] 2425 	movx	a,@dptr
      000A91 24 01            [12] 2426 	add	a,#0x01
      000A93 F0               [24] 2427 	movx	@dptr,a
      000A94 A3               [24] 2428 	inc	dptr
      000A95 E0               [24] 2429 	movx	a,@dptr
      000A96 34 00            [12] 2430 	addc	a,#0x00
      000A98 F0               [24] 2431 	movx	@dptr,a
      000A99                       2432 00104$:
                                   2433 ;	lcdCommands.c:326: i--;
      000A99 90r00r17         [24] 2434 	mov	dptr,#_gamePacman_i_65536_115
      000A9C E0               [24] 2435 	movx	a,@dptr
      000A9D 24 FF            [12] 2436 	add	a,#0xff
      000A9F FD               [12] 2437 	mov	r5,a
      000AA0 A3               [24] 2438 	inc	dptr
      000AA1 E0               [24] 2439 	movx	a,@dptr
      000AA2 34 FF            [12] 2440 	addc	a,#0xff
      000AA4 FF               [12] 2441 	mov	r7,a
      000AA5 90r00r17         [24] 2442 	mov	dptr,#_gamePacman_i_65536_115
      000AA8 ED               [12] 2443 	mov	a,r5
      000AA9 F0               [24] 2444 	movx	@dptr,a
      000AAA EF               [12] 2445 	mov	a,r7
      000AAB A3               [24] 2446 	inc	dptr
      000AAC F0               [24] 2447 	movx	@dptr,a
                                   2448 ;	lcdCommands.c:328: if(ch == 'a')
      000AAD BE 61 02         [24] 2449 	cjne	r6,#0x61,00137$
      000AB0 80 03            [24] 2450 	sjmp	00138$
      000AB2                       2451 00137$:
      000AB2 02r0Br63         [24] 2452 	ljmp	00108$
      000AB5                       2453 00138$:
                                   2454 ;	lcdCommands.c:330: putchar(7);
      000AB5 90 00 07         [24] 2455 	mov	dptr,#0x0007
      000AB8 C0 06            [24] 2456 	push	ar6
      000ABA 12r00r00         [24] 2457 	lcall	_putchar
      000ABD D0 06            [24] 2458 	pop	ar6
                                   2459 ;	lcdCommands.c:331: goToAddr(lookUpTable[0][i+1]);
      000ABF 90r00r17         [24] 2460 	mov	dptr,#_gamePacman_i_65536_115
      000AC2 E0               [24] 2461 	movx	a,@dptr
      000AC3 FD               [12] 2462 	mov	r5,a
      000AC4 A3               [24] 2463 	inc	dptr
      000AC5 E0               [24] 2464 	movx	a,@dptr
      000AC6 FF               [12] 2465 	mov	r7,a
      000AC7 8D 04            [24] 2466 	mov	ar4,r5
      000AC9 EC               [12] 2467 	mov	a,r4
      000ACA 04               [12] 2468 	inc	a
      000ACB 90r01rF4         [24] 2469 	mov	dptr,#_lookUpTable
      000ACE 93               [24] 2470 	movc	a,@a+dptr
      000ACF F5 82            [12] 2471 	mov	dpl,a
      000AD1 C0 07            [24] 2472 	push	ar7
      000AD3 C0 06            [24] 2473 	push	ar6
      000AD5 C0 05            [24] 2474 	push	ar5
      000AD7 12r00rAD         [24] 2475 	lcall	_goToAddr
                                   2476 ;	lcdCommands.c:332: busyWait();
      000ADA 12r00r1E         [24] 2477 	lcall	_busyWait
                                   2478 ;	lcdCommands.c:333: lcdPutCh(' ');
      000ADD 75 82 20         [24] 2479 	mov	dpl,#0x20
      000AE0 12r00r8B         [24] 2480 	lcall	_lcdPutCh
                                   2481 ;	lcdCommands.c:334: busyWait();
      000AE3 12r00r1E         [24] 2482 	lcall	_busyWait
      000AE6 D0 05            [24] 2483 	pop	ar5
      000AE8 D0 06            [24] 2484 	pop	ar6
      000AEA D0 07            [24] 2485 	pop	ar7
                                   2486 ;	lcdCommands.c:335: lcdGeneral = 0x80 | (lookUpTable[0][i]);
      000AEC ED               [12] 2487 	mov	a,r5
      000AED 24rF4            [12] 2488 	add	a,#_lookUpTable
      000AEF F5 82            [12] 2489 	mov	dpl,a
      000AF1 EF               [12] 2490 	mov	a,r7
      000AF2 34s01            [12] 2491 	addc	a,#(_lookUpTable >> 8)
      000AF4 F5 83            [12] 2492 	mov	dph,a
      000AF6 E4               [12] 2493 	clr	a
      000AF7 93               [24] 2494 	movc	a,@a+dptr
      000AF8 FC               [12] 2495 	mov	r4,a
      000AF9 7B 00            [12] 2496 	mov	r3,#0x00
      000AFB 90 F0 00         [24] 2497 	mov	dptr,#_lcdGeneral
      000AFE 74 80            [12] 2498 	mov	a,#0x80
      000B00 4C               [12] 2499 	orl	a,r4
      000B01 F0               [24] 2500 	movx	@dptr,a
      000B02 EB               [12] 2501 	mov	a,r3
      000B03 A3               [24] 2502 	inc	dptr
      000B04 F0               [24] 2503 	movx	@dptr,a
                                   2504 ;	lcdCommands.c:336: busyWait();
      000B05 C0 07            [24] 2505 	push	ar7
      000B07 C0 06            [24] 2506 	push	ar6
      000B09 C0 05            [24] 2507 	push	ar5
      000B0B 12r00r1E         [24] 2508 	lcall	_busyWait
                                   2509 ;	lcdCommands.c:337: writeCharacter = 0x00;
      000B0E 90 F1 00         [24] 2510 	mov	dptr,#_writeCharacter
      000B11 E4               [12] 2511 	clr	a
      000B12 F0               [24] 2512 	movx	@dptr,a
      000B13 A3               [24] 2513 	inc	dptr
      000B14 F0               [24] 2514 	movx	@dptr,a
                                   2515 ;	lcdCommands.c:338: busyWait();
      000B15 12r00r1E         [24] 2516 	lcall	_busyWait
      000B18 D0 05            [24] 2517 	pop	ar5
      000B1A D0 06            [24] 2518 	pop	ar6
      000B1C D0 07            [24] 2519 	pop	ar7
                                   2520 ;	lcdCommands.c:339: if( i <= 0)
      000B1E C3               [12] 2521 	clr	c
      000B1F E4               [12] 2522 	clr	a
      000B20 9D               [12] 2523 	subb	a,r5
      000B21 74 80            [12] 2524 	mov	a,#(0x00 ^ 0x80)
      000B23 8F F0            [24] 2525 	mov	b,r7
      000B25 63 F0 80         [24] 2526 	xrl	b,#0x80
      000B28 95 F0            [12] 2527 	subb	a,b
      000B2A 40 23            [24] 2528 	jc	00106$
                                   2529 ;	lcdCommands.c:341: goToAddr(lookUpTable[0][0]);
      000B2C 90r01rF4         [24] 2530 	mov	dptr,#_lookUpTable
      000B2F E4               [12] 2531 	clr	a
      000B30 93               [24] 2532 	movc	a,@a+dptr
      000B31 F5 82            [12] 2533 	mov	dpl,a
      000B33 C0 06            [24] 2534 	push	ar6
      000B35 12r00rAD         [24] 2535 	lcall	_goToAddr
                                   2536 ;	lcdCommands.c:342: busyWait();
      000B38 12r00r1E         [24] 2537 	lcall	_busyWait
                                   2538 ;	lcdCommands.c:343: lcdPutCh(' ');
      000B3B 75 82 20         [24] 2539 	mov	dpl,#0x20
      000B3E 12r00r8B         [24] 2540 	lcall	_lcdPutCh
                                   2541 ;	lcdCommands.c:344: busyWait();
      000B41 12r00r1E         [24] 2542 	lcall	_busyWait
      000B44 D0 06            [24] 2543 	pop	ar6
                                   2544 ;	lcdCommands.c:345: i = 47;
      000B46 90r00r17         [24] 2545 	mov	dptr,#_gamePacman_i_65536_115
      000B49 74 2F            [12] 2546 	mov	a,#0x2f
      000B4B F0               [24] 2547 	movx	@dptr,a
      000B4C E4               [12] 2548 	clr	a
      000B4D A3               [24] 2549 	inc	dptr
      000B4E F0               [24] 2550 	movx	@dptr,a
      000B4F                       2551 00106$:
                                   2552 ;	lcdCommands.c:347: i--;
      000B4F 90r00r17         [24] 2553 	mov	dptr,#_gamePacman_i_65536_115
      000B52 E0               [24] 2554 	movx	a,@dptr
      000B53 24 FF            [12] 2555 	add	a,#0xff
      000B55 FD               [12] 2556 	mov	r5,a
      000B56 A3               [24] 2557 	inc	dptr
      000B57 E0               [24] 2558 	movx	a,@dptr
      000B58 34 FF            [12] 2559 	addc	a,#0xff
      000B5A FF               [12] 2560 	mov	r7,a
      000B5B 90r00r17         [24] 2561 	mov	dptr,#_gamePacman_i_65536_115
      000B5E ED               [12] 2562 	mov	a,r5
      000B5F F0               [24] 2563 	movx	@dptr,a
      000B60 EF               [12] 2564 	mov	a,r7
      000B61 A3               [24] 2565 	inc	dptr
      000B62 F0               [24] 2566 	movx	@dptr,a
      000B63                       2567 00108$:
                                   2568 ;	lcdCommands.c:349: i++;
      000B63 90r00r17         [24] 2569 	mov	dptr,#_gamePacman_i_65536_115
      000B66 E0               [24] 2570 	movx	a,@dptr
      000B67 24 01            [12] 2571 	add	a,#0x01
      000B69 F0               [24] 2572 	movx	@dptr,a
      000B6A A3               [24] 2573 	inc	dptr
      000B6B E0               [24] 2574 	movx	a,@dptr
      000B6C 34 00            [12] 2575 	addc	a,#0x00
      000B6E F0               [24] 2576 	movx	@dptr,a
                                   2577 ;	lcdCommands.c:350: }while(ch != 'q');
      000B6F BE 71 01         [24] 2578 	cjne	r6,#0x71,00140$
      000B72 22               [24] 2579 	ret
      000B73                       2580 00140$:
      000B73 02r09rE9         [24] 2581 	ljmp	00109$
                                   2582 ;	lcdCommands.c:351: }
      000B76 22               [24] 2583 	ret
                                   2584 ;------------------------------------------------------------
                                   2585 ;Allocation info for local variables in function 'makePacmanRight'
                                   2586 ;------------------------------------------------------------
                                   2587 ;	lcdCommands.c:353: void makePacmanRight()
                                   2588 ;	-----------------------------------------
                                   2589 ;	 function makePacmanRight
                                   2590 ;	-----------------------------------------
      000B77                       2591 _makePacmanRight:
                                   2592 ;	lcdCommands.c:355: busyWait();
      000B77 12r00r1E         [24] 2593 	lcall	_busyWait
                                   2594 ;	lcdCommands.c:356: lcdGeneral = 0x40 | 0x00;
      000B7A 90 F0 00         [24] 2595 	mov	dptr,#_lcdGeneral
      000B7D 74 40            [12] 2596 	mov	a,#0x40
      000B7F F0               [24] 2597 	movx	@dptr,a
      000B80 E4               [12] 2598 	clr	a
      000B81 A3               [24] 2599 	inc	dptr
      000B82 F0               [24] 2600 	movx	@dptr,a
                                   2601 ;	lcdCommands.c:357: busyWait();
      000B83 12r00r1E         [24] 2602 	lcall	_busyWait
                                   2603 ;	lcdCommands.c:358: writeCharacter = 0x06;
      000B86 90 F1 00         [24] 2604 	mov	dptr,#_writeCharacter
      000B89 74 06            [12] 2605 	mov	a,#0x06
      000B8B F0               [24] 2606 	movx	@dptr,a
      000B8C E4               [12] 2607 	clr	a
      000B8D A3               [24] 2608 	inc	dptr
      000B8E F0               [24] 2609 	movx	@dptr,a
                                   2610 ;	lcdCommands.c:359: busyWait();
      000B8F 12r00r1E         [24] 2611 	lcall	_busyWait
                                   2612 ;	lcdCommands.c:360: lcdGeneral = 0x40 | 0x01;
      000B92 90 F0 00         [24] 2613 	mov	dptr,#_lcdGeneral
      000B95 74 41            [12] 2614 	mov	a,#0x41
      000B97 F0               [24] 2615 	movx	@dptr,a
      000B98 E4               [12] 2616 	clr	a
      000B99 A3               [24] 2617 	inc	dptr
      000B9A F0               [24] 2618 	movx	@dptr,a
                                   2619 ;	lcdCommands.c:361: busyWait();
      000B9B 12r00r1E         [24] 2620 	lcall	_busyWait
                                   2621 ;	lcdCommands.c:362: writeCharacter = 0x09;
      000B9E 90 F1 00         [24] 2622 	mov	dptr,#_writeCharacter
      000BA1 74 09            [12] 2623 	mov	a,#0x09
      000BA3 F0               [24] 2624 	movx	@dptr,a
      000BA4 E4               [12] 2625 	clr	a
      000BA5 A3               [24] 2626 	inc	dptr
      000BA6 F0               [24] 2627 	movx	@dptr,a
                                   2628 ;	lcdCommands.c:363: busyWait();
      000BA7 12r00r1E         [24] 2629 	lcall	_busyWait
                                   2630 ;	lcdCommands.c:364: lcdGeneral = 0x40 | 0x02;
      000BAA 90 F0 00         [24] 2631 	mov	dptr,#_lcdGeneral
      000BAD 74 42            [12] 2632 	mov	a,#0x42
      000BAF F0               [24] 2633 	movx	@dptr,a
      000BB0 E4               [12] 2634 	clr	a
      000BB1 A3               [24] 2635 	inc	dptr
      000BB2 F0               [24] 2636 	movx	@dptr,a
                                   2637 ;	lcdCommands.c:365: busyWait();
      000BB3 12r00r1E         [24] 2638 	lcall	_busyWait
                                   2639 ;	lcdCommands.c:366: writeCharacter = 0x12;
      000BB6 90 F1 00         [24] 2640 	mov	dptr,#_writeCharacter
      000BB9 74 12            [12] 2641 	mov	a,#0x12
      000BBB F0               [24] 2642 	movx	@dptr,a
      000BBC E4               [12] 2643 	clr	a
      000BBD A3               [24] 2644 	inc	dptr
      000BBE F0               [24] 2645 	movx	@dptr,a
                                   2646 ;	lcdCommands.c:367: busyWait();
      000BBF 12r00r1E         [24] 2647 	lcall	_busyWait
                                   2648 ;	lcdCommands.c:368: lcdGeneral = 0x40 | 0x03;
      000BC2 90 F0 00         [24] 2649 	mov	dptr,#_lcdGeneral
      000BC5 74 43            [12] 2650 	mov	a,#0x43
      000BC7 F0               [24] 2651 	movx	@dptr,a
      000BC8 E4               [12] 2652 	clr	a
      000BC9 A3               [24] 2653 	inc	dptr
      000BCA F0               [24] 2654 	movx	@dptr,a
                                   2655 ;	lcdCommands.c:369: busyWait();
      000BCB 12r00r1E         [24] 2656 	lcall	_busyWait
                                   2657 ;	lcdCommands.c:370: writeCharacter = 0x14;
      000BCE 90 F1 00         [24] 2658 	mov	dptr,#_writeCharacter
      000BD1 74 14            [12] 2659 	mov	a,#0x14
      000BD3 F0               [24] 2660 	movx	@dptr,a
      000BD4 E4               [12] 2661 	clr	a
      000BD5 A3               [24] 2662 	inc	dptr
      000BD6 F0               [24] 2663 	movx	@dptr,a
                                   2664 ;	lcdCommands.c:371: busyWait();
      000BD7 12r00r1E         [24] 2665 	lcall	_busyWait
                                   2666 ;	lcdCommands.c:372: lcdGeneral = 0x40 | 0x04;
      000BDA 90 F0 00         [24] 2667 	mov	dptr,#_lcdGeneral
      000BDD 74 44            [12] 2668 	mov	a,#0x44
      000BDF F0               [24] 2669 	movx	@dptr,a
      000BE0 E4               [12] 2670 	clr	a
      000BE1 A3               [24] 2671 	inc	dptr
      000BE2 F0               [24] 2672 	movx	@dptr,a
                                   2673 ;	lcdCommands.c:373: busyWait();
      000BE3 12r00r1E         [24] 2674 	lcall	_busyWait
                                   2675 ;	lcdCommands.c:374: writeCharacter = 0x14;
      000BE6 90 F1 00         [24] 2676 	mov	dptr,#_writeCharacter
      000BE9 74 14            [12] 2677 	mov	a,#0x14
      000BEB F0               [24] 2678 	movx	@dptr,a
      000BEC E4               [12] 2679 	clr	a
      000BED A3               [24] 2680 	inc	dptr
      000BEE F0               [24] 2681 	movx	@dptr,a
                                   2682 ;	lcdCommands.c:375: busyWait();
      000BEF 12r00r1E         [24] 2683 	lcall	_busyWait
                                   2684 ;	lcdCommands.c:376: lcdGeneral = 0x40 | 0x05;
      000BF2 90 F0 00         [24] 2685 	mov	dptr,#_lcdGeneral
      000BF5 74 45            [12] 2686 	mov	a,#0x45
      000BF7 F0               [24] 2687 	movx	@dptr,a
      000BF8 E4               [12] 2688 	clr	a
      000BF9 A3               [24] 2689 	inc	dptr
      000BFA F0               [24] 2690 	movx	@dptr,a
                                   2691 ;	lcdCommands.c:377: busyWait();
      000BFB 12r00r1E         [24] 2692 	lcall	_busyWait
                                   2693 ;	lcdCommands.c:378: writeCharacter = 0x12;
      000BFE 90 F1 00         [24] 2694 	mov	dptr,#_writeCharacter
      000C01 74 12            [12] 2695 	mov	a,#0x12
      000C03 F0               [24] 2696 	movx	@dptr,a
      000C04 E4               [12] 2697 	clr	a
      000C05 A3               [24] 2698 	inc	dptr
      000C06 F0               [24] 2699 	movx	@dptr,a
                                   2700 ;	lcdCommands.c:379: busyWait();
      000C07 12r00r1E         [24] 2701 	lcall	_busyWait
                                   2702 ;	lcdCommands.c:380: lcdGeneral = 0x40 | 0x06;
      000C0A 90 F0 00         [24] 2703 	mov	dptr,#_lcdGeneral
      000C0D 74 46            [12] 2704 	mov	a,#0x46
      000C0F F0               [24] 2705 	movx	@dptr,a
      000C10 E4               [12] 2706 	clr	a
      000C11 A3               [24] 2707 	inc	dptr
      000C12 F0               [24] 2708 	movx	@dptr,a
                                   2709 ;	lcdCommands.c:381: busyWait();
      000C13 12r00r1E         [24] 2710 	lcall	_busyWait
                                   2711 ;	lcdCommands.c:382: writeCharacter = 0x09;
      000C16 90 F1 00         [24] 2712 	mov	dptr,#_writeCharacter
      000C19 74 09            [12] 2713 	mov	a,#0x09
      000C1B F0               [24] 2714 	movx	@dptr,a
      000C1C E4               [12] 2715 	clr	a
      000C1D A3               [24] 2716 	inc	dptr
      000C1E F0               [24] 2717 	movx	@dptr,a
                                   2718 ;	lcdCommands.c:383: busyWait();
      000C1F 12r00r1E         [24] 2719 	lcall	_busyWait
                                   2720 ;	lcdCommands.c:384: lcdGeneral = 0x40 | 0x07;
      000C22 90 F0 00         [24] 2721 	mov	dptr,#_lcdGeneral
      000C25 74 47            [12] 2722 	mov	a,#0x47
      000C27 F0               [24] 2723 	movx	@dptr,a
      000C28 E4               [12] 2724 	clr	a
      000C29 A3               [24] 2725 	inc	dptr
      000C2A F0               [24] 2726 	movx	@dptr,a
                                   2727 ;	lcdCommands.c:385: busyWait();
      000C2B 12r00r1E         [24] 2728 	lcall	_busyWait
                                   2729 ;	lcdCommands.c:386: writeCharacter = 0x06;
      000C2E 90 F1 00         [24] 2730 	mov	dptr,#_writeCharacter
      000C31 74 06            [12] 2731 	mov	a,#0x06
      000C33 F0               [24] 2732 	movx	@dptr,a
      000C34 E4               [12] 2733 	clr	a
      000C35 A3               [24] 2734 	inc	dptr
      000C36 F0               [24] 2735 	movx	@dptr,a
                                   2736 ;	lcdCommands.c:387: busyWait();
      000C37 12r00r1E         [24] 2737 	lcall	_busyWait
                                   2738 ;	lcdCommands.c:388: goToXY(3,1);
      000C3A 90r00r02         [24] 2739 	mov	dptr,#_goToXY_PARM_2
      000C3D 74 01            [12] 2740 	mov	a,#0x01
      000C3F F0               [24] 2741 	movx	@dptr,a
      000C40 75 82 03         [24] 2742 	mov	dpl,#0x03
      000C43 12r00rC8         [24] 2743 	lcall	_goToXY
                                   2744 ;	lcdCommands.c:389: busyWait();
      000C46 12r00r1E         [24] 2745 	lcall	_busyWait
                                   2746 ;	lcdCommands.c:390: lcdGeneral = 0x80 | 0x00;
      000C49 90 F0 00         [24] 2747 	mov	dptr,#_lcdGeneral
      000C4C 74 80            [12] 2748 	mov	a,#0x80
      000C4E F0               [24] 2749 	movx	@dptr,a
      000C4F E4               [12] 2750 	clr	a
      000C50 A3               [24] 2751 	inc	dptr
      000C51 F0               [24] 2752 	movx	@dptr,a
                                   2753 ;	lcdCommands.c:391: busyWait();
      000C52 12r00r1E         [24] 2754 	lcall	_busyWait
                                   2755 ;	lcdCommands.c:392: writeCharacter = 0x00;
      000C55 90 F1 00         [24] 2756 	mov	dptr,#_writeCharacter
      000C58 E4               [12] 2757 	clr	a
      000C59 F0               [24] 2758 	movx	@dptr,a
      000C5A A3               [24] 2759 	inc	dptr
      000C5B F0               [24] 2760 	movx	@dptr,a
                                   2761 ;	lcdCommands.c:393: }
      000C5C 22               [24] 2762 	ret
                                   2763 ;------------------------------------------------------------
                                   2764 ;Allocation info for local variables in function 'makePacmanLeft'
                                   2765 ;------------------------------------------------------------
                                   2766 ;	lcdCommands.c:394: void makePacmanLeft()
                                   2767 ;	-----------------------------------------
                                   2768 ;	 function makePacmanLeft
                                   2769 ;	-----------------------------------------
      000C5D                       2770 _makePacmanLeft:
                                   2771 ;	lcdCommands.c:396: busyWait();
      000C5D 12r00r1E         [24] 2772 	lcall	_busyWait
                                   2773 ;	lcdCommands.c:397: lcdGeneral = 0x40 | 0x30;
      000C60 90 F0 00         [24] 2774 	mov	dptr,#_lcdGeneral
      000C63 74 70            [12] 2775 	mov	a,#0x70
      000C65 F0               [24] 2776 	movx	@dptr,a
      000C66 E4               [12] 2777 	clr	a
      000C67 A3               [24] 2778 	inc	dptr
      000C68 F0               [24] 2779 	movx	@dptr,a
                                   2780 ;	lcdCommands.c:398: busyWait();
      000C69 12r00r1E         [24] 2781 	lcall	_busyWait
                                   2782 ;	lcdCommands.c:399: writeCharacter = 0x0C;
      000C6C 90 F1 00         [24] 2783 	mov	dptr,#_writeCharacter
      000C6F 74 0C            [12] 2784 	mov	a,#0x0c
      000C71 F0               [24] 2785 	movx	@dptr,a
      000C72 E4               [12] 2786 	clr	a
      000C73 A3               [24] 2787 	inc	dptr
      000C74 F0               [24] 2788 	movx	@dptr,a
                                   2789 ;	lcdCommands.c:400: busyWait();
      000C75 12r00r1E         [24] 2790 	lcall	_busyWait
                                   2791 ;	lcdCommands.c:401: lcdGeneral = 0x40 | 0x31;
      000C78 90 F0 00         [24] 2792 	mov	dptr,#_lcdGeneral
      000C7B 74 71            [12] 2793 	mov	a,#0x71
      000C7D F0               [24] 2794 	movx	@dptr,a
      000C7E E4               [12] 2795 	clr	a
      000C7F A3               [24] 2796 	inc	dptr
      000C80 F0               [24] 2797 	movx	@dptr,a
                                   2798 ;	lcdCommands.c:402: busyWait();
      000C81 12r00r1E         [24] 2799 	lcall	_busyWait
                                   2800 ;	lcdCommands.c:403: writeCharacter = 0x12;
      000C84 90 F1 00         [24] 2801 	mov	dptr,#_writeCharacter
      000C87 74 12            [12] 2802 	mov	a,#0x12
      000C89 F0               [24] 2803 	movx	@dptr,a
      000C8A E4               [12] 2804 	clr	a
      000C8B A3               [24] 2805 	inc	dptr
      000C8C F0               [24] 2806 	movx	@dptr,a
                                   2807 ;	lcdCommands.c:404: busyWait();
      000C8D 12r00r1E         [24] 2808 	lcall	_busyWait
                                   2809 ;	lcdCommands.c:405: lcdGeneral = 0x40 | 0x32;
      000C90 90 F0 00         [24] 2810 	mov	dptr,#_lcdGeneral
      000C93 74 72            [12] 2811 	mov	a,#0x72
      000C95 F0               [24] 2812 	movx	@dptr,a
      000C96 E4               [12] 2813 	clr	a
      000C97 A3               [24] 2814 	inc	dptr
      000C98 F0               [24] 2815 	movx	@dptr,a
                                   2816 ;	lcdCommands.c:406: busyWait();
      000C99 12r00r1E         [24] 2817 	lcall	_busyWait
                                   2818 ;	lcdCommands.c:407: writeCharacter = 0x09;
      000C9C 90 F1 00         [24] 2819 	mov	dptr,#_writeCharacter
      000C9F 74 09            [12] 2820 	mov	a,#0x09
      000CA1 F0               [24] 2821 	movx	@dptr,a
      000CA2 E4               [12] 2822 	clr	a
      000CA3 A3               [24] 2823 	inc	dptr
      000CA4 F0               [24] 2824 	movx	@dptr,a
                                   2825 ;	lcdCommands.c:408: busyWait();
      000CA5 12r00r1E         [24] 2826 	lcall	_busyWait
                                   2827 ;	lcdCommands.c:409: lcdGeneral = 0x40 | 0x33;
      000CA8 90 F0 00         [24] 2828 	mov	dptr,#_lcdGeneral
      000CAB 74 73            [12] 2829 	mov	a,#0x73
      000CAD F0               [24] 2830 	movx	@dptr,a
      000CAE E4               [12] 2831 	clr	a
      000CAF A3               [24] 2832 	inc	dptr
      000CB0 F0               [24] 2833 	movx	@dptr,a
                                   2834 ;	lcdCommands.c:410: busyWait();
      000CB1 12r00r1E         [24] 2835 	lcall	_busyWait
                                   2836 ;	lcdCommands.c:411: writeCharacter = 0x05;
      000CB4 90 F1 00         [24] 2837 	mov	dptr,#_writeCharacter
      000CB7 74 05            [12] 2838 	mov	a,#0x05
      000CB9 F0               [24] 2839 	movx	@dptr,a
      000CBA E4               [12] 2840 	clr	a
      000CBB A3               [24] 2841 	inc	dptr
      000CBC F0               [24] 2842 	movx	@dptr,a
                                   2843 ;	lcdCommands.c:412: busyWait();
      000CBD 12r00r1E         [24] 2844 	lcall	_busyWait
                                   2845 ;	lcdCommands.c:413: lcdGeneral = 0x40 | 0x34;
      000CC0 90 F0 00         [24] 2846 	mov	dptr,#_lcdGeneral
      000CC3 74 74            [12] 2847 	mov	a,#0x74
      000CC5 F0               [24] 2848 	movx	@dptr,a
      000CC6 E4               [12] 2849 	clr	a
      000CC7 A3               [24] 2850 	inc	dptr
      000CC8 F0               [24] 2851 	movx	@dptr,a
                                   2852 ;	lcdCommands.c:414: busyWait();
      000CC9 12r00r1E         [24] 2853 	lcall	_busyWait
                                   2854 ;	lcdCommands.c:415: writeCharacter = 0x05;
      000CCC 90 F1 00         [24] 2855 	mov	dptr,#_writeCharacter
      000CCF 74 05            [12] 2856 	mov	a,#0x05
      000CD1 F0               [24] 2857 	movx	@dptr,a
      000CD2 E4               [12] 2858 	clr	a
      000CD3 A3               [24] 2859 	inc	dptr
      000CD4 F0               [24] 2860 	movx	@dptr,a
                                   2861 ;	lcdCommands.c:416: busyWait();
      000CD5 12r00r1E         [24] 2862 	lcall	_busyWait
                                   2863 ;	lcdCommands.c:417: lcdGeneral = 0x40 | 0x35;
      000CD8 90 F0 00         [24] 2864 	mov	dptr,#_lcdGeneral
      000CDB 74 75            [12] 2865 	mov	a,#0x75
      000CDD F0               [24] 2866 	movx	@dptr,a
      000CDE E4               [12] 2867 	clr	a
      000CDF A3               [24] 2868 	inc	dptr
      000CE0 F0               [24] 2869 	movx	@dptr,a
                                   2870 ;	lcdCommands.c:418: busyWait();
      000CE1 12r00r1E         [24] 2871 	lcall	_busyWait
                                   2872 ;	lcdCommands.c:419: writeCharacter = 0x09;
      000CE4 90 F1 00         [24] 2873 	mov	dptr,#_writeCharacter
      000CE7 74 09            [12] 2874 	mov	a,#0x09
      000CE9 F0               [24] 2875 	movx	@dptr,a
      000CEA E4               [12] 2876 	clr	a
      000CEB A3               [24] 2877 	inc	dptr
      000CEC F0               [24] 2878 	movx	@dptr,a
                                   2879 ;	lcdCommands.c:420: busyWait();
      000CED 12r00r1E         [24] 2880 	lcall	_busyWait
                                   2881 ;	lcdCommands.c:421: lcdGeneral = 0x40 | 0x36;
      000CF0 90 F0 00         [24] 2882 	mov	dptr,#_lcdGeneral
      000CF3 74 76            [12] 2883 	mov	a,#0x76
      000CF5 F0               [24] 2884 	movx	@dptr,a
      000CF6 E4               [12] 2885 	clr	a
      000CF7 A3               [24] 2886 	inc	dptr
      000CF8 F0               [24] 2887 	movx	@dptr,a
                                   2888 ;	lcdCommands.c:422: busyWait();
      000CF9 12r00r1E         [24] 2889 	lcall	_busyWait
                                   2890 ;	lcdCommands.c:423: writeCharacter = 0x12;
      000CFC 90 F1 00         [24] 2891 	mov	dptr,#_writeCharacter
      000CFF 74 12            [12] 2892 	mov	a,#0x12
      000D01 F0               [24] 2893 	movx	@dptr,a
      000D02 E4               [12] 2894 	clr	a
      000D03 A3               [24] 2895 	inc	dptr
      000D04 F0               [24] 2896 	movx	@dptr,a
                                   2897 ;	lcdCommands.c:424: busyWait();
      000D05 12r00r1E         [24] 2898 	lcall	_busyWait
                                   2899 ;	lcdCommands.c:425: lcdGeneral = 0x40 | 0x37;
      000D08 90 F0 00         [24] 2900 	mov	dptr,#_lcdGeneral
      000D0B 74 77            [12] 2901 	mov	a,#0x77
      000D0D F0               [24] 2902 	movx	@dptr,a
      000D0E E4               [12] 2903 	clr	a
      000D0F A3               [24] 2904 	inc	dptr
      000D10 F0               [24] 2905 	movx	@dptr,a
                                   2906 ;	lcdCommands.c:426: busyWait();
      000D11 12r00r1E         [24] 2907 	lcall	_busyWait
                                   2908 ;	lcdCommands.c:427: writeCharacter = 0x0C;
      000D14 90 F1 00         [24] 2909 	mov	dptr,#_writeCharacter
      000D17 74 0C            [12] 2910 	mov	a,#0x0c
      000D19 F0               [24] 2911 	movx	@dptr,a
      000D1A E4               [12] 2912 	clr	a
      000D1B A3               [24] 2913 	inc	dptr
      000D1C F0               [24] 2914 	movx	@dptr,a
                                   2915 ;	lcdCommands.c:428: busyWait();
      000D1D 12r00r1E         [24] 2916 	lcall	_busyWait
                                   2917 ;	lcdCommands.c:429: goToXY(3,1);
      000D20 90r00r02         [24] 2918 	mov	dptr,#_goToXY_PARM_2
      000D23 74 01            [12] 2919 	mov	a,#0x01
      000D25 F0               [24] 2920 	movx	@dptr,a
      000D26 75 82 03         [24] 2921 	mov	dpl,#0x03
      000D29 12r00rC8         [24] 2922 	lcall	_goToXY
                                   2923 ;	lcdCommands.c:430: busyWait();
      000D2C 12r00r1E         [24] 2924 	lcall	_busyWait
                                   2925 ;	lcdCommands.c:432: busyWait();
                                   2926 ;	lcdCommands.c:434: }
      000D2F 02r00r1E         [24] 2927 	ljmp	_busyWait
                                   2928 ;------------------------------------------------------------
                                   2929 ;Allocation info for local variables in function 'printBinary'
                                   2930 ;------------------------------------------------------------
                                   2931 ;x                         Allocated with name '_printBinary_x_65536_123'
                                   2932 ;temp2                     Allocated with name '_printBinary_temp2_65536_124'
                                   2933 ;------------------------------------------------------------
                                   2934 ;	lcdCommands.c:436: void printBinary(int x)
                                   2935 ;	-----------------------------------------
                                   2936 ;	 function printBinary
                                   2937 ;	-----------------------------------------
      000D32                       2938 _printBinary:
      000D32 AF 83            [24] 2939 	mov	r7,dph
      000D34 E5 82            [12] 2940 	mov	a,dpl
      000D36 90r00r19         [24] 2941 	mov	dptr,#_printBinary_x_65536_123
      000D39 F0               [24] 2942 	movx	@dptr,a
      000D3A EF               [12] 2943 	mov	a,r7
      000D3B A3               [24] 2944 	inc	dptr
      000D3C F0               [24] 2945 	movx	@dptr,a
                                   2946 ;	lcdCommands.c:439: while(x != 0)
      000D3D                       2947 00101$:
      000D3D 90r00r19         [24] 2948 	mov	dptr,#_printBinary_x_65536_123
      000D40 E0               [24] 2949 	movx	a,@dptr
      000D41 FE               [12] 2950 	mov	r6,a
      000D42 A3               [24] 2951 	inc	dptr
      000D43 E0               [24] 2952 	movx	a,@dptr
      000D44 FF               [12] 2953 	mov	r7,a
      000D45 4E               [12] 2954 	orl	a,r6
      000D46 60 3A            [24] 2955 	jz	00104$
                                   2956 ;	lcdCommands.c:441: temp2 = x % 2;
      000D48 90r00r00         [24] 2957 	mov	dptr,#__modsint_PARM_2
      000D4B 74 02            [12] 2958 	mov	a,#0x02
      000D4D F0               [24] 2959 	movx	@dptr,a
      000D4E E4               [12] 2960 	clr	a
      000D4F A3               [24] 2961 	inc	dptr
      000D50 F0               [24] 2962 	movx	@dptr,a
                                   2963 ;	lcdCommands.c:442: putchar(temp2);
      000D51 8E 82            [24] 2964 	mov	dpl,r6
      000D53 8F 83            [24] 2965 	mov	dph,r7
      000D55 C0 07            [24] 2966 	push	ar7
      000D57 C0 06            [24] 2967 	push	ar6
      000D59 12r00r00         [24] 2968 	lcall	__modsint
      000D5C 12r00r00         [24] 2969 	lcall	_putchar
      000D5F D0 06            [24] 2970 	pop	ar6
      000D61 D0 07            [24] 2971 	pop	ar7
                                   2972 ;	lcdCommands.c:443: x = x / 2;
      000D63 90r00r00         [24] 2973 	mov	dptr,#__divsint_PARM_2
      000D66 74 02            [12] 2974 	mov	a,#0x02
      000D68 F0               [24] 2975 	movx	@dptr,a
      000D69 E4               [12] 2976 	clr	a
      000D6A A3               [24] 2977 	inc	dptr
      000D6B F0               [24] 2978 	movx	@dptr,a
      000D6C 8E 82            [24] 2979 	mov	dpl,r6
      000D6E 8F 83            [24] 2980 	mov	dph,r7
      000D70 12r00r00         [24] 2981 	lcall	__divsint
      000D73 E5 82            [12] 2982 	mov	a,dpl
      000D75 85 83 F0         [24] 2983 	mov	b,dph
      000D78 90r00r19         [24] 2984 	mov	dptr,#_printBinary_x_65536_123
      000D7B F0               [24] 2985 	movx	@dptr,a
      000D7C E5 F0            [12] 2986 	mov	a,b
      000D7E A3               [24] 2987 	inc	dptr
      000D7F F0               [24] 2988 	movx	@dptr,a
      000D80 80 BB            [24] 2989 	sjmp	00101$
      000D82                       2990 00104$:
                                   2991 ;	lcdCommands.c:445: }
      000D82 22               [24] 2992 	ret
                                   2993 ;------------------------------------------------------------
                                   2994 ;Allocation info for local variables in function 'atoh'
                                   2995 ;------------------------------------------------------------
                                   2996 ;ap                        Allocated with name '_atoh_ap_65536_126'
                                   2997 ;p                         Allocated with name '_atoh_p_65536_127'
                                   2998 ;n                         Allocated with name '_atoh_n_65536_127'
                                   2999 ;digit                     Allocated with name '_atoh_digit_65536_127'
                                   3000 ;lcase                     Allocated with name '_atoh_lcase_65536_127'
                                   3001 ;------------------------------------------------------------
                                   3002 ;	lcdCommands.c:447: int atoh(char *ap)
                                   3003 ;	-----------------------------------------
                                   3004 ;	 function atoh
                                   3005 ;	-----------------------------------------
      000D83                       3006 _atoh:
      000D83 AF F0            [24] 3007 	mov	r7,b
      000D85 AE 83            [24] 3008 	mov	r6,dph
      000D87 E5 82            [12] 3009 	mov	a,dpl
      000D89 90r00r1B         [24] 3010 	mov	dptr,#_atoh_ap_65536_126
      000D8C F0               [24] 3011 	movx	@dptr,a
      000D8D EE               [12] 3012 	mov	a,r6
      000D8E A3               [24] 3013 	inc	dptr
      000D8F F0               [24] 3014 	movx	@dptr,a
      000D90 EF               [12] 3015 	mov	a,r7
      000D91 A3               [24] 3016 	inc	dptr
      000D92 F0               [24] 3017 	movx	@dptr,a
                                   3018 ;	lcdCommands.c:453: p = ap;
      000D93 90r00r1B         [24] 3019 	mov	dptr,#_atoh_ap_65536_126
      000D96 E0               [24] 3020 	movx	a,@dptr
      000D97 FD               [12] 3021 	mov	r5,a
      000D98 A3               [24] 3022 	inc	dptr
      000D99 E0               [24] 3023 	movx	a,@dptr
      000D9A FE               [12] 3024 	mov	r6,a
      000D9B A3               [24] 3025 	inc	dptr
      000D9C E0               [24] 3026 	movx	a,@dptr
      000D9D FF               [12] 3027 	mov	r7,a
                                   3028 ;	lcdCommands.c:454: n = 0;
      000D9E 90r00r21         [24] 3029 	mov	dptr,#_atoh_n_65536_127
      000DA1 E4               [12] 3030 	clr	a
      000DA2 F0               [24] 3031 	movx	@dptr,a
      000DA3 A3               [24] 3032 	inc	dptr
      000DA4 F0               [24] 3033 	movx	@dptr,a
                                   3034 ;	lcdCommands.c:455: while(*p == ' ' || *p == '	')
      000DA5                       3035 00102$:
      000DA5 8D 82            [24] 3036 	mov	dpl,r5
      000DA7 8E 83            [24] 3037 	mov	dph,r6
      000DA9 8F F0            [24] 3038 	mov	b,r7
      000DAB 12r00r00         [24] 3039 	lcall	__gptrget
      000DAE FC               [12] 3040 	mov	r4,a
      000DAF BC 20 02         [24] 3041 	cjne	r4,#0x20,00178$
      000DB2 80 03            [24] 3042 	sjmp	00103$
      000DB4                       3043 00178$:
      000DB4 BC 09 07         [24] 3044 	cjne	r4,#0x09,00141$
      000DB7                       3045 00103$:
                                   3046 ;	lcdCommands.c:456: p++;
      000DB7 0D               [12] 3047 	inc	r5
      000DB8 BD 00 EA         [24] 3048 	cjne	r5,#0x00,00102$
      000DBB 0E               [12] 3049 	inc	r6
      000DBC 80 E7            [24] 3050 	sjmp	00102$
      000DBE                       3051 00141$:
      000DBE 90r00r1E         [24] 3052 	mov	dptr,#_atoh_p_65536_127
      000DC1 ED               [12] 3053 	mov	a,r5
      000DC2 F0               [24] 3054 	movx	@dptr,a
      000DC3 EE               [12] 3055 	mov	a,r6
      000DC4 A3               [24] 3056 	inc	dptr
      000DC5 F0               [24] 3057 	movx	@dptr,a
      000DC6 EF               [12] 3058 	mov	a,r7
      000DC7 A3               [24] 3059 	inc	dptr
      000DC8 F0               [24] 3060 	movx	@dptr,a
                                   3061 ;	lcdCommands.c:458: if(*p == '0' && ((*(p+1) == 'x') || (*(p+1) == 'X')))
      000DC9 BC 30 29         [24] 3062 	cjne	r4,#0x30,00118$
      000DCC 74 01            [12] 3063 	mov	a,#0x01
      000DCE 2D               [12] 3064 	add	a,r5
      000DCF FA               [12] 3065 	mov	r2,a
      000DD0 E4               [12] 3066 	clr	a
      000DD1 3E               [12] 3067 	addc	a,r6
      000DD2 FB               [12] 3068 	mov	r3,a
      000DD3 8F 04            [24] 3069 	mov	ar4,r7
      000DD5 8A 82            [24] 3070 	mov	dpl,r2
      000DD7 8B 83            [24] 3071 	mov	dph,r3
      000DD9 8C F0            [24] 3072 	mov	b,r4
      000DDB 12r00r00         [24] 3073 	lcall	__gptrget
      000DDE FC               [12] 3074 	mov	r4,a
      000DDF BC 78 02         [24] 3075 	cjne	r4,#0x78,00184$
      000DE2 80 03            [24] 3076 	sjmp	00105$
      000DE4                       3077 00184$:
      000DE4 BC 58 0E         [24] 3078 	cjne	r4,#0x58,00118$
      000DE7                       3079 00105$:
                                   3080 ;	lcdCommands.c:459: p+=2;
      000DE7 90r00r1E         [24] 3081 	mov	dptr,#_atoh_p_65536_127
      000DEA 74 02            [12] 3082 	mov	a,#0x02
      000DEC 2D               [12] 3083 	add	a,r5
      000DED F0               [24] 3084 	movx	@dptr,a
      000DEE E4               [12] 3085 	clr	a
      000DEF 3E               [12] 3086 	addc	a,r6
      000DF0 A3               [24] 3087 	inc	dptr
      000DF1 F0               [24] 3088 	movx	@dptr,a
      000DF2 EF               [12] 3089 	mov	a,r7
      000DF3 A3               [24] 3090 	inc	dptr
      000DF4 F0               [24] 3091 	movx	@dptr,a
                                   3092 ;	lcdCommands.c:461: while ((digit = (*p >= '0' && *p <= '9')) ||
      000DF5                       3093 00118$:
      000DF5 90r00r1E         [24] 3094 	mov	dptr,#_atoh_p_65536_127
      000DF8 E0               [24] 3095 	movx	a,@dptr
      000DF9 FD               [12] 3096 	mov	r5,a
      000DFA A3               [24] 3097 	inc	dptr
      000DFB E0               [24] 3098 	movx	a,@dptr
      000DFC FE               [12] 3099 	mov	r6,a
      000DFD A3               [24] 3100 	inc	dptr
      000DFE E0               [24] 3101 	movx	a,@dptr
      000DFF FF               [12] 3102 	mov	r7,a
      000E00 8D 82            [24] 3103 	mov	dpl,r5
      000E02 8E 83            [24] 3104 	mov	dph,r6
      000E04 8F F0            [24] 3105 	mov	b,r7
      000E06 12r00r00         [24] 3106 	lcall	__gptrget
      000E09 FF               [12] 3107 	mov	r7,a
      000E0A BF 30 00         [24] 3108 	cjne	r7,#0x30,00187$
      000E0D                       3109 00187$:
      000E0D 40 05            [24] 3110 	jc	00123$
      000E0F EF               [12] 3111 	mov	a,r7
      000E10 24 C6            [12] 3112 	add	a,#0xff - 0x39
      000E12 50 04            [24] 3113 	jnc	00124$
      000E14                       3114 00123$:
      000E14 7F 00            [12] 3115 	mov	r7,#0x00
      000E16 80 02            [24] 3116 	sjmp	00125$
      000E18                       3117 00124$:
      000E18 7F 01            [12] 3118 	mov	r7,#0x01
      000E1A                       3119 00125$:
      000E1A EF               [12] 3120 	mov	a,r7
      000E1B FD               [12] 3121 	mov	r5,a
      000E1C 33               [12] 3122 	rlc	a
      000E1D 95 E0            [12] 3123 	subb	a,acc
      000E1F FE               [12] 3124 	mov	r6,a
      000E20 EF               [12] 3125 	mov	a,r7
      000E21 70 5C            [24] 3126 	jnz	00119$
                                   3127 ;	lcdCommands.c:462: (lcase = (*p >= 'a' && *p <= 'f')) ||
      000E23 90r00r1E         [24] 3128 	mov	dptr,#_atoh_p_65536_127
      000E26 E0               [24] 3129 	movx	a,@dptr
      000E27 FB               [12] 3130 	mov	r3,a
      000E28 A3               [24] 3131 	inc	dptr
      000E29 E0               [24] 3132 	movx	a,@dptr
      000E2A FC               [12] 3133 	mov	r4,a
      000E2B A3               [24] 3134 	inc	dptr
      000E2C E0               [24] 3135 	movx	a,@dptr
      000E2D FF               [12] 3136 	mov	r7,a
      000E2E 8B 82            [24] 3137 	mov	dpl,r3
      000E30 8C 83            [24] 3138 	mov	dph,r4
      000E32 8F F0            [24] 3139 	mov	b,r7
      000E34 12r00r00         [24] 3140 	lcall	__gptrget
      000E37 FF               [12] 3141 	mov	r7,a
      000E38 BF 61 00         [24] 3142 	cjne	r7,#0x61,00191$
      000E3B                       3143 00191$:
      000E3B 40 05            [24] 3144 	jc	00126$
      000E3D EF               [12] 3145 	mov	a,r7
      000E3E 24 99            [12] 3146 	add	a,#0xff - 0x66
      000E40 50 04            [24] 3147 	jnc	00127$
      000E42                       3148 00126$:
      000E42 7F 00            [12] 3149 	mov	r7,#0x00
      000E44 80 02            [24] 3150 	sjmp	00128$
      000E46                       3151 00127$:
      000E46 7F 01            [12] 3152 	mov	r7,#0x01
      000E48                       3153 00128$:
      000E48 EF               [12] 3154 	mov	a,r7
      000E49 FC               [12] 3155 	mov	r4,a
      000E4A 33               [12] 3156 	rlc	a
      000E4B 95 E0            [12] 3157 	subb	a,acc
      000E4D FF               [12] 3158 	mov	r7,a
      000E4E 90r00r23         [24] 3159 	mov	dptr,#_atoh_lcase_65536_127
      000E51 EC               [12] 3160 	mov	a,r4
      000E52 F0               [24] 3161 	movx	@dptr,a
      000E53 EF               [12] 3162 	mov	a,r7
      000E54 A3               [24] 3163 	inc	dptr
      000E55 F0               [24] 3164 	movx	@dptr,a
      000E56 EC               [12] 3165 	mov	a,r4
      000E57 4F               [12] 3166 	orl	a,r7
      000E58 70 25            [24] 3167 	jnz	00119$
                                   3168 ;	lcdCommands.c:463: (*p >= 'A' && *p <= 'F')) {
      000E5A 90r00r1E         [24] 3169 	mov	dptr,#_atoh_p_65536_127
      000E5D E0               [24] 3170 	movx	a,@dptr
      000E5E FB               [12] 3171 	mov	r3,a
      000E5F A3               [24] 3172 	inc	dptr
      000E60 E0               [24] 3173 	movx	a,@dptr
      000E61 FC               [12] 3174 	mov	r4,a
      000E62 A3               [24] 3175 	inc	dptr
      000E63 E0               [24] 3176 	movx	a,@dptr
      000E64 FF               [12] 3177 	mov	r7,a
      000E65 8B 82            [24] 3178 	mov	dpl,r3
      000E67 8C 83            [24] 3179 	mov	dph,r4
      000E69 8F F0            [24] 3180 	mov	b,r7
      000E6B 12r00r00         [24] 3181 	lcall	__gptrget
      000E6E FF               [12] 3182 	mov	r7,a
      000E6F BF 41 00         [24] 3183 	cjne	r7,#0x41,00195$
      000E72                       3184 00195$:
      000E72 50 03            [24] 3185 	jnc	00196$
      000E74 02r0Fr71         [24] 3186 	ljmp	00120$
      000E77                       3187 00196$:
      000E77 EF               [12] 3188 	mov	a,r7
      000E78 24 B9            [12] 3189 	add	a,#0xff - 0x46
      000E7A 50 03            [24] 3190 	jnc	00197$
      000E7C 02r0Fr71         [24] 3191 	ljmp	00120$
      000E7F                       3192 00197$:
      000E7F                       3193 00119$:
                                   3194 ;	lcdCommands.c:464: n *= 16;
      000E7F 90r00r21         [24] 3195 	mov	dptr,#_atoh_n_65536_127
      000E82 E0               [24] 3196 	movx	a,@dptr
      000E83 FC               [12] 3197 	mov	r4,a
      000E84 A3               [24] 3198 	inc	dptr
      000E85 E0               [24] 3199 	movx	a,@dptr
      000E86 C4               [12] 3200 	swap	a
      000E87 54 F0            [12] 3201 	anl	a,#0xf0
      000E89 CC               [12] 3202 	xch	a,r4
      000E8A C4               [12] 3203 	swap	a
      000E8B CC               [12] 3204 	xch	a,r4
      000E8C 6C               [12] 3205 	xrl	a,r4
      000E8D CC               [12] 3206 	xch	a,r4
      000E8E 54 F0            [12] 3207 	anl	a,#0xf0
      000E90 CC               [12] 3208 	xch	a,r4
      000E91 6C               [12] 3209 	xrl	a,r4
      000E92 FF               [12] 3210 	mov	r7,a
      000E93 90r00r21         [24] 3211 	mov	dptr,#_atoh_n_65536_127
      000E96 EC               [12] 3212 	mov	a,r4
      000E97 F0               [24] 3213 	movx	@dptr,a
      000E98 EF               [12] 3214 	mov	a,r7
      000E99 A3               [24] 3215 	inc	dptr
      000E9A F0               [24] 3216 	movx	@dptr,a
                                   3217 ;	lcdCommands.c:465: if (digit)	n += *p++ - '0';
      000E9B ED               [12] 3218 	mov	a,r5
      000E9C 4E               [12] 3219 	orl	a,r6
      000E9D 60 42            [24] 3220 	jz	00113$
      000E9F 90r00r1E         [24] 3221 	mov	dptr,#_atoh_p_65536_127
      000EA2 E0               [24] 3222 	movx	a,@dptr
      000EA3 FD               [12] 3223 	mov	r5,a
      000EA4 A3               [24] 3224 	inc	dptr
      000EA5 E0               [24] 3225 	movx	a,@dptr
      000EA6 FE               [12] 3226 	mov	r6,a
      000EA7 A3               [24] 3227 	inc	dptr
      000EA8 E0               [24] 3228 	movx	a,@dptr
      000EA9 FF               [12] 3229 	mov	r7,a
      000EAA 8D 82            [24] 3230 	mov	dpl,r5
      000EAC 8E 83            [24] 3231 	mov	dph,r6
      000EAE 8F F0            [24] 3232 	mov	b,r7
      000EB0 12r00r00         [24] 3233 	lcall	__gptrget
      000EB3 FC               [12] 3234 	mov	r4,a
      000EB4 90r00r1E         [24] 3235 	mov	dptr,#_atoh_p_65536_127
      000EB7 74 01            [12] 3236 	mov	a,#0x01
      000EB9 2D               [12] 3237 	add	a,r5
      000EBA F0               [24] 3238 	movx	@dptr,a
      000EBB E4               [12] 3239 	clr	a
      000EBC 3E               [12] 3240 	addc	a,r6
      000EBD A3               [24] 3241 	inc	dptr
      000EBE F0               [24] 3242 	movx	@dptr,a
      000EBF EF               [12] 3243 	mov	a,r7
      000EC0 A3               [24] 3244 	inc	dptr
      000EC1 F0               [24] 3245 	movx	@dptr,a
      000EC2 7F 00            [12] 3246 	mov	r7,#0x00
      000EC4 EC               [12] 3247 	mov	a,r4
      000EC5 24 D0            [12] 3248 	add	a,#0xd0
      000EC7 FC               [12] 3249 	mov	r4,a
      000EC8 EF               [12] 3250 	mov	a,r7
      000EC9 34 FF            [12] 3251 	addc	a,#0xff
      000ECB FF               [12] 3252 	mov	r7,a
      000ECC 90r00r21         [24] 3253 	mov	dptr,#_atoh_n_65536_127
      000ECF E0               [24] 3254 	movx	a,@dptr
      000ED0 FD               [12] 3255 	mov	r5,a
      000ED1 A3               [24] 3256 	inc	dptr
      000ED2 E0               [24] 3257 	movx	a,@dptr
      000ED3 FE               [12] 3258 	mov	r6,a
      000ED4 90r00r21         [24] 3259 	mov	dptr,#_atoh_n_65536_127
      000ED7 EC               [12] 3260 	mov	a,r4
      000ED8 2D               [12] 3261 	add	a,r5
      000ED9 F0               [24] 3262 	movx	@dptr,a
      000EDA EF               [12] 3263 	mov	a,r7
      000EDB 3E               [12] 3264 	addc	a,r6
      000EDC A3               [24] 3265 	inc	dptr
      000EDD F0               [24] 3266 	movx	@dptr,a
      000EDE 02r0DrF5         [24] 3267 	ljmp	00118$
      000EE1                       3268 00113$:
                                   3269 ;	lcdCommands.c:466: else if (lcase)	n += 10 + (*p++ - 'a');
      000EE1 90r00r23         [24] 3270 	mov	dptr,#_atoh_lcase_65536_127
      000EE4 E0               [24] 3271 	movx	a,@dptr
      000EE5 F5 F0            [12] 3272 	mov	b,a
      000EE7 A3               [24] 3273 	inc	dptr
      000EE8 E0               [24] 3274 	movx	a,@dptr
      000EE9 45 F0            [12] 3275 	orl	a,b
      000EEB 60 42            [24] 3276 	jz	00110$
      000EED 90r00r1E         [24] 3277 	mov	dptr,#_atoh_p_65536_127
      000EF0 E0               [24] 3278 	movx	a,@dptr
      000EF1 FD               [12] 3279 	mov	r5,a
      000EF2 A3               [24] 3280 	inc	dptr
      000EF3 E0               [24] 3281 	movx	a,@dptr
      000EF4 FE               [12] 3282 	mov	r6,a
      000EF5 A3               [24] 3283 	inc	dptr
      000EF6 E0               [24] 3284 	movx	a,@dptr
      000EF7 FF               [12] 3285 	mov	r7,a
      000EF8 8D 82            [24] 3286 	mov	dpl,r5
      000EFA 8E 83            [24] 3287 	mov	dph,r6
      000EFC 8F F0            [24] 3288 	mov	b,r7
      000EFE 12r00r00         [24] 3289 	lcall	__gptrget
      000F01 FC               [12] 3290 	mov	r4,a
      000F02 90r00r1E         [24] 3291 	mov	dptr,#_atoh_p_65536_127
      000F05 74 01            [12] 3292 	mov	a,#0x01
      000F07 2D               [12] 3293 	add	a,r5
      000F08 F0               [24] 3294 	movx	@dptr,a
      000F09 E4               [12] 3295 	clr	a
      000F0A 3E               [12] 3296 	addc	a,r6
      000F0B A3               [24] 3297 	inc	dptr
      000F0C F0               [24] 3298 	movx	@dptr,a
      000F0D EF               [12] 3299 	mov	a,r7
      000F0E A3               [24] 3300 	inc	dptr
      000F0F F0               [24] 3301 	movx	@dptr,a
      000F10 7F 00            [12] 3302 	mov	r7,#0x00
      000F12 74 A9            [12] 3303 	mov	a,#0xa9
      000F14 2C               [12] 3304 	add	a,r4
      000F15 FC               [12] 3305 	mov	r4,a
      000F16 74 FF            [12] 3306 	mov	a,#0xff
      000F18 3F               [12] 3307 	addc	a,r7
      000F19 FF               [12] 3308 	mov	r7,a
      000F1A 90r00r21         [24] 3309 	mov	dptr,#_atoh_n_65536_127
      000F1D E0               [24] 3310 	movx	a,@dptr
      000F1E FD               [12] 3311 	mov	r5,a
      000F1F A3               [24] 3312 	inc	dptr
      000F20 E0               [24] 3313 	movx	a,@dptr
      000F21 FE               [12] 3314 	mov	r6,a
      000F22 90r00r21         [24] 3315 	mov	dptr,#_atoh_n_65536_127
      000F25 EC               [12] 3316 	mov	a,r4
      000F26 2D               [12] 3317 	add	a,r5
      000F27 F0               [24] 3318 	movx	@dptr,a
      000F28 EF               [12] 3319 	mov	a,r7
      000F29 3E               [12] 3320 	addc	a,r6
      000F2A A3               [24] 3321 	inc	dptr
      000F2B F0               [24] 3322 	movx	@dptr,a
      000F2C 02r0DrF5         [24] 3323 	ljmp	00118$
      000F2F                       3324 00110$:
                                   3325 ;	lcdCommands.c:467: else		n += 10 + (*p++ - 'A');
      000F2F 90r00r1E         [24] 3326 	mov	dptr,#_atoh_p_65536_127
      000F32 E0               [24] 3327 	movx	a,@dptr
      000F33 FD               [12] 3328 	mov	r5,a
      000F34 A3               [24] 3329 	inc	dptr
      000F35 E0               [24] 3330 	movx	a,@dptr
      000F36 FE               [12] 3331 	mov	r6,a
      000F37 A3               [24] 3332 	inc	dptr
      000F38 E0               [24] 3333 	movx	a,@dptr
      000F39 FF               [12] 3334 	mov	r7,a
      000F3A 8D 82            [24] 3335 	mov	dpl,r5
      000F3C 8E 83            [24] 3336 	mov	dph,r6
      000F3E 8F F0            [24] 3337 	mov	b,r7
      000F40 12r00r00         [24] 3338 	lcall	__gptrget
      000F43 FC               [12] 3339 	mov	r4,a
      000F44 90r00r1E         [24] 3340 	mov	dptr,#_atoh_p_65536_127
      000F47 74 01            [12] 3341 	mov	a,#0x01
      000F49 2D               [12] 3342 	add	a,r5
      000F4A F0               [24] 3343 	movx	@dptr,a
      000F4B E4               [12] 3344 	clr	a
      000F4C 3E               [12] 3345 	addc	a,r6
      000F4D A3               [24] 3346 	inc	dptr
      000F4E F0               [24] 3347 	movx	@dptr,a
      000F4F EF               [12] 3348 	mov	a,r7
      000F50 A3               [24] 3349 	inc	dptr
      000F51 F0               [24] 3350 	movx	@dptr,a
      000F52 7F 00            [12] 3351 	mov	r7,#0x00
      000F54 74 C9            [12] 3352 	mov	a,#0xc9
      000F56 2C               [12] 3353 	add	a,r4
      000F57 FC               [12] 3354 	mov	r4,a
      000F58 74 FF            [12] 3355 	mov	a,#0xff
      000F5A 3F               [12] 3356 	addc	a,r7
      000F5B FF               [12] 3357 	mov	r7,a
      000F5C 90r00r21         [24] 3358 	mov	dptr,#_atoh_n_65536_127
      000F5F E0               [24] 3359 	movx	a,@dptr
      000F60 FD               [12] 3360 	mov	r5,a
      000F61 A3               [24] 3361 	inc	dptr
      000F62 E0               [24] 3362 	movx	a,@dptr
      000F63 FE               [12] 3363 	mov	r6,a
      000F64 90r00r21         [24] 3364 	mov	dptr,#_atoh_n_65536_127
      000F67 EC               [12] 3365 	mov	a,r4
      000F68 2D               [12] 3366 	add	a,r5
      000F69 F0               [24] 3367 	movx	@dptr,a
      000F6A EF               [12] 3368 	mov	a,r7
      000F6B 3E               [12] 3369 	addc	a,r6
      000F6C A3               [24] 3370 	inc	dptr
      000F6D F0               [24] 3371 	movx	@dptr,a
      000F6E 02r0DrF5         [24] 3372 	ljmp	00118$
      000F71                       3373 00120$:
                                   3374 ;	lcdCommands.c:469: return(n);
      000F71 90r00r21         [24] 3375 	mov	dptr,#_atoh_n_65536_127
      000F74 E0               [24] 3376 	movx	a,@dptr
      000F75 FE               [12] 3377 	mov	r6,a
      000F76 A3               [24] 3378 	inc	dptr
      000F77 E0               [24] 3379 	movx	a,@dptr
                                   3380 ;	lcdCommands.c:470: }
      000F78 8E 82            [24] 3381 	mov	dpl,r6
      000F7A F5 83            [12] 3382 	mov	dph,a
      000F7C 22               [24] 3383 	ret
                                   3384 ;------------------------------------------------------------
                                   3385 ;Allocation info for local variables in function 'printMenu'
                                   3386 ;------------------------------------------------------------
                                   3387 ;i                         Allocated with name '_printMenu_i_65536_129'
                                   3388 ;------------------------------------------------------------
                                   3389 ;	lcdCommands.c:472: void printMenu()
                                   3390 ;	-----------------------------------------
                                   3391 ;	 function printMenu
                                   3392 ;	-----------------------------------------
      000F7D                       3393 _printMenu:
                                   3394 ;	lcdCommands.c:475: printf("%s",uiLines);
      000F7D 74r00            [12] 3395 	mov	a,#_uiLines
      000F7F C0 E0            [24] 3396 	push	acc
      000F81 74s00            [12] 3397 	mov	a,#(_uiLines >> 8)
      000F83 C0 E0            [24] 3398 	push	acc
      000F85 74 80            [12] 3399 	mov	a,#0x80
      000F87 C0 E0            [24] 3400 	push	acc
      000F89 74rBA            [12] 3401 	mov	a,#___str_16
      000F8B C0 E0            [24] 3402 	push	acc
      000F8D 74s03            [12] 3403 	mov	a,#(___str_16 >> 8)
      000F8F C0 E0            [24] 3404 	push	acc
      000F91 74 80            [12] 3405 	mov	a,#0x80
      000F93 C0 E0            [24] 3406 	push	acc
      000F95 12r00r00         [24] 3407 	lcall	_printf
      000F98 E5 81            [12] 3408 	mov	a,sp
      000F9A 24 FA            [12] 3409 	add	a,#0xfa
      000F9C F5 81            [12] 3410 	mov	sp,a
                                   3411 ;	lcdCommands.c:476: printf("\n\r");
      000F9E 74r53            [12] 3412 	mov	a,#___str_13
      000FA0 C0 E0            [24] 3413 	push	acc
      000FA2 74s03            [12] 3414 	mov	a,#(___str_13 >> 8)
      000FA4 C0 E0            [24] 3415 	push	acc
      000FA6 74 80            [12] 3416 	mov	a,#0x80
      000FA8 C0 E0            [24] 3417 	push	acc
      000FAA 12r00r00         [24] 3418 	lcall	_printf
      000FAD 15 81            [12] 3419 	dec	sp
      000FAF 15 81            [12] 3420 	dec	sp
      000FB1 15 81            [12] 3421 	dec	sp
                                   3422 ;	lcdCommands.c:477: for ( i = 0; i < 10; i++)
      000FB3 7E 00            [12] 3423 	mov	r6,#0x00
      000FB5 7F 00            [12] 3424 	mov	r7,#0x00
      000FB7                       3425 00102$:
                                   3426 ;	lcdCommands.c:479: printf("%s",messages[i]);
      000FB7 90r00r00         [24] 3427 	mov	dptr,#__mulint_PARM_2
      000FBA EE               [12] 3428 	mov	a,r6
      000FBB F0               [24] 3429 	movx	@dptr,a
      000FBC EF               [12] 3430 	mov	a,r7
      000FBD A3               [24] 3431 	inc	dptr
      000FBE F0               [24] 3432 	movx	@dptr,a
      000FBF 90 00 28         [24] 3433 	mov	dptr,#0x0028
      000FC2 C0 07            [24] 3434 	push	ar7
      000FC4 C0 06            [24] 3435 	push	ar6
      000FC6 12r00r00         [24] 3436 	lcall	__mulint
      000FC9 AC 82            [24] 3437 	mov	r4,dpl
      000FCB AD 83            [24] 3438 	mov	r5,dph
      000FCD EC               [12] 3439 	mov	a,r4
      000FCE 24r3C            [12] 3440 	add	a,#_messages
      000FD0 FC               [12] 3441 	mov	r4,a
      000FD1 ED               [12] 3442 	mov	a,r5
      000FD2 34s00            [12] 3443 	addc	a,#(_messages >> 8)
      000FD4 FD               [12] 3444 	mov	r5,a
      000FD5 7B 80            [12] 3445 	mov	r3,#0x80
      000FD7 C0 04            [24] 3446 	push	ar4
      000FD9 C0 05            [24] 3447 	push	ar5
      000FDB C0 03            [24] 3448 	push	ar3
      000FDD 74rBA            [12] 3449 	mov	a,#___str_16
      000FDF C0 E0            [24] 3450 	push	acc
      000FE1 74s03            [12] 3451 	mov	a,#(___str_16 >> 8)
      000FE3 C0 E0            [24] 3452 	push	acc
      000FE5 EB               [12] 3453 	mov	a,r3
      000FE6 C0 E0            [24] 3454 	push	acc
      000FE8 12r00r00         [24] 3455 	lcall	_printf
      000FEB E5 81            [12] 3456 	mov	a,sp
      000FED 24 FA            [12] 3457 	add	a,#0xfa
      000FEF F5 81            [12] 3458 	mov	sp,a
                                   3459 ;	lcdCommands.c:480: printf_tiny("\n\r");
      000FF1 74r53            [12] 3460 	mov	a,#___str_13
      000FF3 C0 E0            [24] 3461 	push	acc
      000FF5 74s03            [12] 3462 	mov	a,#(___str_13 >> 8)
      000FF7 C0 E0            [24] 3463 	push	acc
      000FF9 12r00r00         [24] 3464 	lcall	_printf_tiny
      000FFC 15 81            [12] 3465 	dec	sp
      000FFE 15 81            [12] 3466 	dec	sp
      001000 D0 06            [24] 3467 	pop	ar6
      001002 D0 07            [24] 3468 	pop	ar7
                                   3469 ;	lcdCommands.c:477: for ( i = 0; i < 10; i++)
      001004 0E               [12] 3470 	inc	r6
      001005 BE 00 01         [24] 3471 	cjne	r6,#0x00,00115$
      001008 0F               [12] 3472 	inc	r7
      001009                       3473 00115$:
      001009 C3               [12] 3474 	clr	c
      00100A EE               [12] 3475 	mov	a,r6
      00100B 94 0A            [12] 3476 	subb	a,#0x0a
      00100D EF               [12] 3477 	mov	a,r7
      00100E 64 80            [12] 3478 	xrl	a,#0x80
      001010 94 80            [12] 3479 	subb	a,#0x80
      001012 40 A3            [24] 3480 	jc	00102$
                                   3481 ;	lcdCommands.c:482: printf("%s",uiLines);
      001014 74r00            [12] 3482 	mov	a,#_uiLines
      001016 C0 E0            [24] 3483 	push	acc
      001018 74s00            [12] 3484 	mov	a,#(_uiLines >> 8)
      00101A C0 E0            [24] 3485 	push	acc
      00101C 74 80            [12] 3486 	mov	a,#0x80
      00101E C0 E0            [24] 3487 	push	acc
      001020 74rBA            [12] 3488 	mov	a,#___str_16
      001022 C0 E0            [24] 3489 	push	acc
      001024 74s03            [12] 3490 	mov	a,#(___str_16 >> 8)
      001026 C0 E0            [24] 3491 	push	acc
      001028 74 80            [12] 3492 	mov	a,#0x80
      00102A C0 E0            [24] 3493 	push	acc
      00102C 12r00r00         [24] 3494 	lcall	_printf
      00102F E5 81            [12] 3495 	mov	a,sp
      001031 24 FA            [12] 3496 	add	a,#0xfa
      001033 F5 81            [12] 3497 	mov	sp,a
                                   3498 ;	lcdCommands.c:483: printf("\n\r");
      001035 74r53            [12] 3499 	mov	a,#___str_13
      001037 C0 E0            [24] 3500 	push	acc
      001039 74s03            [12] 3501 	mov	a,#(___str_13 >> 8)
      00103B C0 E0            [24] 3502 	push	acc
      00103D 74 80            [12] 3503 	mov	a,#0x80
      00103F C0 E0            [24] 3504 	push	acc
      001041 12r00r00         [24] 3505 	lcall	_printf
      001044 15 81            [12] 3506 	dec	sp
      001046 15 81            [12] 3507 	dec	sp
      001048 15 81            [12] 3508 	dec	sp
                                   3509 ;	lcdCommands.c:485: }
      00104A 22               [24] 3510 	ret
                                   3511 	.area CSEG    (CODE)
                                   3512 	.area CONST   (CODE)
      000000                       3513 _uiLines:
      000000 0A                    3514 	.db 0x0a
      000001 0D                    3515 	.db 0x0d
      000002 2D 2D 2D 2D 2D 2D 2D  3516 	.ascii "-------------------------------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
      000033 0A                    3517 	.db 0x0a
      000034 0D                    3518 	.db 0x0d
      000035 00                    3519 	.db 0x00
      000036 00                    3520 	.db 0x00
      000037 00                    3521 	.db 0x00
      000038 00                    3522 	.db 0x00
      000039 00                    3523 	.db 0x00
      00003A 00                    3524 	.db 0x00
      00003B 00                    3525 	.db 0x00
      00003C                       3526 _messages:
      00003C 20 45 6E 74 65 72 20  3527 	.ascii " Enter w to write a character "
             77 20 74 6F 20 77 72
             69 74 65 20 61 20 63
             68 61 72 61 63 74 65
             72 20
      00005A 00                    3528 	.db 0x00
      00005B 00                    3529 	.db 0x00
      00005C 00                    3530 	.db 0x00
      00005D 00                    3531 	.db 0x00
      00005E 00                    3532 	.db 0x00
      00005F 00                    3533 	.db 0x00
      000060 00                    3534 	.db 0x00
      000061 00                    3535 	.db 0x00
      000062 00                    3536 	.db 0x00
      000063 00                    3537 	.db 0x00
      000064 20 45 6E 74 65 72 20  3538 	.ascii " Enter s to write a string"
             73 20 74 6F 20 77 72
             69 74 65 20 61 20 73
             74 72 69 6E 67
      00007E 00                    3539 	.db 0x00
      00007F 00                    3540 	.db 0x00
      000080 00                    3541 	.db 0x00
      000081 00                    3542 	.db 0x00
      000082 00                    3543 	.db 0x00
      000083 00                    3544 	.db 0x00
      000084 00                    3545 	.db 0x00
      000085 00                    3546 	.db 0x00
      000086 00                    3547 	.db 0x00
      000087 00                    3548 	.db 0x00
      000088 00                    3549 	.db 0x00
      000089 00                    3550 	.db 0x00
      00008A 00                    3551 	.db 0x00
      00008B 00                    3552 	.db 0x00
      00008C 20 45 6E 74 65 72 20  3553 	.ascii " Enter p to play pacman "
             70 20 74 6F 20 70 6C
             61 79 20 70 61 63 6D
             61 6E 20
      0000A4 00                    3554 	.db 0x00
      0000A5 00                    3555 	.db 0x00
      0000A6 00                    3556 	.db 0x00
      0000A7 00                    3557 	.db 0x00
      0000A8 00                    3558 	.db 0x00
      0000A9 00                    3559 	.db 0x00
      0000AA 00                    3560 	.db 0x00
      0000AB 00                    3561 	.db 0x00
      0000AC 00                    3562 	.db 0x00
      0000AD 00                    3563 	.db 0x00
      0000AE 00                    3564 	.db 0x00
      0000AF 00                    3565 	.db 0x00
      0000B0 00                    3566 	.db 0x00
      0000B1 00                    3567 	.db 0x00
      0000B2 00                    3568 	.db 0x00
      0000B3 00                    3569 	.db 0x00
      0000B4 20 45 6E 74 65 72 20  3570 	.ascii " Enter d to perform RAM dump "
             64 20 74 6F 20 70 65
             72 66 6F 72 6D 20 52
             41 4D 20 64 75 6D 70
             20
      0000D1 00                    3571 	.db 0x00
      0000D2 00                    3572 	.db 0x00
      0000D3 00                    3573 	.db 0x00
      0000D4 00                    3574 	.db 0x00
      0000D5 00                    3575 	.db 0x00
      0000D6 00                    3576 	.db 0x00
      0000D7 00                    3577 	.db 0x00
      0000D8 00                    3578 	.db 0x00
      0000D9 00                    3579 	.db 0x00
      0000DA 00                    3580 	.db 0x00
      0000DB 00                    3581 	.db 0x00
      0000DC 20 45 6E 74 65 72 20  3582 	.ascii " Enter g for custom character"
             67 20 66 6F 72 20 63
             75 73 74 6F 6D 20 63
             68 61 72 61 63 74 65
             72
      0000F9 00                    3583 	.db 0x00
      0000FA 00                    3584 	.db 0x00
      0000FB 00                    3585 	.db 0x00
      0000FC 00                    3586 	.db 0x00
      0000FD 00                    3587 	.db 0x00
      0000FE 00                    3588 	.db 0x00
      0000FF 00                    3589 	.db 0x00
      000100 00                    3590 	.db 0x00
      000101 00                    3591 	.db 0x00
      000102 00                    3592 	.db 0x00
      000103 00                    3593 	.db 0x00
      000104 20 45 6E 74 65 72 20  3594 	.ascii " Enter x to reset timer"
             78 20 74 6F 20 72 65
             73 65 74 20 74 69 6D
             65 72
      00011B 00                    3595 	.db 0x00
      00011C 00                    3596 	.db 0x00
      00011D 00                    3597 	.db 0x00
      00011E 00                    3598 	.db 0x00
      00011F 00                    3599 	.db 0x00
      000120 00                    3600 	.db 0x00
      000121 00                    3601 	.db 0x00
      000122 00                    3602 	.db 0x00
      000123 00                    3603 	.db 0x00
      000124 00                    3604 	.db 0x00
      000125 00                    3605 	.db 0x00
      000126 00                    3606 	.db 0x00
      000127 00                    3607 	.db 0x00
      000128 00                    3608 	.db 0x00
      000129 00                    3609 	.db 0x00
      00012A 00                    3610 	.db 0x00
      00012B 00                    3611 	.db 0x00
      00012C 20 45 6E 74 65 72 20  3612 	.ascii " Enter y to pause timer"
             79 20 74 6F 20 70 61
             75 73 65 20 74 69 6D
             65 72
      000143 00                    3613 	.db 0x00
      000144 00                    3614 	.db 0x00
      000145 00                    3615 	.db 0x00
      000146 00                    3616 	.db 0x00
      000147 00                    3617 	.db 0x00
      000148 00                    3618 	.db 0x00
      000149 00                    3619 	.db 0x00
      00014A 00                    3620 	.db 0x00
      00014B 00                    3621 	.db 0x00
      00014C 00                    3622 	.db 0x00
      00014D 00                    3623 	.db 0x00
      00014E 00                    3624 	.db 0x00
      00014F 00                    3625 	.db 0x00
      000150 00                    3626 	.db 0x00
      000151 00                    3627 	.db 0x00
      000152 00                    3628 	.db 0x00
      000153 00                    3629 	.db 0x00
      000154 20 45 6E 74 65 72 20  3630 	.ascii " Enter z to resume timer"
             7A 20 74 6F 20 72 65
             73 75 6D 65 20 74 69
             6D 65 72
      00016C 00                    3631 	.db 0x00
      00016D 00                    3632 	.db 0x00
      00016E 00                    3633 	.db 0x00
      00016F 00                    3634 	.db 0x00
      000170 00                    3635 	.db 0x00
      000171 00                    3636 	.db 0x00
      000172 00                    3637 	.db 0x00
      000173 00                    3638 	.db 0x00
      000174 00                    3639 	.db 0x00
      000175 00                    3640 	.db 0x00
      000176 00                    3641 	.db 0x00
      000177 00                    3642 	.db 0x00
      000178 00                    3643 	.db 0x00
      000179 00                    3644 	.db 0x00
      00017A 00                    3645 	.db 0x00
      00017B 00                    3646 	.db 0x00
      00017C 20 45 6E 74 65 72 20  3647 	.ascii " Enter s to clear screen"
             73 20 74 6F 20 63 6C
             65 61 72 20 73 63 72
             65 65 6E
      000194 00                    3648 	.db 0x00
      000195 00                    3649 	.db 0x00
      000196 00                    3650 	.db 0x00
      000197 00                    3651 	.db 0x00
      000198 00                    3652 	.db 0x00
      000199 00                    3653 	.db 0x00
      00019A 00                    3654 	.db 0x00
      00019B 00                    3655 	.db 0x00
      00019C 00                    3656 	.db 0x00
      00019D 00                    3657 	.db 0x00
      00019E 00                    3658 	.db 0x00
      00019F 00                    3659 	.db 0x00
      0001A0 00                    3660 	.db 0x00
      0001A1 00                    3661 	.db 0x00
      0001A2 00                    3662 	.db 0x00
      0001A3 00                    3663 	.db 0x00
      0001A4 20 45 6E 74 65 72 20  3664 	.ascii " Enter m for main menu "
             6D 20 66 6F 72 20 6D
             61 69 6E 20 6D 65 6E
             75 20
      0001BB 00                    3665 	.db 0x00
      0001BC 00                    3666 	.db 0x00
      0001BD 00                    3667 	.db 0x00
      0001BE 00                    3668 	.db 0x00
      0001BF 00                    3669 	.db 0x00
      0001C0 00                    3670 	.db 0x00
      0001C1 00                    3671 	.db 0x00
      0001C2 00                    3672 	.db 0x00
      0001C3 00                    3673 	.db 0x00
      0001C4 00                    3674 	.db 0x00
      0001C5 00                    3675 	.db 0x00
      0001C6 00                    3676 	.db 0x00
      0001C7 00                    3677 	.db 0x00
      0001C8 00                    3678 	.db 0x00
      0001C9 00                    3679 	.db 0x00
      0001CA 00                    3680 	.db 0x00
      0001CB 00                    3681 	.db 0x00
      0001CC 00                    3682 	.db 0x00
      0001CD 00                    3683 	.db 0x00
      0001CE 00                    3684 	.db 0x00
      0001CF 00                    3685 	.db 0x00
      0001D0 00                    3686 	.db 0x00
      0001D1 00                    3687 	.db 0x00
      0001D2 00                    3688 	.db 0x00
      0001D3 00                    3689 	.db 0x00
      0001D4 00                    3690 	.db 0x00
      0001D5 00                    3691 	.db 0x00
      0001D6 00                    3692 	.db 0x00
      0001D7 00                    3693 	.db 0x00
      0001D8 00                    3694 	.db 0x00
      0001D9 00                    3695 	.db 0x00
      0001DA 00                    3696 	.db 0x00
      0001DB 00                    3697 	.db 0x00
      0001DC 00                    3698 	.db 0x00
      0001DD 00                    3699 	.db 0x00
      0001DE 00                    3700 	.db 0x00
      0001DF 00                    3701 	.db 0x00
      0001E0 00                    3702 	.db 0x00
      0001E1 00                    3703 	.db 0x00
      0001E2 00                    3704 	.db 0x00
      0001E3 00                    3705 	.db 0x00
      0001E4 00                    3706 	.db 0x00
      0001E5 00                    3707 	.db 0x00
      0001E6 00                    3708 	.db 0x00
      0001E7 00                    3709 	.db 0x00
      0001E8 00                    3710 	.db 0x00
      0001E9 00                    3711 	.db 0x00
      0001EA 00                    3712 	.db 0x00
      0001EB 00                    3713 	.db 0x00
      0001EC 00                    3714 	.db 0x00
      0001ED 00                    3715 	.db 0x00
      0001EE 00                    3716 	.db 0x00
      0001EF 00                    3717 	.db 0x00
      0001F0 00                    3718 	.db 0x00
      0001F1 00                    3719 	.db 0x00
      0001F2 00                    3720 	.db 0x00
      0001F3 00                    3721 	.db 0x00
      0001F4                       3722 _lookUpTable:
      0001F4 00                    3723 	.db #0x00	; 0
      0001F5 01                    3724 	.db #0x01	; 1
      0001F6 02                    3725 	.db #0x02	; 2
      0001F7 03                    3726 	.db #0x03	; 3
      0001F8 04                    3727 	.db #0x04	; 4
      0001F9 05                    3728 	.db #0x05	; 5
      0001FA 06                    3729 	.db #0x06	; 6
      0001FB 07                    3730 	.db #0x07	; 7
      0001FC 08                    3731 	.db #0x08	; 8
      0001FD 09                    3732 	.db #0x09	; 9
      0001FE 0A                    3733 	.db #0x0a	; 10
      0001FF 0B                    3734 	.db #0x0b	; 11
      000200 0C                    3735 	.db #0x0c	; 12
      000201 0D                    3736 	.db #0x0d	; 13
      000202 0E                    3737 	.db #0x0e	; 14
      000203 0F                    3738 	.db #0x0f	; 15
      000204 40                    3739 	.db #0x40	; 64
      000205 41                    3740 	.db #0x41	; 65	'A'
      000206 42                    3741 	.db #0x42	; 66	'B'
      000207 43                    3742 	.db #0x43	; 67	'C'
      000208 44                    3743 	.db #0x44	; 68	'D'
      000209 45                    3744 	.db #0x45	; 69	'E'
      00020A 46                    3745 	.db #0x46	; 70	'F'
      00020B 47                    3746 	.db #0x47	; 71	'G'
      00020C 48                    3747 	.db #0x48	; 72	'H'
      00020D 49                    3748 	.db #0x49	; 73	'I'
      00020E 4A                    3749 	.db #0x4a	; 74	'J'
      00020F 4B                    3750 	.db #0x4b	; 75	'K'
      000210 4C                    3751 	.db #0x4c	; 76	'L'
      000211 4D                    3752 	.db #0x4d	; 77	'M'
      000212 4E                    3753 	.db #0x4e	; 78	'N'
      000213 4F                    3754 	.db #0x4f	; 79	'O'
      000214 10                    3755 	.db #0x10	; 16
      000215 11                    3756 	.db #0x11	; 17
      000216 12                    3757 	.db #0x12	; 18
      000217 13                    3758 	.db #0x13	; 19
      000218 14                    3759 	.db #0x14	; 20
      000219 15                    3760 	.db #0x15	; 21
      00021A 16                    3761 	.db #0x16	; 22
      00021B 17                    3762 	.db #0x17	; 23
      00021C 18                    3763 	.db #0x18	; 24
      00021D 19                    3764 	.db #0x19	; 25
      00021E 1A                    3765 	.db #0x1a	; 26
      00021F 1B                    3766 	.db #0x1b	; 27
      000220 1C                    3767 	.db #0x1c	; 28
      000221 1D                    3768 	.db #0x1d	; 29
      000222 1E                    3769 	.db #0x1e	; 30
      000223 1F                    3770 	.db #0x1f	; 31
      000224 50                    3771 	.db #0x50	; 80	'P'
      000225 51                    3772 	.db #0x51	; 81	'Q'
      000226 52                    3773 	.db #0x52	; 82	'R'
      000227 53                    3774 	.db #0x53	; 83	'S'
      000228 54                    3775 	.db #0x54	; 84	'T'
      000229 55                    3776 	.db #0x55	; 85	'U'
      00022A 56                    3777 	.db #0x56	; 86	'V'
      00022B 57                    3778 	.db #0x57	; 87	'W'
      00022C 58                    3779 	.db #0x58	; 88	'X'
      00022D 59                    3780 	.db #0x59	; 89	'Y'
      00022E 5A                    3781 	.db #0x5a	; 90	'Z'
      00022F 5B                    3782 	.db #0x5b	; 91
      000230 5C                    3783 	.db #0x5c	; 92
      000231 5D                    3784 	.db #0x5d	; 93
      000232 5E                    3785 	.db #0x5e	; 94
      000233 5F                    3786 	.db #0x5f	; 95
                                   3787 	.area CONST   (CODE)
      000234                       3788 ___str_0:
      000234 0A                    3789 	.db 0x0a
      000235 0D                    3790 	.db 0x0d
      000236 45 6E 74 65 72 20 76  3791 	.ascii "Enter value for Row 1"
             61 6C 75 65 20 66 6F
             72 20 52 6F 77 20 31
      00024B 0A                    3792 	.db 0x0a
      00024C 0D                    3793 	.db 0x0d
      00024D 00                    3794 	.db 0x00
                                   3795 	.area CSEG    (CODE)
                                   3796 	.area CONST   (CODE)
      00024E                       3797 ___str_1:
      00024E 0A                    3798 	.db 0x0a
      00024F 0D                    3799 	.db 0x0d
      000250 45 6E 74 65 72 20 76  3800 	.ascii "Enter value for Row 2"
             61 6C 75 65 20 66 6F
             72 20 52 6F 77 20 32
      000265 0A                    3801 	.db 0x0a
      000266 0D                    3802 	.db 0x0d
      000267 00                    3803 	.db 0x00
                                   3804 	.area CSEG    (CODE)
                                   3805 	.area CONST   (CODE)
      000268                       3806 ___str_2:
      000268 0A                    3807 	.db 0x0a
      000269 0D                    3808 	.db 0x0d
      00026A 45 6E 74 65 72 20 76  3809 	.ascii "Enter value for Row 3"
             61 6C 75 65 20 66 6F
             72 20 52 6F 77 20 33
      00027F 0A                    3810 	.db 0x0a
      000280 0D                    3811 	.db 0x0d
      000281 00                    3812 	.db 0x00
                                   3813 	.area CSEG    (CODE)
                                   3814 	.area CONST   (CODE)
      000282                       3815 ___str_3:
      000282 0A                    3816 	.db 0x0a
      000283 0D                    3817 	.db 0x0d
      000284 45 6E 74 65 72 20 76  3818 	.ascii "Enter value for Row 4"
             61 6C 75 65 20 66 6F
             72 20 52 6F 77 20 34
      000299 0A                    3819 	.db 0x0a
      00029A 0D                    3820 	.db 0x0d
      00029B 00                    3821 	.db 0x00
                                   3822 	.area CSEG    (CODE)
                                   3823 	.area CONST   (CODE)
      00029C                       3824 ___str_4:
      00029C 0A                    3825 	.db 0x0a
      00029D 0D                    3826 	.db 0x0d
      00029E 45 6E 74 65 72 20 76  3827 	.ascii "Enter value for Row 5"
             61 6C 75 65 20 66 6F
             72 20 52 6F 77 20 35
      0002B3 0A                    3828 	.db 0x0a
      0002B4 0D                    3829 	.db 0x0d
      0002B5 00                    3830 	.db 0x00
                                   3831 	.area CSEG    (CODE)
                                   3832 	.area CONST   (CODE)
      0002B6                       3833 ___str_5:
      0002B6 0A                    3834 	.db 0x0a
      0002B7 0D                    3835 	.db 0x0d
      0002B8 45 6E 74 65 72 20 76  3836 	.ascii "Enter value for Row 6"
             61 6C 75 65 20 66 6F
             72 20 52 6F 77 20 36
      0002CD 0A                    3837 	.db 0x0a
      0002CE 0D                    3838 	.db 0x0d
      0002CF 00                    3839 	.db 0x00
                                   3840 	.area CSEG    (CODE)
                                   3841 	.area CONST   (CODE)
      0002D0                       3842 ___str_6:
      0002D0 0A                    3843 	.db 0x0a
      0002D1 0D                    3844 	.db 0x0d
      0002D2 45 6E 74 65 72 20 76  3845 	.ascii "Enter value for Row 7"
             61 6C 75 65 20 66 6F
             72 20 52 6F 77 20 37
      0002E7 0A                    3846 	.db 0x0a
      0002E8 0D                    3847 	.db 0x0d
      0002E9 00                    3848 	.db 0x00
                                   3849 	.area CSEG    (CODE)
                                   3850 	.area CONST   (CODE)
      0002EA                       3851 ___str_7:
      0002EA 0A                    3852 	.db 0x0a
      0002EB 0D                    3853 	.db 0x0d
      0002EC 45 6E 74 65 72 20 76  3854 	.ascii "Enter value for Row 8"
             61 6C 75 65 20 66 6F
             72 20 52 6F 77 20 38
      000301 0A                    3855 	.db 0x0a
      000302 0D                    3856 	.db 0x0d
      000303 00                    3857 	.db 0x00
                                   3858 	.area CSEG    (CODE)
                                   3859 	.area CONST   (CODE)
      000304                       3860 ___str_8:
      000304 25 64                 3861 	.ascii "%d"
      000306 0A                    3862 	.db 0x0a
      000307 0D                    3863 	.db 0x0d
      000308 00                    3864 	.db 0x00
                                   3865 	.area CSEG    (CODE)
                                   3866 	.area CONST   (CODE)
      000309                       3867 ___str_9:
      000309 0A                    3868 	.db 0x0a
      00030A 0D                    3869 	.db 0x0d
      00030B 50 6C 65 61 73 65 20  3870 	.ascii "Please Input a maximum of 48 characters"
             49 6E 70 75 74 20 61
             20 6D 61 78 69 6D 75
             6D 20 6F 66 20 34 38
             20 63 68 61 72 61 63
             74 65 72 73
      000332 0A                    3871 	.db 0x0a
      000333 0D                    3872 	.db 0x0d
      000334 00                    3873 	.db 0x00
                                   3874 	.area CSEG    (CODE)
                                   3875 	.area CONST   (CODE)
      000335                       3876 ___str_10:
      000335 0A                    3877 	.db 0x0a
      000336 0D                    3878 	.db 0x0d
      000337 44 44 52 41 4D 20 43  3879 	.ascii "DDRAM Contents"
             6F 6E 74 65 6E 74 73
      000345 0A                    3880 	.db 0x0a
      000346 0D                    3881 	.db 0x0d
      000347 00                    3882 	.db 0x00
                                   3883 	.area CSEG    (CODE)
                                   3884 	.area CONST   (CODE)
      000348                       3885 ___str_11:
      000348 25 32 78 3A 20        3886 	.ascii "%2x: "
      00034D 00                    3887 	.db 0x00
                                   3888 	.area CSEG    (CODE)
                                   3889 	.area CONST   (CODE)
      00034E                       3890 ___str_12:
      00034E 25 32 78 20           3891 	.ascii "%2x "
      000352 00                    3892 	.db 0x00
                                   3893 	.area CSEG    (CODE)
                                   3894 	.area CONST   (CODE)
      000353                       3895 ___str_13:
      000353 0A                    3896 	.db 0x0a
      000354 0D                    3897 	.db 0x0d
      000355 00                    3898 	.db 0x00
                                   3899 	.area CSEG    (CODE)
                                   3900 	.area CONST   (CODE)
      000356                       3901 ___str_14:
      000356 0A                    3902 	.db 0x0a
      000357 0D                    3903 	.db 0x0d
      000358 43 47 52 41 4D 20 43  3904 	.ascii "CGRAM Contents"
             6F 6E 74 65 6E 74 73
      000366 0A                    3905 	.db 0x0a
      000367 0D                    3906 	.db 0x0d
      000368 00                    3907 	.db 0x00
                                   3908 	.area CSEG    (CODE)
                                   3909 	.area CONST   (CODE)
      000369                       3910 ___str_15:
      000369 0A                    3911 	.db 0x0a
      00036A 0D                    3912 	.db 0x0d
      00036B 45 6E 74 65 72 20 77  3913 	.ascii "Enter w to go up, s to go down, a to go left and d to go rig"
             20 74 6F 20 67 6F 20
             75 70 2C 20 73 20 74
             6F 20 67 6F 20 64 6F
             77 6E 2C 20 61 20 74
             6F 20 67 6F 20 6C 65
             66 74 20 61 6E 64 20
             64 20 74 6F 20 67 6F
             20 72 69 67
      0003A7 68 74 20 61 6E 64 20  3914 	.ascii "ht and q to quit"
             71 20 74 6F 20 71 75
             69 74
      0003B7 0A                    3915 	.db 0x0a
      0003B8 0D                    3916 	.db 0x0d
      0003B9 00                    3917 	.db 0x00
                                   3918 	.area CSEG    (CODE)
                                   3919 	.area CONST   (CODE)
      0003BA                       3920 ___str_16:
      0003BA 25 73                 3921 	.ascii "%s"
      0003BC 00                    3922 	.db 0x00
                                   3923 	.area CSEG    (CODE)
                                   3924 	.area XINIT   (CODE)
                                   3925 	.area CABS    (ABS,CODE)
