                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module lcdCommands
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _lookUpTable
                                     12 	.globl _messages
                                     13 	.globl _uiLines
                                     14 	.globl _atoi
                                     15 	.globl _memset
                                     16 	.globl _printf_tiny
                                     17 	.globl _putchar
                                     18 	.globl _getchar
                                     19 	.globl _printf
                                     20 	.globl _P5_7
                                     21 	.globl _P5_6
                                     22 	.globl _P5_5
                                     23 	.globl _P5_4
                                     24 	.globl _P5_3
                                     25 	.globl _P5_2
                                     26 	.globl _P5_1
                                     27 	.globl _P5_0
                                     28 	.globl _P4_7
                                     29 	.globl _P4_6
                                     30 	.globl _P4_5
                                     31 	.globl _P4_4
                                     32 	.globl _P4_3
                                     33 	.globl _P4_2
                                     34 	.globl _P4_1
                                     35 	.globl _P4_0
                                     36 	.globl _PX0L
                                     37 	.globl _PT0L
                                     38 	.globl _PX1L
                                     39 	.globl _PT1L
                                     40 	.globl _PSL
                                     41 	.globl _PT2L
                                     42 	.globl _PPCL
                                     43 	.globl _EC
                                     44 	.globl _CCF0
                                     45 	.globl _CCF1
                                     46 	.globl _CCF2
                                     47 	.globl _CCF3
                                     48 	.globl _CCF4
                                     49 	.globl _CR
                                     50 	.globl _CF
                                     51 	.globl _TF2
                                     52 	.globl _EXF2
                                     53 	.globl _RCLK
                                     54 	.globl _TCLK
                                     55 	.globl _EXEN2
                                     56 	.globl _TR2
                                     57 	.globl _C_T2
                                     58 	.globl _CP_RL2
                                     59 	.globl _T2CON_7
                                     60 	.globl _T2CON_6
                                     61 	.globl _T2CON_5
                                     62 	.globl _T2CON_4
                                     63 	.globl _T2CON_3
                                     64 	.globl _T2CON_2
                                     65 	.globl _T2CON_1
                                     66 	.globl _T2CON_0
                                     67 	.globl _PT2
                                     68 	.globl _ET2
                                     69 	.globl _CY
                                     70 	.globl _AC
                                     71 	.globl _F0
                                     72 	.globl _RS1
                                     73 	.globl _RS0
                                     74 	.globl _OV
                                     75 	.globl _F1
                                     76 	.globl _P
                                     77 	.globl _PS
                                     78 	.globl _PT1
                                     79 	.globl _PX1
                                     80 	.globl _PT0
                                     81 	.globl _PX0
                                     82 	.globl _RD
                                     83 	.globl _WR
                                     84 	.globl _T1
                                     85 	.globl _T0
                                     86 	.globl _INT1
                                     87 	.globl _INT0
                                     88 	.globl _TXD
                                     89 	.globl _RXD
                                     90 	.globl _P3_7
                                     91 	.globl _P3_6
                                     92 	.globl _P3_5
                                     93 	.globl _P3_4
                                     94 	.globl _P3_3
                                     95 	.globl _P3_2
                                     96 	.globl _P3_1
                                     97 	.globl _P3_0
                                     98 	.globl _EA
                                     99 	.globl _ES
                                    100 	.globl _ET1
                                    101 	.globl _EX1
                                    102 	.globl _ET0
                                    103 	.globl _EX0
                                    104 	.globl _P2_7
                                    105 	.globl _P2_6
                                    106 	.globl _P2_5
                                    107 	.globl _P2_4
                                    108 	.globl _P2_3
                                    109 	.globl _P2_2
                                    110 	.globl _P2_1
                                    111 	.globl _P2_0
                                    112 	.globl _SM0
                                    113 	.globl _SM1
                                    114 	.globl _SM2
                                    115 	.globl _REN
                                    116 	.globl _TB8
                                    117 	.globl _RB8
                                    118 	.globl _TI
                                    119 	.globl _RI
                                    120 	.globl _P1_7
                                    121 	.globl _P1_6
                                    122 	.globl _P1_5
                                    123 	.globl _P1_4
                                    124 	.globl _P1_3
                                    125 	.globl _P1_2
                                    126 	.globl _P1_1
                                    127 	.globl _P1_0
                                    128 	.globl _TF1
                                    129 	.globl _TR1
                                    130 	.globl _TF0
                                    131 	.globl _TR0
                                    132 	.globl _IE1
                                    133 	.globl _IT1
                                    134 	.globl _IE0
                                    135 	.globl _IT0
                                    136 	.globl _P0_7
                                    137 	.globl _P0_6
                                    138 	.globl _P0_5
                                    139 	.globl _P0_4
                                    140 	.globl _P0_3
                                    141 	.globl _P0_2
                                    142 	.globl _P0_1
                                    143 	.globl _P0_0
                                    144 	.globl _EECON
                                    145 	.globl _KBF
                                    146 	.globl _KBE
                                    147 	.globl _KBLS
                                    148 	.globl _BRL
                                    149 	.globl _BDRCON
                                    150 	.globl _T2MOD
                                    151 	.globl _SPDAT
                                    152 	.globl _SPSTA
                                    153 	.globl _SPCON
                                    154 	.globl _SADEN
                                    155 	.globl _SADDR
                                    156 	.globl _WDTPRG
                                    157 	.globl _WDTRST
                                    158 	.globl _P5
                                    159 	.globl _P4
                                    160 	.globl _IPH1
                                    161 	.globl _IPL1
                                    162 	.globl _IPH0
                                    163 	.globl _IPL0
                                    164 	.globl _IEN1
                                    165 	.globl _IEN0
                                    166 	.globl _CMOD
                                    167 	.globl _CL
                                    168 	.globl _CH
                                    169 	.globl _CCON
                                    170 	.globl _CCAPM4
                                    171 	.globl _CCAPM3
                                    172 	.globl _CCAPM2
                                    173 	.globl _CCAPM1
                                    174 	.globl _CCAPM0
                                    175 	.globl _CCAP4L
                                    176 	.globl _CCAP3L
                                    177 	.globl _CCAP2L
                                    178 	.globl _CCAP1L
                                    179 	.globl _CCAP0L
                                    180 	.globl _CCAP4H
                                    181 	.globl _CCAP3H
                                    182 	.globl _CCAP2H
                                    183 	.globl _CCAP1H
                                    184 	.globl _CCAP0H
                                    185 	.globl _CKCON1
                                    186 	.globl _CKCON0
                                    187 	.globl _CKRL
                                    188 	.globl _AUXR1
                                    189 	.globl _AUXR
                                    190 	.globl _TH2
                                    191 	.globl _TL2
                                    192 	.globl _RCAP2H
                                    193 	.globl _RCAP2L
                                    194 	.globl _T2CON
                                    195 	.globl _B
                                    196 	.globl _ACC
                                    197 	.globl _PSW
                                    198 	.globl _IP
                                    199 	.globl _P3
                                    200 	.globl _IE
                                    201 	.globl _P2
                                    202 	.globl _SBUF
                                    203 	.globl _SCON
                                    204 	.globl _P1
                                    205 	.globl _TH1
                                    206 	.globl _TH0
                                    207 	.globl _TL1
                                    208 	.globl _TL0
                                    209 	.globl _TMOD
                                    210 	.globl _TCON
                                    211 	.globl _PCON
                                    212 	.globl _DPH
                                    213 	.globl _DPL
                                    214 	.globl _SP
                                    215 	.globl _P0
                                    216 	.globl _goToXY_PARM_2
                                    217 	.globl _readCharacter
                                    218 	.globl _writeCharacter
                                    219 	.globl _busyPoll
                                    220 	.globl _lcdGeneral
                                    221 	.globl _delay
                                    222 	.globl _timerInit
                                    223 	.globl _busyWait
                                    224 	.globl _lcdInit
                                    225 	.globl _lcdPutCh
                                    226 	.globl _lcdClear
                                    227 	.globl _goToAddr
                                    228 	.globl _goToXY
                                    229 	.globl _customCharacter
                                    230 	.globl _readLCD
                                    231 	.globl _putsLCD
                                    232 	.globl _gets
                                    233 	.globl _ramDump
                                    234 	.globl _gamePacman
                                    235 	.globl _makePacmanRight
                                    236 	.globl _makePacmanLeft
                                    237 	.globl _printBinary
                                    238 	.globl _atoh
                                    239 	.globl _printMenu
                                    240 ;--------------------------------------------------------
                                    241 ; special function registers
                                    242 ;--------------------------------------------------------
                                    243 	.area RSEG    (ABS,DATA)
      000000                        244 	.org 0x0000
                           000080   245 _P0	=	0x0080
                           000081   246 _SP	=	0x0081
                           000082   247 _DPL	=	0x0082
                           000083   248 _DPH	=	0x0083
                           000087   249 _PCON	=	0x0087
                           000088   250 _TCON	=	0x0088
                           000089   251 _TMOD	=	0x0089
                           00008A   252 _TL0	=	0x008a
                           00008B   253 _TL1	=	0x008b
                           00008C   254 _TH0	=	0x008c
                           00008D   255 _TH1	=	0x008d
                           000090   256 _P1	=	0x0090
                           000098   257 _SCON	=	0x0098
                           000099   258 _SBUF	=	0x0099
                           0000A0   259 _P2	=	0x00a0
                           0000A8   260 _IE	=	0x00a8
                           0000B0   261 _P3	=	0x00b0
                           0000B8   262 _IP	=	0x00b8
                           0000D0   263 _PSW	=	0x00d0
                           0000E0   264 _ACC	=	0x00e0
                           0000F0   265 _B	=	0x00f0
                           0000C8   266 _T2CON	=	0x00c8
                           0000CA   267 _RCAP2L	=	0x00ca
                           0000CB   268 _RCAP2H	=	0x00cb
                           0000CC   269 _TL2	=	0x00cc
                           0000CD   270 _TH2	=	0x00cd
                           00008E   271 _AUXR	=	0x008e
                           0000A2   272 _AUXR1	=	0x00a2
                           000097   273 _CKRL	=	0x0097
                           00008F   274 _CKCON0	=	0x008f
                           0000AF   275 _CKCON1	=	0x00af
                           0000FA   276 _CCAP0H	=	0x00fa
                           0000FB   277 _CCAP1H	=	0x00fb
                           0000FC   278 _CCAP2H	=	0x00fc
                           0000FD   279 _CCAP3H	=	0x00fd
                           0000FE   280 _CCAP4H	=	0x00fe
                           0000EA   281 _CCAP0L	=	0x00ea
                           0000EB   282 _CCAP1L	=	0x00eb
                           0000EC   283 _CCAP2L	=	0x00ec
                           0000ED   284 _CCAP3L	=	0x00ed
                           0000EE   285 _CCAP4L	=	0x00ee
                           0000DA   286 _CCAPM0	=	0x00da
                           0000DB   287 _CCAPM1	=	0x00db
                           0000DC   288 _CCAPM2	=	0x00dc
                           0000DD   289 _CCAPM3	=	0x00dd
                           0000DE   290 _CCAPM4	=	0x00de
                           0000D8   291 _CCON	=	0x00d8
                           0000F9   292 _CH	=	0x00f9
                           0000E9   293 _CL	=	0x00e9
                           0000D9   294 _CMOD	=	0x00d9
                           0000A8   295 _IEN0	=	0x00a8
                           0000B1   296 _IEN1	=	0x00b1
                           0000B8   297 _IPL0	=	0x00b8
                           0000B7   298 _IPH0	=	0x00b7
                           0000B2   299 _IPL1	=	0x00b2
                           0000B3   300 _IPH1	=	0x00b3
                           0000C0   301 _P4	=	0x00c0
                           0000E8   302 _P5	=	0x00e8
                           0000A6   303 _WDTRST	=	0x00a6
                           0000A7   304 _WDTPRG	=	0x00a7
                           0000A9   305 _SADDR	=	0x00a9
                           0000B9   306 _SADEN	=	0x00b9
                           0000C3   307 _SPCON	=	0x00c3
                           0000C4   308 _SPSTA	=	0x00c4
                           0000C5   309 _SPDAT	=	0x00c5
                           0000C9   310 _T2MOD	=	0x00c9
                           00009B   311 _BDRCON	=	0x009b
                           00009A   312 _BRL	=	0x009a
                           00009C   313 _KBLS	=	0x009c
                           00009D   314 _KBE	=	0x009d
                           00009E   315 _KBF	=	0x009e
                           0000D2   316 _EECON	=	0x00d2
                                    317 ;--------------------------------------------------------
                                    318 ; special function bits
                                    319 ;--------------------------------------------------------
                                    320 	.area RSEG    (ABS,DATA)
      000000                        321 	.org 0x0000
                           000080   322 _P0_0	=	0x0080
                           000081   323 _P0_1	=	0x0081
                           000082   324 _P0_2	=	0x0082
                           000083   325 _P0_3	=	0x0083
                           000084   326 _P0_4	=	0x0084
                           000085   327 _P0_5	=	0x0085
                           000086   328 _P0_6	=	0x0086
                           000087   329 _P0_7	=	0x0087
                           000088   330 _IT0	=	0x0088
                           000089   331 _IE0	=	0x0089
                           00008A   332 _IT1	=	0x008a
                           00008B   333 _IE1	=	0x008b
                           00008C   334 _TR0	=	0x008c
                           00008D   335 _TF0	=	0x008d
                           00008E   336 _TR1	=	0x008e
                           00008F   337 _TF1	=	0x008f
                           000090   338 _P1_0	=	0x0090
                           000091   339 _P1_1	=	0x0091
                           000092   340 _P1_2	=	0x0092
                           000093   341 _P1_3	=	0x0093
                           000094   342 _P1_4	=	0x0094
                           000095   343 _P1_5	=	0x0095
                           000096   344 _P1_6	=	0x0096
                           000097   345 _P1_7	=	0x0097
                           000098   346 _RI	=	0x0098
                           000099   347 _TI	=	0x0099
                           00009A   348 _RB8	=	0x009a
                           00009B   349 _TB8	=	0x009b
                           00009C   350 _REN	=	0x009c
                           00009D   351 _SM2	=	0x009d
                           00009E   352 _SM1	=	0x009e
                           00009F   353 _SM0	=	0x009f
                           0000A0   354 _P2_0	=	0x00a0
                           0000A1   355 _P2_1	=	0x00a1
                           0000A2   356 _P2_2	=	0x00a2
                           0000A3   357 _P2_3	=	0x00a3
                           0000A4   358 _P2_4	=	0x00a4
                           0000A5   359 _P2_5	=	0x00a5
                           0000A6   360 _P2_6	=	0x00a6
                           0000A7   361 _P2_7	=	0x00a7
                           0000A8   362 _EX0	=	0x00a8
                           0000A9   363 _ET0	=	0x00a9
                           0000AA   364 _EX1	=	0x00aa
                           0000AB   365 _ET1	=	0x00ab
                           0000AC   366 _ES	=	0x00ac
                           0000AF   367 _EA	=	0x00af
                           0000B0   368 _P3_0	=	0x00b0
                           0000B1   369 _P3_1	=	0x00b1
                           0000B2   370 _P3_2	=	0x00b2
                           0000B3   371 _P3_3	=	0x00b3
                           0000B4   372 _P3_4	=	0x00b4
                           0000B5   373 _P3_5	=	0x00b5
                           0000B6   374 _P3_6	=	0x00b6
                           0000B7   375 _P3_7	=	0x00b7
                           0000B0   376 _RXD	=	0x00b0
                           0000B1   377 _TXD	=	0x00b1
                           0000B2   378 _INT0	=	0x00b2
                           0000B3   379 _INT1	=	0x00b3
                           0000B4   380 _T0	=	0x00b4
                           0000B5   381 _T1	=	0x00b5
                           0000B6   382 _WR	=	0x00b6
                           0000B7   383 _RD	=	0x00b7
                           0000B8   384 _PX0	=	0x00b8
                           0000B9   385 _PT0	=	0x00b9
                           0000BA   386 _PX1	=	0x00ba
                           0000BB   387 _PT1	=	0x00bb
                           0000BC   388 _PS	=	0x00bc
                           0000D0   389 _P	=	0x00d0
                           0000D1   390 _F1	=	0x00d1
                           0000D2   391 _OV	=	0x00d2
                           0000D3   392 _RS0	=	0x00d3
                           0000D4   393 _RS1	=	0x00d4
                           0000D5   394 _F0	=	0x00d5
                           0000D6   395 _AC	=	0x00d6
                           0000D7   396 _CY	=	0x00d7
                           0000AD   397 _ET2	=	0x00ad
                           0000BD   398 _PT2	=	0x00bd
                           0000C8   399 _T2CON_0	=	0x00c8
                           0000C9   400 _T2CON_1	=	0x00c9
                           0000CA   401 _T2CON_2	=	0x00ca
                           0000CB   402 _T2CON_3	=	0x00cb
                           0000CC   403 _T2CON_4	=	0x00cc
                           0000CD   404 _T2CON_5	=	0x00cd
                           0000CE   405 _T2CON_6	=	0x00ce
                           0000CF   406 _T2CON_7	=	0x00cf
                           0000C8   407 _CP_RL2	=	0x00c8
                           0000C9   408 _C_T2	=	0x00c9
                           0000CA   409 _TR2	=	0x00ca
                           0000CB   410 _EXEN2	=	0x00cb
                           0000CC   411 _TCLK	=	0x00cc
                           0000CD   412 _RCLK	=	0x00cd
                           0000CE   413 _EXF2	=	0x00ce
                           0000CF   414 _TF2	=	0x00cf
                           0000DF   415 _CF	=	0x00df
                           0000DE   416 _CR	=	0x00de
                           0000DC   417 _CCF4	=	0x00dc
                           0000DB   418 _CCF3	=	0x00db
                           0000DA   419 _CCF2	=	0x00da
                           0000D9   420 _CCF1	=	0x00d9
                           0000D8   421 _CCF0	=	0x00d8
                           0000AE   422 _EC	=	0x00ae
                           0000BE   423 _PPCL	=	0x00be
                           0000BD   424 _PT2L	=	0x00bd
                           0000BC   425 _PSL	=	0x00bc
                           0000BB   426 _PT1L	=	0x00bb
                           0000BA   427 _PX1L	=	0x00ba
                           0000B9   428 _PT0L	=	0x00b9
                           0000B8   429 _PX0L	=	0x00b8
                           0000C0   430 _P4_0	=	0x00c0
                           0000C1   431 _P4_1	=	0x00c1
                           0000C2   432 _P4_2	=	0x00c2
                           0000C3   433 _P4_3	=	0x00c3
                           0000C4   434 _P4_4	=	0x00c4
                           0000C5   435 _P4_5	=	0x00c5
                           0000C6   436 _P4_6	=	0x00c6
                           0000C7   437 _P4_7	=	0x00c7
                           0000E8   438 _P5_0	=	0x00e8
                           0000E9   439 _P5_1	=	0x00e9
                           0000EA   440 _P5_2	=	0x00ea
                           0000EB   441 _P5_3	=	0x00eb
                           0000EC   442 _P5_4	=	0x00ec
                           0000ED   443 _P5_5	=	0x00ed
                           0000EE   444 _P5_6	=	0x00ee
                           0000EF   445 _P5_7	=	0x00ef
                                    446 ;--------------------------------------------------------
                                    447 ; overlayable register banks
                                    448 ;--------------------------------------------------------
                                    449 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        450 	.ds 8
                                    451 ;--------------------------------------------------------
                                    452 ; internal ram data
                                    453 ;--------------------------------------------------------
                                    454 	.area DSEG    (DATA)
      000000                        455 _putsLCD_sloc0_1_0:
      000000                        456 	.ds 2
      000002                        457 _putsLCD_sloc1_1_0:
      000002                        458 	.ds 3
                                    459 ;--------------------------------------------------------
                                    460 ; overlayable items in internal ram 
                                    461 ;--------------------------------------------------------
                                    462 ;--------------------------------------------------------
                                    463 ; indirectly addressable internal ram data
                                    464 ;--------------------------------------------------------
                                    465 	.area ISEG    (DATA)
                                    466 ;--------------------------------------------------------
                                    467 ; absolute internal ram data
                                    468 ;--------------------------------------------------------
                                    469 	.area IABS    (ABS,DATA)
                                    470 	.area IABS    (ABS,DATA)
                                    471 ;--------------------------------------------------------
                                    472 ; bit data
                                    473 ;--------------------------------------------------------
                                    474 	.area BSEG    (BIT)
                                    475 ;--------------------------------------------------------
                                    476 ; paged external ram data
                                    477 ;--------------------------------------------------------
                                    478 	.area PSEG    (PAG,XDATA)
                                    479 ;--------------------------------------------------------
                                    480 ; external ram data
                                    481 ;--------------------------------------------------------
                                    482 	.area XSEG    (XDATA)
                           00F000   483 _lcdGeneral	=	0xf000
                           00F200   484 _busyPoll	=	0xf200
                           00F100   485 _writeCharacter	=	0xf100
                           00F300   486 _readCharacter	=	0xf300
      000000                        487 _lcdPutCh_x_65536_76:
      000000                        488 	.ds 1
      000001                        489 _goToAddr_x_65536_79:
      000001                        490 	.ds 1
      000002                        491 _goToXY_PARM_2:
      000002                        492 	.ds 1
      000003                        493 _goToXY_x_65536_81:
      000003                        494 	.ds 1
      000004                        495 _customCharacter_x_65536_83:
      000004                        496 	.ds 8
      00000C                        497 _putsLCD_y_65536_86:
      00000C                        498 	.ds 3
      00000F                        499 _putsLCD_i_65536_87:
      00000F                        500 	.ds 2
      000011                        501 _gets_s_65536_90:
      000011                        502 	.ds 3
      000014                        503 _gets_count_65536_91:
      000014                        504 	.ds 2
      000016                        505 _ramDump_i_65536_96:
      000016                        506 	.ds 1
      000017                        507 _gamePacman_i_65536_107:
      000017                        508 	.ds 2
      000019                        509 _printBinary_x_65536_115:
      000019                        510 	.ds 2
      00001B                        511 _atoh_ap_65536_118:
      00001B                        512 	.ds 3
      00001E                        513 _atoh_p_65536_119:
      00001E                        514 	.ds 3
      000021                        515 _atoh_n_65536_119:
      000021                        516 	.ds 2
      000023                        517 _atoh_lcase_65536_119:
      000023                        518 	.ds 2
                                    519 ;--------------------------------------------------------
                                    520 ; absolute external ram data
                                    521 ;--------------------------------------------------------
                                    522 	.area XABS    (ABS,XDATA)
                                    523 ;--------------------------------------------------------
                                    524 ; external initialized ram data
                                    525 ;--------------------------------------------------------
                                    526 	.area XISEG   (XDATA)
                                    527 	.area HOME    (CODE)
                                    528 	.area GSINIT0 (CODE)
                                    529 	.area GSINIT1 (CODE)
                                    530 	.area GSINIT2 (CODE)
                                    531 	.area GSINIT3 (CODE)
                                    532 	.area GSINIT4 (CODE)
                                    533 	.area GSINIT5 (CODE)
                                    534 	.area GSINIT  (CODE)
                                    535 	.area GSFINAL (CODE)
                                    536 	.area CSEG    (CODE)
                                    537 ;--------------------------------------------------------
                                    538 ; global & static initialisations
                                    539 ;--------------------------------------------------------
                                    540 	.area HOME    (CODE)
                                    541 	.area GSINIT  (CODE)
                                    542 	.area GSFINAL (CODE)
                                    543 	.area GSINIT  (CODE)
                                    544 ;--------------------------------------------------------
                                    545 ; Home
                                    546 ;--------------------------------------------------------
                                    547 	.area HOME    (CODE)
                                    548 	.area HOME    (CODE)
                                    549 ;--------------------------------------------------------
                                    550 ; code
                                    551 ;--------------------------------------------------------
                                    552 	.area CSEG    (CODE)
                                    553 ;------------------------------------------------------------
                                    554 ;Allocation info for local variables in function 'delay'
                                    555 ;------------------------------------------------------------
                                    556 ;i                         Allocated with name '_delay_i_65536_71'
                                    557 ;------------------------------------------------------------
                                    558 ;	lcdCommands.c:9: void delay()
                                    559 ;	-----------------------------------------
                                    560 ;	 function delay
                                    561 ;	-----------------------------------------
      000000                        562 _delay:
                           000007   563 	ar7 = 0x07
                           000006   564 	ar6 = 0x06
                           000005   565 	ar5 = 0x05
                           000004   566 	ar4 = 0x04
                           000003   567 	ar3 = 0x03
                           000002   568 	ar2 = 0x02
                           000001   569 	ar1 = 0x01
                           000000   570 	ar0 = 0x00
                                    571 ;	lcdCommands.c:12: for ( i = 0 ; i < 1000; i++);
      000000 7E E8            [12]  572 	mov	r6,#0xe8
      000002 7F 03            [12]  573 	mov	r7,#0x03
      000004                        574 00104$:
      000004 1E               [12]  575 	dec	r6
      000005 BE FF 01         [24]  576 	cjne	r6,#0xff,00113$
      000008 1F               [12]  577 	dec	r7
      000009                        578 00113$:
      000009 EE               [12]  579 	mov	a,r6
      00000A 4F               [12]  580 	orl	a,r7
      00000B 70 F7            [24]  581 	jnz	00104$
                                    582 ;	lcdCommands.c:13: }
      00000D 22               [24]  583 	ret
                                    584 ;------------------------------------------------------------
                                    585 ;Allocation info for local variables in function 'timerInit'
                                    586 ;------------------------------------------------------------
                                    587 ;	lcdCommands.c:15: void timerInit()
                                    588 ;	-----------------------------------------
                                    589 ;	 function timerInit
                                    590 ;	-----------------------------------------
      00000E                        591 _timerInit:
                                    592 ;	lcdCommands.c:17: TMOD |= 0x01;
      00000E 43 89 01         [24]  593 	orl	_TMOD,#0x01
                                    594 ;	lcdCommands.c:18: TH0 = 0x4B;
      000011 75 8C 4B         [24]  595 	mov	_TH0,#0x4b
                                    596 ;	lcdCommands.c:19: TL0 = 0xFC;
      000014 75 8A FC         [24]  597 	mov	_TL0,#0xfc
                                    598 ;	lcdCommands.c:20: TR0 = 1;           //turn ON Timer zero
                                    599 ;	assignBit
      000017 D2 8C            [12]  600 	setb	_TR0
                                    601 ;	lcdCommands.c:21: EA = 1;            //Enable Global Interrupt bit
                                    602 ;	assignBit
      000019 D2 AF            [12]  603 	setb	_EA
                                    604 ;	lcdCommands.c:22: ET0 = 1;           //Enable TImer0 Interrupt
                                    605 ;	assignBit
      00001B D2 A9            [12]  606 	setb	_ET0
                                    607 ;	lcdCommands.c:23: }
      00001D 22               [24]  608 	ret
                                    609 ;------------------------------------------------------------
                                    610 ;Allocation info for local variables in function 'busyWait'
                                    611 ;------------------------------------------------------------
                                    612 ;	lcdCommands.c:25: void busyWait()
                                    613 ;	-----------------------------------------
                                    614 ;	 function busyWait
                                    615 ;	-----------------------------------------
      00001E                        616 _busyWait:
                                    617 ;	lcdCommands.c:27: while (busyPoll & 0x80);
      00001E                        618 00101$:
      00001E 90 F2 00         [24]  619 	mov	dptr,#_busyPoll
      000021 E0               [24]  620 	movx	a,@dptr
      000022 FE               [12]  621 	mov	r6,a
      000023 A3               [24]  622 	inc	dptr
      000024 E0               [24]  623 	movx	a,@dptr
      000025 EE               [12]  624 	mov	a,r6
      000026 20 E7 F5         [24]  625 	jb	acc.7,00101$
                                    626 ;	lcdCommands.c:28: }
      000029 22               [24]  627 	ret
                                    628 ;------------------------------------------------------------
                                    629 ;Allocation info for local variables in function 'lcdInit'
                                    630 ;------------------------------------------------------------
                                    631 ;	lcdCommands.c:30: void lcdInit()
                                    632 ;	-----------------------------------------
                                    633 ;	 function lcdInit
                                    634 ;	-----------------------------------------
      00002A                        635 _lcdInit:
                                    636 ;	lcdCommands.c:32: delay();
      00002A 12r00r00         [24]  637 	lcall	_delay
                                    638 ;	lcdCommands.c:33: lcdGeneral = 0x30;
      00002D 90 F0 00         [24]  639 	mov	dptr,#_lcdGeneral
      000030 74 30            [12]  640 	mov	a,#0x30
      000032 F0               [24]  641 	movx	@dptr,a
      000033 E4               [12]  642 	clr	a
      000034 A3               [24]  643 	inc	dptr
      000035 F0               [24]  644 	movx	@dptr,a
                                    645 ;	lcdCommands.c:34: delay();
      000036 12r00r00         [24]  646 	lcall	_delay
                                    647 ;	lcdCommands.c:35: lcdGeneral = 0x30;
      000039 90 F0 00         [24]  648 	mov	dptr,#_lcdGeneral
      00003C 74 30            [12]  649 	mov	a,#0x30
      00003E F0               [24]  650 	movx	@dptr,a
      00003F E4               [12]  651 	clr	a
      000040 A3               [24]  652 	inc	dptr
      000041 F0               [24]  653 	movx	@dptr,a
                                    654 ;	lcdCommands.c:36: delay();
      000042 12r00r00         [24]  655 	lcall	_delay
                                    656 ;	lcdCommands.c:37: lcdGeneral = 0x30;
      000045 90 F0 00         [24]  657 	mov	dptr,#_lcdGeneral
      000048 74 30            [12]  658 	mov	a,#0x30
      00004A F0               [24]  659 	movx	@dptr,a
      00004B E4               [12]  660 	clr	a
      00004C A3               [24]  661 	inc	dptr
      00004D F0               [24]  662 	movx	@dptr,a
                                    663 ;	lcdCommands.c:38: busyWait();
      00004E 12r00r1E         [24]  664 	lcall	_busyWait
                                    665 ;	lcdCommands.c:39: lcdGeneral = 0x38;
      000051 90 F0 00         [24]  666 	mov	dptr,#_lcdGeneral
      000054 74 38            [12]  667 	mov	a,#0x38
      000056 F0               [24]  668 	movx	@dptr,a
      000057 E4               [12]  669 	clr	a
      000058 A3               [24]  670 	inc	dptr
      000059 F0               [24]  671 	movx	@dptr,a
                                    672 ;	lcdCommands.c:40: busyWait();
      00005A 12r00r1E         [24]  673 	lcall	_busyWait
                                    674 ;	lcdCommands.c:41: lcdGeneral = 0x08;
      00005D 90 F0 00         [24]  675 	mov	dptr,#_lcdGeneral
      000060 74 08            [12]  676 	mov	a,#0x08
      000062 F0               [24]  677 	movx	@dptr,a
      000063 E4               [12]  678 	clr	a
      000064 A3               [24]  679 	inc	dptr
      000065 F0               [24]  680 	movx	@dptr,a
                                    681 ;	lcdCommands.c:42: busyWait();
      000066 12r00r1E         [24]  682 	lcall	_busyWait
                                    683 ;	lcdCommands.c:43: lcdGeneral = 0x0C;
      000069 90 F0 00         [24]  684 	mov	dptr,#_lcdGeneral
      00006C 74 0C            [12]  685 	mov	a,#0x0c
      00006E F0               [24]  686 	movx	@dptr,a
      00006F E4               [12]  687 	clr	a
      000070 A3               [24]  688 	inc	dptr
      000071 F0               [24]  689 	movx	@dptr,a
                                    690 ;	lcdCommands.c:44: busyWait();
      000072 12r00r1E         [24]  691 	lcall	_busyWait
                                    692 ;	lcdCommands.c:45: lcdGeneral = 0x06;
      000075 90 F0 00         [24]  693 	mov	dptr,#_lcdGeneral
      000078 74 06            [12]  694 	mov	a,#0x06
      00007A F0               [24]  695 	movx	@dptr,a
      00007B E4               [12]  696 	clr	a
      00007C A3               [24]  697 	inc	dptr
      00007D F0               [24]  698 	movx	@dptr,a
                                    699 ;	lcdCommands.c:46: busyWait();
      00007E 12r00r1E         [24]  700 	lcall	_busyWait
                                    701 ;	lcdCommands.c:47: lcdGeneral = 0x01;
      000081 90 F0 00         [24]  702 	mov	dptr,#_lcdGeneral
      000084 74 01            [12]  703 	mov	a,#0x01
      000086 F0               [24]  704 	movx	@dptr,a
      000087 E4               [12]  705 	clr	a
      000088 A3               [24]  706 	inc	dptr
      000089 F0               [24]  707 	movx	@dptr,a
                                    708 ;	lcdCommands.c:48: }
      00008A 22               [24]  709 	ret
                                    710 ;------------------------------------------------------------
                                    711 ;Allocation info for local variables in function 'lcdPutCh'
                                    712 ;------------------------------------------------------------
                                    713 ;x                         Allocated with name '_lcdPutCh_x_65536_76'
                                    714 ;------------------------------------------------------------
                                    715 ;	lcdCommands.c:50: void lcdPutCh(uint8_t x)
                                    716 ;	-----------------------------------------
                                    717 ;	 function lcdPutCh
                                    718 ;	-----------------------------------------
      00008B                        719 _lcdPutCh:
      00008B E5 82            [12]  720 	mov	a,dpl
      00008D 90r00r00         [24]  721 	mov	dptr,#_lcdPutCh_x_65536_76
      000090 F0               [24]  722 	movx	@dptr,a
                                    723 ;	lcdCommands.c:52: busyWait();
      000091 12r00r1E         [24]  724 	lcall	_busyWait
                                    725 ;	lcdCommands.c:53: writeCharacter = x;
      000094 90r00r00         [24]  726 	mov	dptr,#_lcdPutCh_x_65536_76
      000097 E0               [24]  727 	movx	a,@dptr
      000098 90 F1 00         [24]  728 	mov	dptr,#_writeCharacter
      00009B F0               [24]  729 	movx	@dptr,a
      00009C E4               [12]  730 	clr	a
      00009D A3               [24]  731 	inc	dptr
      00009E F0               [24]  732 	movx	@dptr,a
                                    733 ;	lcdCommands.c:54: }
      00009F 22               [24]  734 	ret
                                    735 ;------------------------------------------------------------
                                    736 ;Allocation info for local variables in function 'lcdClear'
                                    737 ;------------------------------------------------------------
                                    738 ;	lcdCommands.c:56: void lcdClear()
                                    739 ;	-----------------------------------------
                                    740 ;	 function lcdClear
                                    741 ;	-----------------------------------------
      0000A0                        742 _lcdClear:
                                    743 ;	lcdCommands.c:58: busyWait();
      0000A0 12r00r1E         [24]  744 	lcall	_busyWait
                                    745 ;	lcdCommands.c:59: lcdGeneral = 0x01;
      0000A3 90 F0 00         [24]  746 	mov	dptr,#_lcdGeneral
      0000A6 74 01            [12]  747 	mov	a,#0x01
      0000A8 F0               [24]  748 	movx	@dptr,a
      0000A9 E4               [12]  749 	clr	a
      0000AA A3               [24]  750 	inc	dptr
      0000AB F0               [24]  751 	movx	@dptr,a
                                    752 ;	lcdCommands.c:60: }
      0000AC 22               [24]  753 	ret
                                    754 ;------------------------------------------------------------
                                    755 ;Allocation info for local variables in function 'goToAddr'
                                    756 ;------------------------------------------------------------
                                    757 ;x                         Allocated with name '_goToAddr_x_65536_79'
                                    758 ;------------------------------------------------------------
                                    759 ;	lcdCommands.c:62: void goToAddr(uint8_t x)
                                    760 ;	-----------------------------------------
                                    761 ;	 function goToAddr
                                    762 ;	-----------------------------------------
      0000AD                        763 _goToAddr:
      0000AD E5 82            [12]  764 	mov	a,dpl
      0000AF 90r00r01         [24]  765 	mov	dptr,#_goToAddr_x_65536_79
      0000B2 F0               [24]  766 	movx	@dptr,a
                                    767 ;	lcdCommands.c:64: busyWait();
      0000B3 12r00r1E         [24]  768 	lcall	_busyWait
                                    769 ;	lcdCommands.c:65: lcdGeneral = 0x80 | x;
      0000B6 90r00r01         [24]  770 	mov	dptr,#_goToAddr_x_65536_79
      0000B9 E0               [24]  771 	movx	a,@dptr
      0000BA FF               [12]  772 	mov	r7,a
      0000BB 7E 00            [12]  773 	mov	r6,#0x00
      0000BD 90 F0 00         [24]  774 	mov	dptr,#_lcdGeneral
      0000C0 74 80            [12]  775 	mov	a,#0x80
      0000C2 4F               [12]  776 	orl	a,r7
      0000C3 F0               [24]  777 	movx	@dptr,a
      0000C4 EE               [12]  778 	mov	a,r6
      0000C5 A3               [24]  779 	inc	dptr
      0000C6 F0               [24]  780 	movx	@dptr,a
                                    781 ;	lcdCommands.c:66: }
      0000C7 22               [24]  782 	ret
                                    783 ;------------------------------------------------------------
                                    784 ;Allocation info for local variables in function 'goToXY'
                                    785 ;------------------------------------------------------------
                                    786 ;y                         Allocated with name '_goToXY_PARM_2'
                                    787 ;x                         Allocated with name '_goToXY_x_65536_81'
                                    788 ;------------------------------------------------------------
                                    789 ;	lcdCommands.c:68: void goToXY(uint8_t x, uint8_t y)
                                    790 ;	-----------------------------------------
                                    791 ;	 function goToXY
                                    792 ;	-----------------------------------------
      0000C8                        793 _goToXY:
      0000C8 E5 82            [12]  794 	mov	a,dpl
      0000CA 90r00r03         [24]  795 	mov	dptr,#_goToXY_x_65536_81
      0000CD F0               [24]  796 	movx	@dptr,a
                                    797 ;	lcdCommands.c:70: busyWait();
      0000CE 12r00r1E         [24]  798 	lcall	_busyWait
                                    799 ;	lcdCommands.c:71: goToAddr(lookUpTable[x][y]);
      0000D1 90r00r03         [24]  800 	mov	dptr,#_goToXY_x_65536_81
      0000D4 E0               [24]  801 	movx	a,@dptr
      0000D5 75 F0 10         [24]  802 	mov	b,#0x10
      0000D8 A4               [48]  803 	mul	ab
      0000D9 24rF4            [12]  804 	add	a,#_lookUpTable
      0000DB FE               [12]  805 	mov	r6,a
      0000DC 74s01            [12]  806 	mov	a,#(_lookUpTable >> 8)
      0000DE 35 F0            [12]  807 	addc	a,b
      0000E0 FF               [12]  808 	mov	r7,a
      0000E1 90r00r02         [24]  809 	mov	dptr,#_goToXY_PARM_2
      0000E4 E0               [24]  810 	movx	a,@dptr
      0000E5 2E               [12]  811 	add	a,r6
      0000E6 F5 82            [12]  812 	mov	dpl,a
      0000E8 E4               [12]  813 	clr	a
      0000E9 3F               [12]  814 	addc	a,r7
      0000EA F5 83            [12]  815 	mov	dph,a
      0000EC E4               [12]  816 	clr	a
      0000ED 93               [24]  817 	movc	a,@a+dptr
      0000EE F5 82            [12]  818 	mov	dpl,a
                                    819 ;	lcdCommands.c:72: }
      0000F0 02r00rAD         [24]  820 	ljmp	_goToAddr
                                    821 ;------------------------------------------------------------
                                    822 ;Allocation info for local variables in function 'customCharacter'
                                    823 ;------------------------------------------------------------
                                    824 ;temp                      Allocated with name '_customCharacter_temp_65536_83'
                                    825 ;decimal                   Allocated with name '_customCharacter_decimal_65536_83'
                                    826 ;x                         Allocated with name '_customCharacter_x_65536_83'
                                    827 ;------------------------------------------------------------
                                    828 ;	lcdCommands.c:74: void customCharacter()
                                    829 ;	-----------------------------------------
                                    830 ;	 function customCharacter
                                    831 ;	-----------------------------------------
      0000F3                        832 _customCharacter:
                                    833 ;	lcdCommands.c:79: busyWait();
      0000F3 12r00r1E         [24]  834 	lcall	_busyWait
                                    835 ;	lcdCommands.c:80: lcdGeneral = 0x40 | 0x10;
      0000F6 90 F0 00         [24]  836 	mov	dptr,#_lcdGeneral
      0000F9 74 50            [12]  837 	mov	a,#0x50
      0000FB F0               [24]  838 	movx	@dptr,a
      0000FC E4               [12]  839 	clr	a
      0000FD A3               [24]  840 	inc	dptr
      0000FE F0               [24]  841 	movx	@dptr,a
                                    842 ;	lcdCommands.c:81: busyWait();
      0000FF 12r00r1E         [24]  843 	lcall	_busyWait
                                    844 ;	lcdCommands.c:82: printf_tiny("\n\rEnter value for Row 1\n\r");
      000102 74r34            [12]  845 	mov	a,#___str_0
      000104 C0 E0            [24]  846 	push	acc
      000106 74s02            [12]  847 	mov	a,#(___str_0 >> 8)
      000108 C0 E0            [24]  848 	push	acc
      00010A 12r00r00         [24]  849 	lcall	_printf_tiny
      00010D 15 81            [12]  850 	dec	sp
      00010F 15 81            [12]  851 	dec	sp
                                    852 ;	lcdCommands.c:83: gets(x);
      000111 90r00r04         [24]  853 	mov	dptr,#_customCharacter_x_65536_83
      000114 75 F0 00         [24]  854 	mov	b,#0x00
      000117 12r05r83         [24]  855 	lcall	_gets
                                    856 ;	lcdCommands.c:84: temp = atoh(x);
      00011A 90r00r04         [24]  857 	mov	dptr,#_customCharacter_x_65536_83
      00011D 75 F0 00         [24]  858 	mov	b,#0x00
      000120 12r0CrB9         [24]  859 	lcall	_atoh
      000123 AE 82            [24]  860 	mov	r6,dpl
      000125 AF 83            [24]  861 	mov	r7,dph
                                    862 ;	lcdCommands.c:87: memset(x,'\0',8 * sizeof(char));
      000127 90r00r00         [24]  863 	mov	dptr,#_memset_PARM_2
      00012A E4               [12]  864 	clr	a
      00012B F0               [24]  865 	movx	@dptr,a
      00012C 90r00r00         [24]  866 	mov	dptr,#_memset_PARM_3
      00012F 74 08            [12]  867 	mov	a,#0x08
      000131 F0               [24]  868 	movx	@dptr,a
      000132 E4               [12]  869 	clr	a
      000133 A3               [24]  870 	inc	dptr
      000134 F0               [24]  871 	movx	@dptr,a
      000135 90r00r04         [24]  872 	mov	dptr,#_customCharacter_x_65536_83
      000138 75 F0 00         [24]  873 	mov	b,#0x00
      00013B C0 07            [24]  874 	push	ar7
      00013D C0 06            [24]  875 	push	ar6
      00013F 12r00r00         [24]  876 	lcall	_memset
      000142 D0 06            [24]  877 	pop	ar6
      000144 D0 07            [24]  878 	pop	ar7
                                    879 ;	lcdCommands.c:88: writeCharacter = temp & 0xFF;
      000146 90 F1 00         [24]  880 	mov	dptr,#_writeCharacter
      000149 EE               [12]  881 	mov	a,r6
      00014A F0               [24]  882 	movx	@dptr,a
      00014B E4               [12]  883 	clr	a
      00014C A3               [24]  884 	inc	dptr
      00014D F0               [24]  885 	movx	@dptr,a
                                    886 ;	lcdCommands.c:89: busyWait();
      00014E 12r00r1E         [24]  887 	lcall	_busyWait
                                    888 ;	lcdCommands.c:90: lcdGeneral = 0x40 | 0x11;
      000151 90 F0 00         [24]  889 	mov	dptr,#_lcdGeneral
      000154 74 51            [12]  890 	mov	a,#0x51
      000156 F0               [24]  891 	movx	@dptr,a
      000157 E4               [12]  892 	clr	a
      000158 A3               [24]  893 	inc	dptr
      000159 F0               [24]  894 	movx	@dptr,a
                                    895 ;	lcdCommands.c:91: busyWait();
      00015A 12r00r1E         [24]  896 	lcall	_busyWait
                                    897 ;	lcdCommands.c:93: printf_tiny("\n\rEnter value for Row 2\n\r");
      00015D 74r4E            [12]  898 	mov	a,#___str_1
      00015F C0 E0            [24]  899 	push	acc
      000161 74s02            [12]  900 	mov	a,#(___str_1 >> 8)
      000163 C0 E0            [24]  901 	push	acc
      000165 12r00r00         [24]  902 	lcall	_printf_tiny
      000168 15 81            [12]  903 	dec	sp
      00016A 15 81            [12]  904 	dec	sp
                                    905 ;	lcdCommands.c:94: gets(x);
      00016C 90r00r04         [24]  906 	mov	dptr,#_customCharacter_x_65536_83
      00016F 75 F0 00         [24]  907 	mov	b,#0x00
      000172 12r05r83         [24]  908 	lcall	_gets
                                    909 ;	lcdCommands.c:95: decimal = atoi(x);
      000175 90r00r04         [24]  910 	mov	dptr,#_customCharacter_x_65536_83
      000178 75 F0 00         [24]  911 	mov	b,#0x00
      00017B 12r00r00         [24]  912 	lcall	_atoi
                                    913 ;	lcdCommands.c:96: printBinary(decimal);
      00017E 12r0Cr68         [24]  914 	lcall	_printBinary
                                    915 ;	lcdCommands.c:97: temp = atoh(x);
      000181 90r00r04         [24]  916 	mov	dptr,#_customCharacter_x_65536_83
      000184 75 F0 00         [24]  917 	mov	b,#0x00
      000187 12r0CrB9         [24]  918 	lcall	_atoh
      00018A AE 82            [24]  919 	mov	r6,dpl
      00018C AF 83            [24]  920 	mov	r7,dph
                                    921 ;	lcdCommands.c:98: memset(x,'\0',8 * sizeof(char));
      00018E 90r00r00         [24]  922 	mov	dptr,#_memset_PARM_2
      000191 E4               [12]  923 	clr	a
      000192 F0               [24]  924 	movx	@dptr,a
      000193 90r00r00         [24]  925 	mov	dptr,#_memset_PARM_3
      000196 74 08            [12]  926 	mov	a,#0x08
      000198 F0               [24]  927 	movx	@dptr,a
      000199 E4               [12]  928 	clr	a
      00019A A3               [24]  929 	inc	dptr
      00019B F0               [24]  930 	movx	@dptr,a
      00019C 90r00r04         [24]  931 	mov	dptr,#_customCharacter_x_65536_83
      00019F 75 F0 00         [24]  932 	mov	b,#0x00
      0001A2 C0 07            [24]  933 	push	ar7
      0001A4 C0 06            [24]  934 	push	ar6
      0001A6 12r00r00         [24]  935 	lcall	_memset
      0001A9 D0 06            [24]  936 	pop	ar6
      0001AB D0 07            [24]  937 	pop	ar7
                                    938 ;	lcdCommands.c:99: writeCharacter = temp & 0xFF;
      0001AD 90 F1 00         [24]  939 	mov	dptr,#_writeCharacter
      0001B0 EE               [12]  940 	mov	a,r6
      0001B1 F0               [24]  941 	movx	@dptr,a
      0001B2 E4               [12]  942 	clr	a
      0001B3 A3               [24]  943 	inc	dptr
      0001B4 F0               [24]  944 	movx	@dptr,a
                                    945 ;	lcdCommands.c:100: busyWait();
      0001B5 12r00r1E         [24]  946 	lcall	_busyWait
                                    947 ;	lcdCommands.c:101: lcdGeneral = 0x40 | 0x12;
      0001B8 90 F0 00         [24]  948 	mov	dptr,#_lcdGeneral
      0001BB 74 52            [12]  949 	mov	a,#0x52
      0001BD F0               [24]  950 	movx	@dptr,a
      0001BE E4               [12]  951 	clr	a
      0001BF A3               [24]  952 	inc	dptr
      0001C0 F0               [24]  953 	movx	@dptr,a
                                    954 ;	lcdCommands.c:102: busyWait();
      0001C1 12r00r1E         [24]  955 	lcall	_busyWait
                                    956 ;	lcdCommands.c:103: printf_tiny("\n\rEnter value for Row 3\n\r");
      0001C4 74r68            [12]  957 	mov	a,#___str_2
      0001C6 C0 E0            [24]  958 	push	acc
      0001C8 74s02            [12]  959 	mov	a,#(___str_2 >> 8)
      0001CA C0 E0            [24]  960 	push	acc
      0001CC 12r00r00         [24]  961 	lcall	_printf_tiny
      0001CF 15 81            [12]  962 	dec	sp
      0001D1 15 81            [12]  963 	dec	sp
                                    964 ;	lcdCommands.c:104: gets(x);
      0001D3 90r00r04         [24]  965 	mov	dptr,#_customCharacter_x_65536_83
      0001D6 75 F0 00         [24]  966 	mov	b,#0x00
      0001D9 12r05r83         [24]  967 	lcall	_gets
                                    968 ;	lcdCommands.c:105: decimal = atoi(x);
      0001DC 90r00r04         [24]  969 	mov	dptr,#_customCharacter_x_65536_83
      0001DF 75 F0 00         [24]  970 	mov	b,#0x00
      0001E2 12r00r00         [24]  971 	lcall	_atoi
                                    972 ;	lcdCommands.c:106: printBinary(decimal);
      0001E5 12r0Cr68         [24]  973 	lcall	_printBinary
                                    974 ;	lcdCommands.c:107: temp = atoh(x);
      0001E8 90r00r04         [24]  975 	mov	dptr,#_customCharacter_x_65536_83
      0001EB 75 F0 00         [24]  976 	mov	b,#0x00
      0001EE 12r0CrB9         [24]  977 	lcall	_atoh
      0001F1 AE 82            [24]  978 	mov	r6,dpl
      0001F3 AF 83            [24]  979 	mov	r7,dph
                                    980 ;	lcdCommands.c:108: memset(x,'\0',8 * sizeof(char));
      0001F5 90r00r00         [24]  981 	mov	dptr,#_memset_PARM_2
      0001F8 E4               [12]  982 	clr	a
      0001F9 F0               [24]  983 	movx	@dptr,a
      0001FA 90r00r00         [24]  984 	mov	dptr,#_memset_PARM_3
      0001FD 74 08            [12]  985 	mov	a,#0x08
      0001FF F0               [24]  986 	movx	@dptr,a
      000200 E4               [12]  987 	clr	a
      000201 A3               [24]  988 	inc	dptr
      000202 F0               [24]  989 	movx	@dptr,a
      000203 90r00r04         [24]  990 	mov	dptr,#_customCharacter_x_65536_83
      000206 75 F0 00         [24]  991 	mov	b,#0x00
      000209 C0 07            [24]  992 	push	ar7
      00020B C0 06            [24]  993 	push	ar6
      00020D 12r00r00         [24]  994 	lcall	_memset
      000210 D0 06            [24]  995 	pop	ar6
      000212 D0 07            [24]  996 	pop	ar7
                                    997 ;	lcdCommands.c:109: writeCharacter = temp & 0xFF;
      000214 90 F1 00         [24]  998 	mov	dptr,#_writeCharacter
      000217 EE               [12]  999 	mov	a,r6
      000218 F0               [24] 1000 	movx	@dptr,a
      000219 E4               [12] 1001 	clr	a
      00021A A3               [24] 1002 	inc	dptr
      00021B F0               [24] 1003 	movx	@dptr,a
                                   1004 ;	lcdCommands.c:110: busyWait();
      00021C 12r00r1E         [24] 1005 	lcall	_busyWait
                                   1006 ;	lcdCommands.c:111: lcdGeneral = 0x40 | 0x13;
      00021F 90 F0 00         [24] 1007 	mov	dptr,#_lcdGeneral
      000222 74 53            [12] 1008 	mov	a,#0x53
      000224 F0               [24] 1009 	movx	@dptr,a
      000225 E4               [12] 1010 	clr	a
      000226 A3               [24] 1011 	inc	dptr
      000227 F0               [24] 1012 	movx	@dptr,a
                                   1013 ;	lcdCommands.c:112: busyWait();
      000228 12r00r1E         [24] 1014 	lcall	_busyWait
                                   1015 ;	lcdCommands.c:113: printf_tiny("\n\rEnter value for Row 4\n\r");
      00022B 74r82            [12] 1016 	mov	a,#___str_3
      00022D C0 E0            [24] 1017 	push	acc
      00022F 74s02            [12] 1018 	mov	a,#(___str_3 >> 8)
      000231 C0 E0            [24] 1019 	push	acc
      000233 12r00r00         [24] 1020 	lcall	_printf_tiny
      000236 15 81            [12] 1021 	dec	sp
      000238 15 81            [12] 1022 	dec	sp
                                   1023 ;	lcdCommands.c:114: gets(x);
      00023A 90r00r04         [24] 1024 	mov	dptr,#_customCharacter_x_65536_83
      00023D 75 F0 00         [24] 1025 	mov	b,#0x00
      000240 12r05r83         [24] 1026 	lcall	_gets
                                   1027 ;	lcdCommands.c:115: temp = atoh(x);
      000243 90r00r04         [24] 1028 	mov	dptr,#_customCharacter_x_65536_83
      000246 75 F0 00         [24] 1029 	mov	b,#0x00
      000249 12r0CrB9         [24] 1030 	lcall	_atoh
      00024C AE 82            [24] 1031 	mov	r6,dpl
      00024E AF 83            [24] 1032 	mov	r7,dph
                                   1033 ;	lcdCommands.c:116: memset(x,'\0',8 * sizeof(char));
      000250 90r00r00         [24] 1034 	mov	dptr,#_memset_PARM_2
      000253 E4               [12] 1035 	clr	a
      000254 F0               [24] 1036 	movx	@dptr,a
      000255 90r00r00         [24] 1037 	mov	dptr,#_memset_PARM_3
      000258 74 08            [12] 1038 	mov	a,#0x08
      00025A F0               [24] 1039 	movx	@dptr,a
      00025B E4               [12] 1040 	clr	a
      00025C A3               [24] 1041 	inc	dptr
      00025D F0               [24] 1042 	movx	@dptr,a
      00025E 90r00r04         [24] 1043 	mov	dptr,#_customCharacter_x_65536_83
      000261 75 F0 00         [24] 1044 	mov	b,#0x00
      000264 C0 07            [24] 1045 	push	ar7
      000266 C0 06            [24] 1046 	push	ar6
      000268 12r00r00         [24] 1047 	lcall	_memset
      00026B D0 06            [24] 1048 	pop	ar6
      00026D D0 07            [24] 1049 	pop	ar7
                                   1050 ;	lcdCommands.c:117: writeCharacter = temp & 0xFF;
      00026F 90 F1 00         [24] 1051 	mov	dptr,#_writeCharacter
      000272 EE               [12] 1052 	mov	a,r6
      000273 F0               [24] 1053 	movx	@dptr,a
      000274 E4               [12] 1054 	clr	a
      000275 A3               [24] 1055 	inc	dptr
      000276 F0               [24] 1056 	movx	@dptr,a
                                   1057 ;	lcdCommands.c:118: busyWait();
      000277 12r00r1E         [24] 1058 	lcall	_busyWait
                                   1059 ;	lcdCommands.c:119: lcdGeneral = 0x40 | 0x14;
      00027A 90 F0 00         [24] 1060 	mov	dptr,#_lcdGeneral
      00027D 74 54            [12] 1061 	mov	a,#0x54
      00027F F0               [24] 1062 	movx	@dptr,a
      000280 E4               [12] 1063 	clr	a
      000281 A3               [24] 1064 	inc	dptr
      000282 F0               [24] 1065 	movx	@dptr,a
                                   1066 ;	lcdCommands.c:120: busyWait();
      000283 12r00r1E         [24] 1067 	lcall	_busyWait
                                   1068 ;	lcdCommands.c:121: printf_tiny("\n\rEnter value for Row 5\n\r");
      000286 74r9C            [12] 1069 	mov	a,#___str_4
      000288 C0 E0            [24] 1070 	push	acc
      00028A 74s02            [12] 1071 	mov	a,#(___str_4 >> 8)
      00028C C0 E0            [24] 1072 	push	acc
      00028E 12r00r00         [24] 1073 	lcall	_printf_tiny
      000291 15 81            [12] 1074 	dec	sp
      000293 15 81            [12] 1075 	dec	sp
                                   1076 ;	lcdCommands.c:122: gets(x);
      000295 90r00r04         [24] 1077 	mov	dptr,#_customCharacter_x_65536_83
      000298 75 F0 00         [24] 1078 	mov	b,#0x00
      00029B 12r05r83         [24] 1079 	lcall	_gets
                                   1080 ;	lcdCommands.c:123: temp = atoh(x);
      00029E 90r00r04         [24] 1081 	mov	dptr,#_customCharacter_x_65536_83
      0002A1 75 F0 00         [24] 1082 	mov	b,#0x00
      0002A4 12r0CrB9         [24] 1083 	lcall	_atoh
      0002A7 AE 82            [24] 1084 	mov	r6,dpl
      0002A9 AF 83            [24] 1085 	mov	r7,dph
                                   1086 ;	lcdCommands.c:124: memset(x,'\0',8 * sizeof(char));
      0002AB 90r00r00         [24] 1087 	mov	dptr,#_memset_PARM_2
      0002AE E4               [12] 1088 	clr	a
      0002AF F0               [24] 1089 	movx	@dptr,a
      0002B0 90r00r00         [24] 1090 	mov	dptr,#_memset_PARM_3
      0002B3 74 08            [12] 1091 	mov	a,#0x08
      0002B5 F0               [24] 1092 	movx	@dptr,a
      0002B6 E4               [12] 1093 	clr	a
      0002B7 A3               [24] 1094 	inc	dptr
      0002B8 F0               [24] 1095 	movx	@dptr,a
      0002B9 90r00r04         [24] 1096 	mov	dptr,#_customCharacter_x_65536_83
      0002BC 75 F0 00         [24] 1097 	mov	b,#0x00
      0002BF C0 07            [24] 1098 	push	ar7
      0002C1 C0 06            [24] 1099 	push	ar6
      0002C3 12r00r00         [24] 1100 	lcall	_memset
      0002C6 D0 06            [24] 1101 	pop	ar6
      0002C8 D0 07            [24] 1102 	pop	ar7
                                   1103 ;	lcdCommands.c:125: writeCharacter = temp & 0xFF;
      0002CA 90 F1 00         [24] 1104 	mov	dptr,#_writeCharacter
      0002CD EE               [12] 1105 	mov	a,r6
      0002CE F0               [24] 1106 	movx	@dptr,a
      0002CF E4               [12] 1107 	clr	a
      0002D0 A3               [24] 1108 	inc	dptr
      0002D1 F0               [24] 1109 	movx	@dptr,a
                                   1110 ;	lcdCommands.c:126: busyWait();
      0002D2 12r00r1E         [24] 1111 	lcall	_busyWait
                                   1112 ;	lcdCommands.c:127: lcdGeneral = 0x40 | 0x15;
      0002D5 90 F0 00         [24] 1113 	mov	dptr,#_lcdGeneral
      0002D8 74 55            [12] 1114 	mov	a,#0x55
      0002DA F0               [24] 1115 	movx	@dptr,a
      0002DB E4               [12] 1116 	clr	a
      0002DC A3               [24] 1117 	inc	dptr
      0002DD F0               [24] 1118 	movx	@dptr,a
                                   1119 ;	lcdCommands.c:128: busyWait();
      0002DE 12r00r1E         [24] 1120 	lcall	_busyWait
                                   1121 ;	lcdCommands.c:129: printf_tiny("\n\rEnter value for Row 6\n\r");
      0002E1 74rB6            [12] 1122 	mov	a,#___str_5
      0002E3 C0 E0            [24] 1123 	push	acc
      0002E5 74s02            [12] 1124 	mov	a,#(___str_5 >> 8)
      0002E7 C0 E0            [24] 1125 	push	acc
      0002E9 12r00r00         [24] 1126 	lcall	_printf_tiny
      0002EC 15 81            [12] 1127 	dec	sp
      0002EE 15 81            [12] 1128 	dec	sp
                                   1129 ;	lcdCommands.c:130: gets(x);
      0002F0 90r00r04         [24] 1130 	mov	dptr,#_customCharacter_x_65536_83
      0002F3 75 F0 00         [24] 1131 	mov	b,#0x00
      0002F6 12r05r83         [24] 1132 	lcall	_gets
                                   1133 ;	lcdCommands.c:131: temp = atoh(x);
      0002F9 90r00r04         [24] 1134 	mov	dptr,#_customCharacter_x_65536_83
      0002FC 75 F0 00         [24] 1135 	mov	b,#0x00
      0002FF 12r0CrB9         [24] 1136 	lcall	_atoh
      000302 AE 82            [24] 1137 	mov	r6,dpl
      000304 AF 83            [24] 1138 	mov	r7,dph
                                   1139 ;	lcdCommands.c:132: memset(x,'\0',8 * sizeof(char));
      000306 90r00r00         [24] 1140 	mov	dptr,#_memset_PARM_2
      000309 E4               [12] 1141 	clr	a
      00030A F0               [24] 1142 	movx	@dptr,a
      00030B 90r00r00         [24] 1143 	mov	dptr,#_memset_PARM_3
      00030E 74 08            [12] 1144 	mov	a,#0x08
      000310 F0               [24] 1145 	movx	@dptr,a
      000311 E4               [12] 1146 	clr	a
      000312 A3               [24] 1147 	inc	dptr
      000313 F0               [24] 1148 	movx	@dptr,a
      000314 90r00r04         [24] 1149 	mov	dptr,#_customCharacter_x_65536_83
      000317 75 F0 00         [24] 1150 	mov	b,#0x00
      00031A C0 07            [24] 1151 	push	ar7
      00031C C0 06            [24] 1152 	push	ar6
      00031E 12r00r00         [24] 1153 	lcall	_memset
      000321 D0 06            [24] 1154 	pop	ar6
      000323 D0 07            [24] 1155 	pop	ar7
                                   1156 ;	lcdCommands.c:133: writeCharacter = temp & 0xFF;
      000325 90 F1 00         [24] 1157 	mov	dptr,#_writeCharacter
      000328 EE               [12] 1158 	mov	a,r6
      000329 F0               [24] 1159 	movx	@dptr,a
      00032A E4               [12] 1160 	clr	a
      00032B A3               [24] 1161 	inc	dptr
      00032C F0               [24] 1162 	movx	@dptr,a
                                   1163 ;	lcdCommands.c:134: busyWait();
      00032D 12r00r1E         [24] 1164 	lcall	_busyWait
                                   1165 ;	lcdCommands.c:135: lcdGeneral = 0x40 | 0x16;
      000330 90 F0 00         [24] 1166 	mov	dptr,#_lcdGeneral
      000333 74 56            [12] 1167 	mov	a,#0x56
      000335 F0               [24] 1168 	movx	@dptr,a
      000336 E4               [12] 1169 	clr	a
      000337 A3               [24] 1170 	inc	dptr
      000338 F0               [24] 1171 	movx	@dptr,a
                                   1172 ;	lcdCommands.c:136: busyWait();
      000339 12r00r1E         [24] 1173 	lcall	_busyWait
                                   1174 ;	lcdCommands.c:137: printf_tiny("\n\rEnter value for Row 7\n\r");
      00033C 74rD0            [12] 1175 	mov	a,#___str_6
      00033E C0 E0            [24] 1176 	push	acc
      000340 74s02            [12] 1177 	mov	a,#(___str_6 >> 8)
      000342 C0 E0            [24] 1178 	push	acc
      000344 12r00r00         [24] 1179 	lcall	_printf_tiny
      000347 15 81            [12] 1180 	dec	sp
      000349 15 81            [12] 1181 	dec	sp
                                   1182 ;	lcdCommands.c:138: gets(x);
      00034B 90r00r04         [24] 1183 	mov	dptr,#_customCharacter_x_65536_83
      00034E 75 F0 00         [24] 1184 	mov	b,#0x00
      000351 12r05r83         [24] 1185 	lcall	_gets
                                   1186 ;	lcdCommands.c:139: temp = atoh(x);
      000354 90r00r04         [24] 1187 	mov	dptr,#_customCharacter_x_65536_83
      000357 75 F0 00         [24] 1188 	mov	b,#0x00
      00035A 12r0CrB9         [24] 1189 	lcall	_atoh
      00035D AE 82            [24] 1190 	mov	r6,dpl
      00035F AF 83            [24] 1191 	mov	r7,dph
                                   1192 ;	lcdCommands.c:140: memset(x,'\0',8 * sizeof(char));
      000361 90r00r00         [24] 1193 	mov	dptr,#_memset_PARM_2
      000364 E4               [12] 1194 	clr	a
      000365 F0               [24] 1195 	movx	@dptr,a
      000366 90r00r00         [24] 1196 	mov	dptr,#_memset_PARM_3
      000369 74 08            [12] 1197 	mov	a,#0x08
      00036B F0               [24] 1198 	movx	@dptr,a
      00036C E4               [12] 1199 	clr	a
      00036D A3               [24] 1200 	inc	dptr
      00036E F0               [24] 1201 	movx	@dptr,a
      00036F 90r00r04         [24] 1202 	mov	dptr,#_customCharacter_x_65536_83
      000372 75 F0 00         [24] 1203 	mov	b,#0x00
      000375 C0 07            [24] 1204 	push	ar7
      000377 C0 06            [24] 1205 	push	ar6
      000379 12r00r00         [24] 1206 	lcall	_memset
      00037C D0 06            [24] 1207 	pop	ar6
      00037E D0 07            [24] 1208 	pop	ar7
                                   1209 ;	lcdCommands.c:141: writeCharacter = temp & 0xFF;
      000380 90 F1 00         [24] 1210 	mov	dptr,#_writeCharacter
      000383 EE               [12] 1211 	mov	a,r6
      000384 F0               [24] 1212 	movx	@dptr,a
      000385 E4               [12] 1213 	clr	a
      000386 A3               [24] 1214 	inc	dptr
      000387 F0               [24] 1215 	movx	@dptr,a
                                   1216 ;	lcdCommands.c:142: busyWait();
      000388 12r00r1E         [24] 1217 	lcall	_busyWait
                                   1218 ;	lcdCommands.c:143: lcdGeneral = 0x40 | 0x17;
      00038B 90 F0 00         [24] 1219 	mov	dptr,#_lcdGeneral
      00038E 74 57            [12] 1220 	mov	a,#0x57
      000390 F0               [24] 1221 	movx	@dptr,a
      000391 E4               [12] 1222 	clr	a
      000392 A3               [24] 1223 	inc	dptr
      000393 F0               [24] 1224 	movx	@dptr,a
                                   1225 ;	lcdCommands.c:144: busyWait();
      000394 12r00r1E         [24] 1226 	lcall	_busyWait
                                   1227 ;	lcdCommands.c:145: printf_tiny("\n\rEnter value for Row 8\n\r");
      000397 74rEA            [12] 1228 	mov	a,#___str_7
      000399 C0 E0            [24] 1229 	push	acc
      00039B 74s02            [12] 1230 	mov	a,#(___str_7 >> 8)
      00039D C0 E0            [24] 1231 	push	acc
      00039F 12r00r00         [24] 1232 	lcall	_printf_tiny
      0003A2 15 81            [12] 1233 	dec	sp
      0003A4 15 81            [12] 1234 	dec	sp
                                   1235 ;	lcdCommands.c:146: gets(x);
      0003A6 90r00r04         [24] 1236 	mov	dptr,#_customCharacter_x_65536_83
      0003A9 75 F0 00         [24] 1237 	mov	b,#0x00
      0003AC 12r05r83         [24] 1238 	lcall	_gets
                                   1239 ;	lcdCommands.c:147: temp = atoh(x);
      0003AF 90r00r04         [24] 1240 	mov	dptr,#_customCharacter_x_65536_83
      0003B2 75 F0 00         [24] 1241 	mov	b,#0x00
      0003B5 12r0CrB9         [24] 1242 	lcall	_atoh
      0003B8 AE 82            [24] 1243 	mov	r6,dpl
      0003BA AF 83            [24] 1244 	mov	r7,dph
                                   1245 ;	lcdCommands.c:148: memset(x,'\0',8 * sizeof(char));
      0003BC 90r00r00         [24] 1246 	mov	dptr,#_memset_PARM_2
      0003BF E4               [12] 1247 	clr	a
      0003C0 F0               [24] 1248 	movx	@dptr,a
      0003C1 90r00r00         [24] 1249 	mov	dptr,#_memset_PARM_3
      0003C4 74 08            [12] 1250 	mov	a,#0x08
      0003C6 F0               [24] 1251 	movx	@dptr,a
      0003C7 E4               [12] 1252 	clr	a
      0003C8 A3               [24] 1253 	inc	dptr
      0003C9 F0               [24] 1254 	movx	@dptr,a
      0003CA 90r00r04         [24] 1255 	mov	dptr,#_customCharacter_x_65536_83
      0003CD 75 F0 00         [24] 1256 	mov	b,#0x00
      0003D0 C0 07            [24] 1257 	push	ar7
      0003D2 C0 06            [24] 1258 	push	ar6
      0003D4 12r00r00         [24] 1259 	lcall	_memset
      0003D7 D0 06            [24] 1260 	pop	ar6
      0003D9 D0 07            [24] 1261 	pop	ar7
                                   1262 ;	lcdCommands.c:149: writeCharacter = temp & 0xFF;
      0003DB 90 F1 00         [24] 1263 	mov	dptr,#_writeCharacter
      0003DE EE               [12] 1264 	mov	a,r6
      0003DF F0               [24] 1265 	movx	@dptr,a
      0003E0 E4               [12] 1266 	clr	a
      0003E1 A3               [24] 1267 	inc	dptr
      0003E2 F0               [24] 1268 	movx	@dptr,a
                                   1269 ;	lcdCommands.c:150: busyWait();
      0003E3 12r00r1E         [24] 1270 	lcall	_busyWait
                                   1271 ;	lcdCommands.c:151: goToXY(3,1);
      0003E6 90r00r02         [24] 1272 	mov	dptr,#_goToXY_PARM_2
      0003E9 74 01            [12] 1273 	mov	a,#0x01
      0003EB F0               [24] 1274 	movx	@dptr,a
      0003EC 75 82 03         [24] 1275 	mov	dpl,#0x03
      0003EF 12r00rC8         [24] 1276 	lcall	_goToXY
                                   1277 ;	lcdCommands.c:152: busyWait();
      0003F2 12r00r1E         [24] 1278 	lcall	_busyWait
                                   1279 ;	lcdCommands.c:153: lcdGeneral = 0x80 | 0x01;
      0003F5 90 F0 00         [24] 1280 	mov	dptr,#_lcdGeneral
      0003F8 74 81            [12] 1281 	mov	a,#0x81
      0003FA F0               [24] 1282 	movx	@dptr,a
      0003FB E4               [12] 1283 	clr	a
      0003FC A3               [24] 1284 	inc	dptr
      0003FD F0               [24] 1285 	movx	@dptr,a
                                   1286 ;	lcdCommands.c:154: busyWait();
      0003FE 12r00r1E         [24] 1287 	lcall	_busyWait
                                   1288 ;	lcdCommands.c:155: writeCharacter = 0x01;
      000401 90 F1 00         [24] 1289 	mov	dptr,#_writeCharacter
      000404 74 01            [12] 1290 	mov	a,#0x01
      000406 F0               [24] 1291 	movx	@dptr,a
      000407 E4               [12] 1292 	clr	a
      000408 A3               [24] 1293 	inc	dptr
      000409 F0               [24] 1294 	movx	@dptr,a
                                   1295 ;	lcdCommands.c:156: }
      00040A 22               [24] 1296 	ret
                                   1297 ;------------------------------------------------------------
                                   1298 ;Allocation info for local variables in function 'readLCD'
                                   1299 ;------------------------------------------------------------
                                   1300 ;temp1                     Allocated with name '_readLCD_temp1_65537_85'
                                   1301 ;------------------------------------------------------------
                                   1302 ;	lcdCommands.c:158: uint8_t readLCD()
                                   1303 ;	-----------------------------------------
                                   1304 ;	 function readLCD
                                   1305 ;	-----------------------------------------
      00040B                       1306 _readLCD:
                                   1307 ;	lcdCommands.c:160: busyWait();
      00040B 12r00r1E         [24] 1308 	lcall	_busyWait
                                   1309 ;	lcdCommands.c:161: uint8_t temp1 = readCharacter;
      00040E 90 F3 00         [24] 1310 	mov	dptr,#_readCharacter
      000411 E0               [24] 1311 	movx	a,@dptr
      000412 FE               [12] 1312 	mov	r6,a
      000413 A3               [24] 1313 	inc	dptr
      000414 E0               [24] 1314 	movx	a,@dptr
                                   1315 ;	lcdCommands.c:162: return temp1;
      000415 8E 82            [24] 1316 	mov	dpl,r6
                                   1317 ;	lcdCommands.c:163: }
      000417 22               [24] 1318 	ret
                                   1319 ;------------------------------------------------------------
                                   1320 ;Allocation info for local variables in function 'putsLCD'
                                   1321 ;------------------------------------------------------------
                                   1322 ;sloc0                     Allocated with name '_putsLCD_sloc0_1_0'
                                   1323 ;sloc1                     Allocated with name '_putsLCD_sloc1_1_0'
                                   1324 ;y                         Allocated with name '_putsLCD_y_65536_86'
                                   1325 ;i                         Allocated with name '_putsLCD_i_65536_87'
                                   1326 ;j                         Allocated with name '_putsLCD_j_65536_87'
                                   1327 ;k                         Allocated with name '_putsLCD_k_65536_87'
                                   1328 ;------------------------------------------------------------
                                   1329 ;	lcdCommands.c:165: void putsLCD(char* y)
                                   1330 ;	-----------------------------------------
                                   1331 ;	 function putsLCD
                                   1332 ;	-----------------------------------------
      000418                       1333 _putsLCD:
      000418 AF F0            [24] 1334 	mov	r7,b
      00041A AE 83            [24] 1335 	mov	r6,dph
      00041C E5 82            [12] 1336 	mov	a,dpl
      00041E 90r00r0C         [24] 1337 	mov	dptr,#_putsLCD_y_65536_86
      000421 F0               [24] 1338 	movx	@dptr,a
      000422 EE               [12] 1339 	mov	a,r6
      000423 A3               [24] 1340 	inc	dptr
      000424 F0               [24] 1341 	movx	@dptr,a
      000425 EF               [12] 1342 	mov	a,r7
      000426 A3               [24] 1343 	inc	dptr
      000427 F0               [24] 1344 	movx	@dptr,a
                                   1345 ;	lcdCommands.c:167: int i = 0,j = 0, k =0;
      000428 90r00r0F         [24] 1346 	mov	dptr,#_putsLCD_i_65536_87
      00042B E4               [12] 1347 	clr	a
      00042C F0               [24] 1348 	movx	@dptr,a
      00042D A3               [24] 1349 	inc	dptr
      00042E F0               [24] 1350 	movx	@dptr,a
                                   1351 ;	lcdCommands.c:168: while(y[i + (j * 16)] != '\0')
      00042F 90r00r0C         [24] 1352 	mov	dptr,#_putsLCD_y_65536_86
      000432 E0               [24] 1353 	movx	a,@dptr
      000433 F5*02            [12] 1354 	mov	_putsLCD_sloc1_1_0,a
      000435 A3               [24] 1355 	inc	dptr
      000436 E0               [24] 1356 	movx	a,@dptr
      000437 F5*03            [12] 1357 	mov	(_putsLCD_sloc1_1_0 + 1),a
      000439 A3               [24] 1358 	inc	dptr
      00043A E0               [24] 1359 	movx	a,@dptr
      00043B F5*04            [12] 1360 	mov	(_putsLCD_sloc1_1_0 + 2),a
      00043D AA*02            [24] 1361 	mov	r2,_putsLCD_sloc1_1_0
      00043F AB*03            [24] 1362 	mov	r3,(_putsLCD_sloc1_1_0 + 1)
      000441 AC*04            [24] 1363 	mov	r4,(_putsLCD_sloc1_1_0 + 2)
      000443 78 00            [12] 1364 	mov	r0,#0x00
      000445 79 00            [12] 1365 	mov	r1,#0x00
      000447                       1366 00103$:
      000447 88 06            [24] 1367 	mov	ar6,r0
      000449 E9               [12] 1368 	mov	a,r1
      00044A C4               [12] 1369 	swap	a
      00044B 54 F0            [12] 1370 	anl	a,#0xf0
      00044D CE               [12] 1371 	xch	a,r6
      00044E C4               [12] 1372 	swap	a
      00044F CE               [12] 1373 	xch	a,r6
      000450 6E               [12] 1374 	xrl	a,r6
      000451 CE               [12] 1375 	xch	a,r6
      000452 54 F0            [12] 1376 	anl	a,#0xf0
      000454 CE               [12] 1377 	xch	a,r6
      000455 6E               [12] 1378 	xrl	a,r6
      000456 FF               [12] 1379 	mov	r7,a
      000457 90r00r0F         [24] 1380 	mov	dptr,#_putsLCD_i_65536_87
      00045A E0               [24] 1381 	movx	a,@dptr
      00045B F5*00            [12] 1382 	mov	_putsLCD_sloc0_1_0,a
      00045D A3               [24] 1383 	inc	dptr
      00045E E0               [24] 1384 	movx	a,@dptr
      00045F F5*01            [12] 1385 	mov	(_putsLCD_sloc0_1_0 + 1),a
      000461 EE               [12] 1386 	mov	a,r6
      000462 25*00            [12] 1387 	add	a,_putsLCD_sloc0_1_0
      000464 FE               [12] 1388 	mov	r6,a
      000465 EF               [12] 1389 	mov	a,r7
      000466 35*01            [12] 1390 	addc	a,(_putsLCD_sloc0_1_0 + 1)
      000468 FF               [12] 1391 	mov	r7,a
      000469 EE               [12] 1392 	mov	a,r6
      00046A 2A               [12] 1393 	add	a,r2
      00046B FE               [12] 1394 	mov	r6,a
      00046C EF               [12] 1395 	mov	a,r7
      00046D 3B               [12] 1396 	addc	a,r3
      00046E FF               [12] 1397 	mov	r7,a
      00046F 8C 05            [24] 1398 	mov	ar5,r4
      000471 8E 82            [24] 1399 	mov	dpl,r6
      000473 8F 83            [24] 1400 	mov	dph,r7
      000475 8D F0            [24] 1401 	mov	b,r5
      000477 12r00r00         [24] 1402 	lcall	__gptrget
      00047A 70 01            [24] 1403 	jnz	00121$
      00047C 22               [24] 1404 	ret
      00047D                       1405 00121$:
                                   1406 ;	lcdCommands.c:170: busyWait();
      00047D C0 04            [24] 1407 	push	ar4
      00047F C0 03            [24] 1408 	push	ar3
      000481 C0 02            [24] 1409 	push	ar2
      000483 C0 01            [24] 1410 	push	ar1
      000485 C0 00            [24] 1411 	push	ar0
      000487 12r00r1E         [24] 1412 	lcall	_busyWait
      00048A D0 00            [24] 1413 	pop	ar0
      00048C D0 01            [24] 1414 	pop	ar1
      00048E D0 02            [24] 1415 	pop	ar2
      000490 D0 03            [24] 1416 	pop	ar3
      000492 D0 04            [24] 1417 	pop	ar4
                                   1418 ;	lcdCommands.c:171: if( i > 15)
      000494 C3               [12] 1419 	clr	c
      000495 74 0F            [12] 1420 	mov	a,#0x0f
      000497 95*00            [12] 1421 	subb	a,_putsLCD_sloc0_1_0
      000499 74 80            [12] 1422 	mov	a,#(0x00 ^ 0x80)
      00049B 85*01 F0         [24] 1423 	mov	b,(_putsLCD_sloc0_1_0 + 1)
      00049E 63 F0 80         [24] 1424 	xrl	b,#0x80
      0004A1 95 F0            [12] 1425 	subb	a,b
      0004A3 50 0C            [24] 1426 	jnc	00102$
                                   1427 ;	lcdCommands.c:173: j++;
      0004A5 08               [12] 1428 	inc	r0
      0004A6 B8 00 01         [24] 1429 	cjne	r0,#0x00,00123$
      0004A9 09               [12] 1430 	inc	r1
      0004AA                       1431 00123$:
                                   1432 ;	lcdCommands.c:174: i = 0;
      0004AA 90r00r0F         [24] 1433 	mov	dptr,#_putsLCD_i_65536_87
      0004AD E4               [12] 1434 	clr	a
      0004AE F0               [24] 1435 	movx	@dptr,a
      0004AF A3               [24] 1436 	inc	dptr
      0004B0 F0               [24] 1437 	movx	@dptr,a
      0004B1                       1438 00102$:
                                   1439 ;	lcdCommands.c:177: goToAddr(lookUpTable[j][i]);
      0004B1 C0 02            [24] 1440 	push	ar2
      0004B3 C0 03            [24] 1441 	push	ar3
      0004B5 C0 04            [24] 1442 	push	ar4
      0004B7 88 03            [24] 1443 	mov	ar3,r0
      0004B9 E9               [12] 1444 	mov	a,r1
      0004BA C4               [12] 1445 	swap	a
      0004BB 54 F0            [12] 1446 	anl	a,#0xf0
      0004BD CB               [12] 1447 	xch	a,r3
      0004BE C4               [12] 1448 	swap	a
      0004BF CB               [12] 1449 	xch	a,r3
      0004C0 6B               [12] 1450 	xrl	a,r3
      0004C1 CB               [12] 1451 	xch	a,r3
      0004C2 54 F0            [12] 1452 	anl	a,#0xf0
      0004C4 CB               [12] 1453 	xch	a,r3
      0004C5 6B               [12] 1454 	xrl	a,r3
      0004C6 FC               [12] 1455 	mov	r4,a
      0004C7 EB               [12] 1456 	mov	a,r3
      0004C8 24rF4            [12] 1457 	add	a,#_lookUpTable
      0004CA FA               [12] 1458 	mov	r2,a
      0004CB EC               [12] 1459 	mov	a,r4
      0004CC 34s01            [12] 1460 	addc	a,#(_lookUpTable >> 8)
      0004CE FF               [12] 1461 	mov	r7,a
      0004CF 90r00r0F         [24] 1462 	mov	dptr,#_putsLCD_i_65536_87
      0004D2 E0               [24] 1463 	movx	a,@dptr
      0004D3 FD               [12] 1464 	mov	r5,a
      0004D4 A3               [24] 1465 	inc	dptr
      0004D5 E0               [24] 1466 	movx	a,@dptr
      0004D6 FE               [12] 1467 	mov	r6,a
      0004D7 ED               [12] 1468 	mov	a,r5
      0004D8 2A               [12] 1469 	add	a,r2
      0004D9 F5*00            [12] 1470 	mov	_putsLCD_sloc0_1_0,a
      0004DB EE               [12] 1471 	mov	a,r6
      0004DC 3F               [12] 1472 	addc	a,r7
      0004DD F5*01            [12] 1473 	mov	(_putsLCD_sloc0_1_0 + 1),a
      0004DF 85*00 82         [24] 1474 	mov	dpl,_putsLCD_sloc0_1_0
      0004E2 85*01 83         [24] 1475 	mov	dph,(_putsLCD_sloc0_1_0 + 1)
      0004E5 E4               [12] 1476 	clr	a
      0004E6 93               [24] 1477 	movc	a,@a+dptr
      0004E7 F5 82            [12] 1478 	mov	dpl,a
      0004E9 C0 06            [24] 1479 	push	ar6
      0004EB C0 05            [24] 1480 	push	ar5
      0004ED C0 04            [24] 1481 	push	ar4
      0004EF C0 03            [24] 1482 	push	ar3
      0004F1 C0 02            [24] 1483 	push	ar2
      0004F3 C0 01            [24] 1484 	push	ar1
      0004F5 C0 00            [24] 1485 	push	ar0
      0004F7 12r00rAD         [24] 1486 	lcall	_goToAddr
      0004FA D0 00            [24] 1487 	pop	ar0
      0004FC D0 01            [24] 1488 	pop	ar1
      0004FE D0 02            [24] 1489 	pop	ar2
                                   1490 ;	lcdCommands.c:178: printf_tiny("%d\n\r", lookUpTable[j][i]);
      000500 85*00 82         [24] 1491 	mov	dpl,_putsLCD_sloc0_1_0
      000503 85*01 83         [24] 1492 	mov	dph,(_putsLCD_sloc0_1_0 + 1)
      000506 E4               [12] 1493 	clr	a
      000507 93               [24] 1494 	movc	a,@a+dptr
      000508 FF               [12] 1495 	mov	r7,a
      000509 7A 00            [12] 1496 	mov	r2,#0x00
      00050B C0 02            [24] 1497 	push	ar2
      00050D C0 01            [24] 1498 	push	ar1
      00050F C0 00            [24] 1499 	push	ar0
      000511 C0 07            [24] 1500 	push	ar7
      000513 C0 02            [24] 1501 	push	ar2
      000515 74r04            [12] 1502 	mov	a,#___str_8
      000517 C0 E0            [24] 1503 	push	acc
      000519 74s03            [12] 1504 	mov	a,#(___str_8 >> 8)
      00051B C0 E0            [24] 1505 	push	acc
      00051D 12r00r00         [24] 1506 	lcall	_printf_tiny
      000520 E5 81            [12] 1507 	mov	a,sp
      000522 24 FC            [12] 1508 	add	a,#0xfc
      000524 F5 81            [12] 1509 	mov	sp,a
      000526 D0 00            [24] 1510 	pop	ar0
      000528 D0 01            [24] 1511 	pop	ar1
      00052A D0 02            [24] 1512 	pop	ar2
      00052C D0 03            [24] 1513 	pop	ar3
      00052E D0 04            [24] 1514 	pop	ar4
      000530 D0 05            [24] 1515 	pop	ar5
      000532 D0 06            [24] 1516 	pop	ar6
                                   1517 ;	lcdCommands.c:179: lcdPutCh(y[i + (j * 16)]);
      000534 EB               [12] 1518 	mov	a,r3
      000535 2D               [12] 1519 	add	a,r5
      000536 FB               [12] 1520 	mov	r3,a
      000537 EC               [12] 1521 	mov	a,r4
      000538 3E               [12] 1522 	addc	a,r6
      000539 FC               [12] 1523 	mov	r4,a
      00053A EB               [12] 1524 	mov	a,r3
      00053B 25*02            [12] 1525 	add	a,_putsLCD_sloc1_1_0
      00053D FB               [12] 1526 	mov	r3,a
      00053E EC               [12] 1527 	mov	a,r4
      00053F 35*03            [12] 1528 	addc	a,(_putsLCD_sloc1_1_0 + 1)
      000541 FC               [12] 1529 	mov	r4,a
      000542 AF*04            [24] 1530 	mov	r7,(_putsLCD_sloc1_1_0 + 2)
      000544 8B 82            [24] 1531 	mov	dpl,r3
      000546 8C 83            [24] 1532 	mov	dph,r4
      000548 8F F0            [24] 1533 	mov	b,r7
      00054A 12r00r00         [24] 1534 	lcall	__gptrget
      00054D FB               [12] 1535 	mov	r3,a
      00054E F5 82            [12] 1536 	mov	dpl,a
      000550 C0 06            [24] 1537 	push	ar6
      000552 C0 05            [24] 1538 	push	ar5
      000554 C0 04            [24] 1539 	push	ar4
      000556 C0 03            [24] 1540 	push	ar3
      000558 C0 02            [24] 1541 	push	ar2
      00055A C0 01            [24] 1542 	push	ar1
      00055C C0 00            [24] 1543 	push	ar0
      00055E 12r00r8B         [24] 1544 	lcall	_lcdPutCh
      000561 D0 00            [24] 1545 	pop	ar0
      000563 D0 01            [24] 1546 	pop	ar1
      000565 D0 02            [24] 1547 	pop	ar2
      000567 D0 03            [24] 1548 	pop	ar3
      000569 D0 04            [24] 1549 	pop	ar4
      00056B D0 05            [24] 1550 	pop	ar5
      00056D D0 06            [24] 1551 	pop	ar6
                                   1552 ;	lcdCommands.c:180: i++;
      00056F 90r00r0F         [24] 1553 	mov	dptr,#_putsLCD_i_65536_87
      000572 74 01            [12] 1554 	mov	a,#0x01
      000574 2D               [12] 1555 	add	a,r5
      000575 F0               [24] 1556 	movx	@dptr,a
      000576 E4               [12] 1557 	clr	a
      000577 3E               [12] 1558 	addc	a,r6
      000578 A3               [24] 1559 	inc	dptr
      000579 F0               [24] 1560 	movx	@dptr,a
      00057A D0 04            [24] 1561 	pop	ar4
      00057C D0 03            [24] 1562 	pop	ar3
      00057E D0 02            [24] 1563 	pop	ar2
                                   1564 ;	lcdCommands.c:182: }
      000580 02r04r47         [24] 1565 	ljmp	00103$
                                   1566 ;------------------------------------------------------------
                                   1567 ;Allocation info for local variables in function 'gets'
                                   1568 ;------------------------------------------------------------
                                   1569 ;s                         Allocated with name '_gets_s_65536_90'
                                   1570 ;c                         Allocated with name '_gets_c_65536_91'
                                   1571 ;count                     Allocated with name '_gets_count_65536_91'
                                   1572 ;------------------------------------------------------------
                                   1573 ;	lcdCommands.c:184: char *gets (char *s)
                                   1574 ;	-----------------------------------------
                                   1575 ;	 function gets
                                   1576 ;	-----------------------------------------
      000583                       1577 _gets:
      000583 AF F0            [24] 1578 	mov	r7,b
      000585 AE 83            [24] 1579 	mov	r6,dph
      000587 E5 82            [12] 1580 	mov	a,dpl
      000589 90r00r11         [24] 1581 	mov	dptr,#_gets_s_65536_90
      00058C F0               [24] 1582 	movx	@dptr,a
      00058D EE               [12] 1583 	mov	a,r6
      00058E A3               [24] 1584 	inc	dptr
      00058F F0               [24] 1585 	movx	@dptr,a
      000590 EF               [12] 1586 	mov	a,r7
      000591 A3               [24] 1587 	inc	dptr
      000592 F0               [24] 1588 	movx	@dptr,a
                                   1589 ;	lcdCommands.c:187: unsigned int count = 0;
      000593 90r00r14         [24] 1590 	mov	dptr,#_gets_count_65536_91
      000596 E4               [12] 1591 	clr	a
      000597 F0               [24] 1592 	movx	@dptr,a
      000598 A3               [24] 1593 	inc	dptr
      000599 F0               [24] 1594 	movx	@dptr,a
                                   1595 ;	lcdCommands.c:189: while (1)
      00059A                       1596 00111$:
                                   1597 ;	lcdCommands.c:191: c = getchar ();
      00059A 12r00r00         [24] 1598 	lcall	_getchar
      00059D AE 82            [24] 1599 	mov	r6,dpl
      00059F AF 83            [24] 1600 	mov	r7,dph
                                   1601 ;	lcdCommands.c:192: switch(c)
      0005A1 BE 08 02         [24] 1602 	cjne	r6,#0x08,00139$
      0005A4 80 0D            [24] 1603 	sjmp	00101$
      0005A6                       1604 00139$:
      0005A6 BE 0A 02         [24] 1605 	cjne	r6,#0x0a,00140$
      0005A9 80 62            [24] 1606 	sjmp	00105$
      0005AB                       1607 00140$:
      0005AB BE 0D 02         [24] 1608 	cjne	r6,#0x0d,00141$
      0005AE 80 5D            [24] 1609 	sjmp	00105$
      0005B0                       1610 00141$:
      0005B0 02r06r35         [24] 1611 	ljmp	00106$
                                   1612 ;	lcdCommands.c:194: case '\b': /* backspace */
      0005B3                       1613 00101$:
                                   1614 ;	lcdCommands.c:195: if (count)
      0005B3 90r00r14         [24] 1615 	mov	dptr,#_gets_count_65536_91
      0005B6 E0               [24] 1616 	movx	a,@dptr
      0005B7 FD               [12] 1617 	mov	r5,a
      0005B8 A3               [24] 1618 	inc	dptr
      0005B9 E0               [24] 1619 	movx	a,@dptr
      0005BA FF               [12] 1620 	mov	r7,a
      0005BB 90r00r14         [24] 1621 	mov	dptr,#_gets_count_65536_91
      0005BE E0               [24] 1622 	movx	a,@dptr
      0005BF F5 F0            [12] 1623 	mov	b,a
      0005C1 A3               [24] 1624 	inc	dptr
      0005C2 E0               [24] 1625 	movx	a,@dptr
      0005C3 45 F0            [12] 1626 	orl	a,b
      0005C5 70 03            [24] 1627 	jnz	00142$
      0005C7 02r06r6D         [24] 1628 	ljmp	00107$
      0005CA                       1629 00142$:
                                   1630 ;	lcdCommands.c:197: putchar ('\b');
      0005CA 90 00 08         [24] 1631 	mov	dptr,#0x0008
      0005CD C0 07            [24] 1632 	push	ar7
      0005CF C0 05            [24] 1633 	push	ar5
      0005D1 12r00r00         [24] 1634 	lcall	_putchar
                                   1635 ;	lcdCommands.c:198: putchar (' ');
      0005D4 90 00 20         [24] 1636 	mov	dptr,#0x0020
      0005D7 12r00r00         [24] 1637 	lcall	_putchar
                                   1638 ;	lcdCommands.c:199: putchar ('\b');
      0005DA 90 00 08         [24] 1639 	mov	dptr,#0x0008
      0005DD 12r00r00         [24] 1640 	lcall	_putchar
      0005E0 D0 05            [24] 1641 	pop	ar5
      0005E2 D0 07            [24] 1642 	pop	ar7
                                   1643 ;	lcdCommands.c:200: --s;
      0005E4 90r00r11         [24] 1644 	mov	dptr,#_gets_s_65536_90
      0005E7 E0               [24] 1645 	movx	a,@dptr
      0005E8 24 FF            [12] 1646 	add	a,#0xff
      0005EA FA               [12] 1647 	mov	r2,a
      0005EB A3               [24] 1648 	inc	dptr
      0005EC E0               [24] 1649 	movx	a,@dptr
      0005ED 34 FF            [12] 1650 	addc	a,#0xff
      0005EF FB               [12] 1651 	mov	r3,a
      0005F0 A3               [24] 1652 	inc	dptr
      0005F1 E0               [24] 1653 	movx	a,@dptr
      0005F2 FC               [12] 1654 	mov	r4,a
      0005F3 90r00r11         [24] 1655 	mov	dptr,#_gets_s_65536_90
      0005F6 EA               [12] 1656 	mov	a,r2
      0005F7 F0               [24] 1657 	movx	@dptr,a
      0005F8 EB               [12] 1658 	mov	a,r3
      0005F9 A3               [24] 1659 	inc	dptr
      0005FA F0               [24] 1660 	movx	@dptr,a
      0005FB EC               [12] 1661 	mov	a,r4
      0005FC A3               [24] 1662 	inc	dptr
      0005FD F0               [24] 1663 	movx	@dptr,a
                                   1664 ;	lcdCommands.c:201: --count;
      0005FE 1D               [12] 1665 	dec	r5
      0005FF BD FF 01         [24] 1666 	cjne	r5,#0xff,00143$
      000602 1F               [12] 1667 	dec	r7
      000603                       1668 00143$:
      000603 90r00r14         [24] 1669 	mov	dptr,#_gets_count_65536_91
      000606 ED               [12] 1670 	mov	a,r5
      000607 F0               [24] 1671 	movx	@dptr,a
      000608 EF               [12] 1672 	mov	a,r7
      000609 A3               [24] 1673 	inc	dptr
      00060A F0               [24] 1674 	movx	@dptr,a
                                   1675 ;	lcdCommands.c:203: break;
                                   1676 ;	lcdCommands.c:206: case '\r': /* CR or LF */
      00060B 80 60            [24] 1677 	sjmp	00107$
      00060D                       1678 00105$:
                                   1679 ;	lcdCommands.c:207: putchar ('\r');
      00060D 90 00 0D         [24] 1680 	mov	dptr,#0x000d
      000610 12r00r00         [24] 1681 	lcall	_putchar
                                   1682 ;	lcdCommands.c:208: putchar ('\n');
      000613 90 00 0A         [24] 1683 	mov	dptr,#0x000a
      000616 12r00r00         [24] 1684 	lcall	_putchar
                                   1685 ;	lcdCommands.c:209: *s = 0;
      000619 90r00r11         [24] 1686 	mov	dptr,#_gets_s_65536_90
      00061C E0               [24] 1687 	movx	a,@dptr
      00061D FC               [12] 1688 	mov	r4,a
      00061E A3               [24] 1689 	inc	dptr
      00061F E0               [24] 1690 	movx	a,@dptr
      000620 FD               [12] 1691 	mov	r5,a
      000621 A3               [24] 1692 	inc	dptr
      000622 E0               [24] 1693 	movx	a,@dptr
      000623 FF               [12] 1694 	mov	r7,a
      000624 8C 82            [24] 1695 	mov	dpl,r4
      000626 8D 83            [24] 1696 	mov	dph,r5
      000628 8F F0            [24] 1697 	mov	b,r7
      00062A E4               [12] 1698 	clr	a
      00062B 12r00r00         [24] 1699 	lcall	__gptrput
                                   1700 ;	lcdCommands.c:210: return s;
      00062E 8C 82            [24] 1701 	mov	dpl,r4
      000630 8D 83            [24] 1702 	mov	dph,r5
      000632 8F F0            [24] 1703 	mov	b,r7
                                   1704 ;	lcdCommands.c:212: default:
      000634 22               [24] 1705 	ret
      000635                       1706 00106$:
                                   1707 ;	lcdCommands.c:213: *s++ = c;
      000635 90r00r11         [24] 1708 	mov	dptr,#_gets_s_65536_90
      000638 E0               [24] 1709 	movx	a,@dptr
      000639 FC               [12] 1710 	mov	r4,a
      00063A A3               [24] 1711 	inc	dptr
      00063B E0               [24] 1712 	movx	a,@dptr
      00063C FD               [12] 1713 	mov	r5,a
      00063D A3               [24] 1714 	inc	dptr
      00063E E0               [24] 1715 	movx	a,@dptr
      00063F FF               [12] 1716 	mov	r7,a
      000640 8C 82            [24] 1717 	mov	dpl,r4
      000642 8D 83            [24] 1718 	mov	dph,r5
      000644 8F F0            [24] 1719 	mov	b,r7
      000646 EE               [12] 1720 	mov	a,r6
      000647 12r00r00         [24] 1721 	lcall	__gptrput
      00064A 90r00r11         [24] 1722 	mov	dptr,#_gets_s_65536_90
      00064D 74 01            [12] 1723 	mov	a,#0x01
      00064F 2C               [12] 1724 	add	a,r4
      000650 F0               [24] 1725 	movx	@dptr,a
      000651 E4               [12] 1726 	clr	a
      000652 3D               [12] 1727 	addc	a,r5
      000653 A3               [24] 1728 	inc	dptr
      000654 F0               [24] 1729 	movx	@dptr,a
      000655 EF               [12] 1730 	mov	a,r7
      000656 A3               [24] 1731 	inc	dptr
      000657 F0               [24] 1732 	movx	@dptr,a
                                   1733 ;	lcdCommands.c:214: ++count;
      000658 90r00r14         [24] 1734 	mov	dptr,#_gets_count_65536_91
      00065B E0               [24] 1735 	movx	a,@dptr
      00065C 24 01            [12] 1736 	add	a,#0x01
      00065E F0               [24] 1737 	movx	@dptr,a
      00065F A3               [24] 1738 	inc	dptr
      000660 E0               [24] 1739 	movx	a,@dptr
      000661 34 00            [12] 1740 	addc	a,#0x00
      000663 F0               [24] 1741 	movx	@dptr,a
                                   1742 ;	lcdCommands.c:215: putchar (c);
      000664 7F 00            [12] 1743 	mov	r7,#0x00
      000666 8E 82            [24] 1744 	mov	dpl,r6
      000668 8F 83            [24] 1745 	mov	dph,r7
      00066A 12r00r00         [24] 1746 	lcall	_putchar
                                   1747 ;	lcdCommands.c:217: }
      00066D                       1748 00107$:
                                   1749 ;	lcdCommands.c:218: if (count == 48)
      00066D 90r00r14         [24] 1750 	mov	dptr,#_gets_count_65536_91
      000670 E0               [24] 1751 	movx	a,@dptr
      000671 FE               [12] 1752 	mov	r6,a
      000672 A3               [24] 1753 	inc	dptr
      000673 E0               [24] 1754 	movx	a,@dptr
      000674 FF               [12] 1755 	mov	r7,a
      000675 BE 30 05         [24] 1756 	cjne	r6,#0x30,00144$
      000678 BF 00 02         [24] 1757 	cjne	r7,#0x00,00144$
      00067B 80 03            [24] 1758 	sjmp	00145$
      00067D                       1759 00144$:
      00067D 02r05r9A         [24] 1760 	ljmp	00111$
      000680                       1761 00145$:
                                   1762 ;	lcdCommands.c:220: printf("\n\rPlease Input a maximum of 48 characters\n\r");
      000680 74r09            [12] 1763 	mov	a,#___str_9
      000682 C0 E0            [24] 1764 	push	acc
      000684 74s03            [12] 1765 	mov	a,#(___str_9 >> 8)
      000686 C0 E0            [24] 1766 	push	acc
      000688 74 80            [12] 1767 	mov	a,#0x80
      00068A C0 E0            [24] 1768 	push	acc
      00068C 12r00r00         [24] 1769 	lcall	_printf
      00068F 15 81            [12] 1770 	dec	sp
      000691 15 81            [12] 1771 	dec	sp
      000693 15 81            [12] 1772 	dec	sp
                                   1773 ;	lcdCommands.c:221: break;
                                   1774 ;	lcdCommands.c:224: }
      000695 22               [24] 1775 	ret
                                   1776 ;------------------------------------------------------------
                                   1777 ;Allocation info for local variables in function 'ramDump'
                                   1778 ;------------------------------------------------------------
                                   1779 ;i                         Allocated with name '_ramDump_i_65536_96'
                                   1780 ;j                         Allocated with name '_ramDump_j_65536_96'
                                   1781 ;x                         Allocated with name '_ramDump_x_196609_99'
                                   1782 ;x                         Allocated with name '_ramDump_x_196609_104'
                                   1783 ;------------------------------------------------------------
                                   1784 ;	lcdCommands.c:226: void ramDump()
                                   1785 ;	-----------------------------------------
                                   1786 ;	 function ramDump
                                   1787 ;	-----------------------------------------
      000696                       1788 _ramDump:
                                   1789 ;	lcdCommands.c:230: printf_tiny("\n\rDDRAM Contents\n\r");
      000696 74r35            [12] 1790 	mov	a,#___str_10
      000698 C0 E0            [24] 1791 	push	acc
      00069A 74s03            [12] 1792 	mov	a,#(___str_10 >> 8)
      00069C C0 E0            [24] 1793 	push	acc
      00069E 12r00r00         [24] 1794 	lcall	_printf_tiny
      0006A1 15 81            [12] 1795 	dec	sp
      0006A3 15 81            [12] 1796 	dec	sp
                                   1797 ;	lcdCommands.c:231: for (i = 0; i < 128; i += 16)      //Print 64 ASCII characters in each line
      0006A5 90r00r16         [24] 1798 	mov	dptr,#_ramDump_i_65536_96
      0006A8 E4               [12] 1799 	clr	a
      0006A9 F0               [24] 1800 	movx	@dptr,a
      0006AA                       1801 00109$:
                                   1802 ;	lcdCommands.c:233: lcdGeneral = 0x80 | i;
      0006AA 90r00r16         [24] 1803 	mov	dptr,#_ramDump_i_65536_96
      0006AD E0               [24] 1804 	movx	a,@dptr
      0006AE FF               [12] 1805 	mov	r7,a
      0006AF FD               [12] 1806 	mov	r5,a
      0006B0 7E 00            [12] 1807 	mov	r6,#0x00
      0006B2 90 F0 00         [24] 1808 	mov	dptr,#_lcdGeneral
      0006B5 74 80            [12] 1809 	mov	a,#0x80
      0006B7 4D               [12] 1810 	orl	a,r5
      0006B8 F0               [24] 1811 	movx	@dptr,a
      0006B9 EE               [12] 1812 	mov	a,r6
      0006BA A3               [24] 1813 	inc	dptr
      0006BB F0               [24] 1814 	movx	@dptr,a
                                   1815 ;	lcdCommands.c:234: uint8_t x = readLCD();
      0006BC C0 07            [24] 1816 	push	ar7
      0006BE C0 06            [24] 1817 	push	ar6
      0006C0 C0 05            [24] 1818 	push	ar5
      0006C2 12r04r0B         [24] 1819 	lcall	_readLCD
      0006C5 AC 82            [24] 1820 	mov	r4,dpl
      0006C7 D0 05            [24] 1821 	pop	ar5
      0006C9 D0 06            [24] 1822 	pop	ar6
                                   1823 ;	lcdCommands.c:235: printf("%2x: ",i);
      0006CB C0 06            [24] 1824 	push	ar6
      0006CD C0 05            [24] 1825 	push	ar5
      0006CF C0 04            [24] 1826 	push	ar4
      0006D1 C0 05            [24] 1827 	push	ar5
      0006D3 C0 06            [24] 1828 	push	ar6
      0006D5 74r48            [12] 1829 	mov	a,#___str_11
      0006D7 C0 E0            [24] 1830 	push	acc
      0006D9 74s03            [12] 1831 	mov	a,#(___str_11 >> 8)
      0006DB C0 E0            [24] 1832 	push	acc
      0006DD 74 80            [12] 1833 	mov	a,#0x80
      0006DF C0 E0            [24] 1834 	push	acc
      0006E1 12r00r00         [24] 1835 	lcall	_printf
      0006E4 E5 81            [12] 1836 	mov	a,sp
      0006E6 24 FB            [12] 1837 	add	a,#0xfb
      0006E8 F5 81            [12] 1838 	mov	sp,a
      0006EA D0 04            [24] 1839 	pop	ar4
      0006EC D0 05            [24] 1840 	pop	ar5
      0006EE D0 06            [24] 1841 	pop	ar6
      0006F0 D0 07            [24] 1842 	pop	ar7
                                   1843 ;	lcdCommands.c:236: for (j = i; j < (i+16) && j < 128; j++)    //Print the contents of buffer in ASCII
      0006F2                       1844 00107$:
      0006F2 8F 02            [24] 1845 	mov	ar2,r7
      0006F4 7B 00            [12] 1846 	mov	r3,#0x00
      0006F6 74 10            [12] 1847 	mov	a,#0x10
      0006F8 2A               [12] 1848 	add	a,r2
      0006F9 FA               [12] 1849 	mov	r2,a
      0006FA E4               [12] 1850 	clr	a
      0006FB 3B               [12] 1851 	addc	a,r3
      0006FC FB               [12] 1852 	mov	r3,a
      0006FD C3               [12] 1853 	clr	c
      0006FE ED               [12] 1854 	mov	a,r5
      0006FF 9A               [12] 1855 	subb	a,r2
      000700 EE               [12] 1856 	mov	a,r6
      000701 64 80            [12] 1857 	xrl	a,#0x80
      000703 8B F0            [24] 1858 	mov	b,r3
      000705 63 F0 80         [24] 1859 	xrl	b,#0x80
      000708 95 F0            [12] 1860 	subb	a,b
      00070A 50 3F            [24] 1861 	jnc	00101$
      00070C C3               [12] 1862 	clr	c
      00070D ED               [12] 1863 	mov	a,r5
      00070E 94 80            [12] 1864 	subb	a,#0x80
      000710 EE               [12] 1865 	mov	a,r6
      000711 64 80            [12] 1866 	xrl	a,#0x80
      000713 94 80            [12] 1867 	subb	a,#0x80
      000715 50 34            [24] 1868 	jnc	00101$
                                   1869 ;	lcdCommands.c:238: printf("%2x ", x);
      000717 8C 02            [24] 1870 	mov	ar2,r4
      000719 7B 00            [12] 1871 	mov	r3,#0x00
      00071B C0 07            [24] 1872 	push	ar7
      00071D C0 06            [24] 1873 	push	ar6
      00071F C0 05            [24] 1874 	push	ar5
      000721 C0 04            [24] 1875 	push	ar4
      000723 C0 02            [24] 1876 	push	ar2
      000725 C0 03            [24] 1877 	push	ar3
      000727 74r4E            [12] 1878 	mov	a,#___str_12
      000729 C0 E0            [24] 1879 	push	acc
      00072B 74s03            [12] 1880 	mov	a,#(___str_12 >> 8)
      00072D C0 E0            [24] 1881 	push	acc
      00072F 74 80            [12] 1882 	mov	a,#0x80
      000731 C0 E0            [24] 1883 	push	acc
      000733 12r00r00         [24] 1884 	lcall	_printf
      000736 E5 81            [12] 1885 	mov	a,sp
      000738 24 FB            [12] 1886 	add	a,#0xfb
      00073A F5 81            [12] 1887 	mov	sp,a
      00073C D0 04            [24] 1888 	pop	ar4
      00073E D0 05            [24] 1889 	pop	ar5
      000740 D0 06            [24] 1890 	pop	ar6
      000742 D0 07            [24] 1891 	pop	ar7
                                   1892 ;	lcdCommands.c:236: for (j = i; j < (i+16) && j < 128; j++)    //Print the contents of buffer in ASCII
      000744 0D               [12] 1893 	inc	r5
      000745 BD 00 AA         [24] 1894 	cjne	r5,#0x00,00107$
      000748 0E               [12] 1895 	inc	r6
      000749 80 A7            [24] 1896 	sjmp	00107$
      00074B                       1897 00101$:
                                   1898 ;	lcdCommands.c:240: printf_tiny("\n\r");
      00074B 74r53            [12] 1899 	mov	a,#___str_13
      00074D C0 E0            [24] 1900 	push	acc
      00074F 74s03            [12] 1901 	mov	a,#(___str_13 >> 8)
      000751 C0 E0            [24] 1902 	push	acc
      000753 12r00r00         [24] 1903 	lcall	_printf_tiny
      000756 15 81            [12] 1904 	dec	sp
      000758 15 81            [12] 1905 	dec	sp
                                   1906 ;	lcdCommands.c:231: for (i = 0; i < 128; i += 16)      //Print 64 ASCII characters in each line
      00075A 90r00r16         [24] 1907 	mov	dptr,#_ramDump_i_65536_96
      00075D E0               [24] 1908 	movx	a,@dptr
      00075E 24 10            [12] 1909 	add	a,#0x10
      000760 F0               [24] 1910 	movx	@dptr,a
      000761 E0               [24] 1911 	movx	a,@dptr
      000762 FF               [12] 1912 	mov	r7,a
      000763 BF 80 00         [24] 1913 	cjne	r7,#0x80,00160$
      000766                       1914 00160$:
      000766 50 03            [24] 1915 	jnc	00161$
      000768 02r06rAA         [24] 1916 	ljmp	00109$
      00076B                       1917 00161$:
                                   1918 ;	lcdCommands.c:242: printf_tiny("\n\rCGRAM Contents\n\r");
      00076B 74r56            [12] 1919 	mov	a,#___str_14
      00076D C0 E0            [24] 1920 	push	acc
      00076F 74s03            [12] 1921 	mov	a,#(___str_14 >> 8)
      000771 C0 E0            [24] 1922 	push	acc
      000773 12r00r00         [24] 1923 	lcall	_printf_tiny
      000776 15 81            [12] 1924 	dec	sp
      000778 15 81            [12] 1925 	dec	sp
                                   1926 ;	lcdCommands.c:243: for (i = 0; i < 64; i += 16)      //Print 64 ASCII characters in each line
      00077A 90r00r16         [24] 1927 	mov	dptr,#_ramDump_i_65536_96
      00077D E4               [12] 1928 	clr	a
      00077E F0               [24] 1929 	movx	@dptr,a
      00077F                       1930 00115$:
                                   1931 ;	lcdCommands.c:245: lcdGeneral = 0x40 | i;
      00077F 90r00r16         [24] 1932 	mov	dptr,#_ramDump_i_65536_96
      000782 E0               [24] 1933 	movx	a,@dptr
      000783 FF               [12] 1934 	mov	r7,a
      000784 FD               [12] 1935 	mov	r5,a
      000785 7E 00            [12] 1936 	mov	r6,#0x00
      000787 90 F0 00         [24] 1937 	mov	dptr,#_lcdGeneral
      00078A 74 40            [12] 1938 	mov	a,#0x40
      00078C 4D               [12] 1939 	orl	a,r5
      00078D F0               [24] 1940 	movx	@dptr,a
      00078E EE               [12] 1941 	mov	a,r6
      00078F A3               [24] 1942 	inc	dptr
      000790 F0               [24] 1943 	movx	@dptr,a
                                   1944 ;	lcdCommands.c:246: uint8_t x = readLCD();
      000791 C0 07            [24] 1945 	push	ar7
      000793 C0 06            [24] 1946 	push	ar6
      000795 C0 05            [24] 1947 	push	ar5
      000797 12r04r0B         [24] 1948 	lcall	_readLCD
      00079A AC 82            [24] 1949 	mov	r4,dpl
      00079C D0 05            [24] 1950 	pop	ar5
      00079E D0 06            [24] 1951 	pop	ar6
                                   1952 ;	lcdCommands.c:247: printf("%2x: ",i);
      0007A0 C0 06            [24] 1953 	push	ar6
      0007A2 C0 05            [24] 1954 	push	ar5
      0007A4 C0 04            [24] 1955 	push	ar4
      0007A6 C0 05            [24] 1956 	push	ar5
      0007A8 C0 06            [24] 1957 	push	ar6
      0007AA 74r48            [12] 1958 	mov	a,#___str_11
      0007AC C0 E0            [24] 1959 	push	acc
      0007AE 74s03            [12] 1960 	mov	a,#(___str_11 >> 8)
      0007B0 C0 E0            [24] 1961 	push	acc
      0007B2 74 80            [12] 1962 	mov	a,#0x80
      0007B4 C0 E0            [24] 1963 	push	acc
      0007B6 12r00r00         [24] 1964 	lcall	_printf
      0007B9 E5 81            [12] 1965 	mov	a,sp
      0007BB 24 FB            [12] 1966 	add	a,#0xfb
      0007BD F5 81            [12] 1967 	mov	sp,a
      0007BF D0 04            [24] 1968 	pop	ar4
      0007C1 D0 05            [24] 1969 	pop	ar5
      0007C3 D0 06            [24] 1970 	pop	ar6
      0007C5 D0 07            [24] 1971 	pop	ar7
                                   1972 ;	lcdCommands.c:248: for (j = i; j < (i+16) && j < 64; j++)    //Print the contents of buffer in ASCII
      0007C7                       1973 00113$:
      0007C7 8F 02            [24] 1974 	mov	ar2,r7
      0007C9 7B 00            [12] 1975 	mov	r3,#0x00
      0007CB 74 10            [12] 1976 	mov	a,#0x10
      0007CD 2A               [12] 1977 	add	a,r2
      0007CE FA               [12] 1978 	mov	r2,a
      0007CF E4               [12] 1979 	clr	a
      0007D0 3B               [12] 1980 	addc	a,r3
      0007D1 FB               [12] 1981 	mov	r3,a
      0007D2 C3               [12] 1982 	clr	c
      0007D3 ED               [12] 1983 	mov	a,r5
      0007D4 9A               [12] 1984 	subb	a,r2
      0007D5 EE               [12] 1985 	mov	a,r6
      0007D6 64 80            [12] 1986 	xrl	a,#0x80
      0007D8 8B F0            [24] 1987 	mov	b,r3
      0007DA 63 F0 80         [24] 1988 	xrl	b,#0x80
      0007DD 95 F0            [12] 1989 	subb	a,b
      0007DF 50 3F            [24] 1990 	jnc	00103$
      0007E1 C3               [12] 1991 	clr	c
      0007E2 ED               [12] 1992 	mov	a,r5
      0007E3 94 40            [12] 1993 	subb	a,#0x40
      0007E5 EE               [12] 1994 	mov	a,r6
      0007E6 64 80            [12] 1995 	xrl	a,#0x80
      0007E8 94 80            [12] 1996 	subb	a,#0x80
      0007EA 50 34            [24] 1997 	jnc	00103$
                                   1998 ;	lcdCommands.c:250: printf("%2x ", x);
      0007EC 8C 02            [24] 1999 	mov	ar2,r4
      0007EE 7B 00            [12] 2000 	mov	r3,#0x00
      0007F0 C0 07            [24] 2001 	push	ar7
      0007F2 C0 06            [24] 2002 	push	ar6
      0007F4 C0 05            [24] 2003 	push	ar5
      0007F6 C0 04            [24] 2004 	push	ar4
      0007F8 C0 02            [24] 2005 	push	ar2
      0007FA C0 03            [24] 2006 	push	ar3
      0007FC 74r4E            [12] 2007 	mov	a,#___str_12
      0007FE C0 E0            [24] 2008 	push	acc
      000800 74s03            [12] 2009 	mov	a,#(___str_12 >> 8)
      000802 C0 E0            [24] 2010 	push	acc
      000804 74 80            [12] 2011 	mov	a,#0x80
      000806 C0 E0            [24] 2012 	push	acc
      000808 12r00r00         [24] 2013 	lcall	_printf
      00080B E5 81            [12] 2014 	mov	a,sp
      00080D 24 FB            [12] 2015 	add	a,#0xfb
      00080F F5 81            [12] 2016 	mov	sp,a
      000811 D0 04            [24] 2017 	pop	ar4
      000813 D0 05            [24] 2018 	pop	ar5
      000815 D0 06            [24] 2019 	pop	ar6
      000817 D0 07            [24] 2020 	pop	ar7
                                   2021 ;	lcdCommands.c:248: for (j = i; j < (i+16) && j < 64; j++)    //Print the contents of buffer in ASCII
      000819 0D               [12] 2022 	inc	r5
      00081A BD 00 AA         [24] 2023 	cjne	r5,#0x00,00113$
      00081D 0E               [12] 2024 	inc	r6
      00081E 80 A7            [24] 2025 	sjmp	00113$
      000820                       2026 00103$:
                                   2027 ;	lcdCommands.c:252: printf_tiny("\n\r");
      000820 74r53            [12] 2028 	mov	a,#___str_13
      000822 C0 E0            [24] 2029 	push	acc
      000824 74s03            [12] 2030 	mov	a,#(___str_13 >> 8)
      000826 C0 E0            [24] 2031 	push	acc
      000828 12r00r00         [24] 2032 	lcall	_printf_tiny
      00082B 15 81            [12] 2033 	dec	sp
      00082D 15 81            [12] 2034 	dec	sp
                                   2035 ;	lcdCommands.c:243: for (i = 0; i < 64; i += 16)      //Print 64 ASCII characters in each line
      00082F 90r00r16         [24] 2036 	mov	dptr,#_ramDump_i_65536_96
      000832 E0               [24] 2037 	movx	a,@dptr
      000833 24 10            [12] 2038 	add	a,#0x10
      000835 F0               [24] 2039 	movx	@dptr,a
      000836 E0               [24] 2040 	movx	a,@dptr
      000837 FF               [12] 2041 	mov	r7,a
      000838 BF 40 00         [24] 2042 	cjne	r7,#0x40,00165$
      00083B                       2043 00165$:
      00083B 50 03            [24] 2044 	jnc	00166$
      00083D 02r07r7F         [24] 2045 	ljmp	00115$
      000840                       2046 00166$:
                                   2047 ;	lcdCommands.c:254: }
      000840 22               [24] 2048 	ret
                                   2049 ;------------------------------------------------------------
                                   2050 ;Allocation info for local variables in function 'gamePacman'
                                   2051 ;------------------------------------------------------------
                                   2052 ;ch                        Allocated with name '_gamePacman_ch_65536_107'
                                   2053 ;i                         Allocated with name '_gamePacman_i_65536_107'
                                   2054 ;------------------------------------------------------------
                                   2055 ;	lcdCommands.c:256: void gamePacman()
                                   2056 ;	-----------------------------------------
                                   2057 ;	 function gamePacman
                                   2058 ;	-----------------------------------------
      000841                       2059 _gamePacman:
                                   2060 ;	lcdCommands.c:259: int i = 1;
      000841 90r00r17         [24] 2061 	mov	dptr,#_gamePacman_i_65536_107
      000844 74 01            [12] 2062 	mov	a,#0x01
      000846 F0               [24] 2063 	movx	@dptr,a
      000847 E4               [12] 2064 	clr	a
      000848 A3               [24] 2065 	inc	dptr
      000849 F0               [24] 2066 	movx	@dptr,a
                                   2067 ;	lcdCommands.c:260: makePacmanRight();
      00084A 12r0ArAD         [24] 2068 	lcall	_makePacmanRight
                                   2069 ;	lcdCommands.c:261: makePacmanLeft();
      00084D 12r0Br93         [24] 2070 	lcall	_makePacmanLeft
                                   2071 ;	lcdCommands.c:262: goToAddr(lookUpTable[0][4]);
      000850 90r01rF8         [24] 2072 	mov	dptr,#(_lookUpTable + 0x0004)
      000853 E4               [12] 2073 	clr	a
      000854 93               [24] 2074 	movc	a,@a+dptr
      000855 F5 82            [12] 2075 	mov	dpl,a
      000857 12r00rAD         [24] 2076 	lcall	_goToAddr
                                   2077 ;	lcdCommands.c:263: lcdPutCh('*');
      00085A 75 82 2A         [24] 2078 	mov	dpl,#0x2a
      00085D 12r00r8B         [24] 2079 	lcall	_lcdPutCh
                                   2080 ;	lcdCommands.c:264: goToAddr(lookUpTable[0][5]);
      000860 90r01rF9         [24] 2081 	mov	dptr,#(_lookUpTable + 0x0005)
      000863 E4               [12] 2082 	clr	a
      000864 93               [24] 2083 	movc	a,@a+dptr
      000865 F5 82            [12] 2084 	mov	dpl,a
      000867 12r00rAD         [24] 2085 	lcall	_goToAddr
                                   2086 ;	lcdCommands.c:265: lcdPutCh('*');
      00086A 75 82 2A         [24] 2087 	mov	dpl,#0x2a
      00086D 12r00r8B         [24] 2088 	lcall	_lcdPutCh
                                   2089 ;	lcdCommands.c:266: goToAddr(lookUpTable[0][8]);
      000870 90r01rFC         [24] 2090 	mov	dptr,#(_lookUpTable + 0x0008)
      000873 E4               [12] 2091 	clr	a
      000874 93               [24] 2092 	movc	a,@a+dptr
      000875 F5 82            [12] 2093 	mov	dpl,a
      000877 12r00rAD         [24] 2094 	lcall	_goToAddr
                                   2095 ;	lcdCommands.c:267: lcdPutCh('*');
      00087A 75 82 2A         [24] 2096 	mov	dpl,#0x2a
      00087D 12r00r8B         [24] 2097 	lcall	_lcdPutCh
                                   2098 ;	lcdCommands.c:268: goToAddr(lookUpTable[0][9]);
      000880 90r01rFD         [24] 2099 	mov	dptr,#(_lookUpTable + 0x0009)
      000883 E4               [12] 2100 	clr	a
      000884 93               [24] 2101 	movc	a,@a+dptr
      000885 F5 82            [12] 2102 	mov	dpl,a
      000887 12r00rAD         [24] 2103 	lcall	_goToAddr
                                   2104 ;	lcdCommands.c:269: lcdPutCh('*');
      00088A 75 82 2A         [24] 2105 	mov	dpl,#0x2a
      00088D 12r00r8B         [24] 2106 	lcall	_lcdPutCh
                                   2107 ;	lcdCommands.c:270: goToAddr(lookUpTable[0][12]);
      000890 90r02r00         [24] 2108 	mov	dptr,#(_lookUpTable + 0x000c)
      000893 E4               [12] 2109 	clr	a
      000894 93               [24] 2110 	movc	a,@a+dptr
      000895 F5 82            [12] 2111 	mov	dpl,a
      000897 12r00rAD         [24] 2112 	lcall	_goToAddr
                                   2113 ;	lcdCommands.c:271: lcdPutCh('*');
      00089A 75 82 2A         [24] 2114 	mov	dpl,#0x2a
      00089D 12r00r8B         [24] 2115 	lcall	_lcdPutCh
                                   2116 ;	lcdCommands.c:272: goToAddr(lookUpTable[0][13]);
      0008A0 90r02r01         [24] 2117 	mov	dptr,#(_lookUpTable + 0x000d)
      0008A3 E4               [12] 2118 	clr	a
      0008A4 93               [24] 2119 	movc	a,@a+dptr
      0008A5 F5 82            [12] 2120 	mov	dpl,a
      0008A7 12r00rAD         [24] 2121 	lcall	_goToAddr
                                   2122 ;	lcdCommands.c:273: lcdPutCh('*');
      0008AA 75 82 2A         [24] 2123 	mov	dpl,#0x2a
      0008AD 12r00r8B         [24] 2124 	lcall	_lcdPutCh
                                   2125 ;	lcdCommands.c:274: goToAddr(lookUpTable[0][14]);
      0008B0 90r02r02         [24] 2126 	mov	dptr,#(_lookUpTable + 0x000e)
      0008B3 E4               [12] 2127 	clr	a
      0008B4 93               [24] 2128 	movc	a,@a+dptr
      0008B5 F5 82            [12] 2129 	mov	dpl,a
      0008B7 12r00rAD         [24] 2130 	lcall	_goToAddr
                                   2131 ;	lcdCommands.c:275: lcdPutCh('*');
      0008BA 75 82 2A         [24] 2132 	mov	dpl,#0x2a
      0008BD 12r00r8B         [24] 2133 	lcall	_lcdPutCh
                                   2134 ;	lcdCommands.c:276: goToAddr(lookUpTable[1][1]);
      0008C0 90r02r05         [24] 2135 	mov	dptr,#(_lookUpTable + 0x0011)
      0008C3 E4               [12] 2136 	clr	a
      0008C4 93               [24] 2137 	movc	a,@a+dptr
      0008C5 F5 82            [12] 2138 	mov	dpl,a
      0008C7 12r00rAD         [24] 2139 	lcall	_goToAddr
                                   2140 ;	lcdCommands.c:277: lcdPutCh('*');
      0008CA 75 82 2A         [24] 2141 	mov	dpl,#0x2a
      0008CD 12r00r8B         [24] 2142 	lcall	_lcdPutCh
                                   2143 ;	lcdCommands.c:278: goToAddr(lookUpTable[1][2]);
      0008D0 90r02r06         [24] 2144 	mov	dptr,#(_lookUpTable + 0x0012)
      0008D3 E4               [12] 2145 	clr	a
      0008D4 93               [24] 2146 	movc	a,@a+dptr
      0008D5 F5 82            [12] 2147 	mov	dpl,a
      0008D7 12r00rAD         [24] 2148 	lcall	_goToAddr
                                   2149 ;	lcdCommands.c:279: lcdPutCh('*');
      0008DA 75 82 2A         [24] 2150 	mov	dpl,#0x2a
      0008DD 12r00r8B         [24] 2151 	lcall	_lcdPutCh
                                   2152 ;	lcdCommands.c:280: goToAddr(lookUpTable[1][3]);
      0008E0 90r02r07         [24] 2153 	mov	dptr,#(_lookUpTable + 0x0013)
      0008E3 E4               [12] 2154 	clr	a
      0008E4 93               [24] 2155 	movc	a,@a+dptr
      0008E5 F5 82            [12] 2156 	mov	dpl,a
      0008E7 12r00rAD         [24] 2157 	lcall	_goToAddr
                                   2158 ;	lcdCommands.c:281: lcdPutCh('*');
      0008EA 75 82 2A         [24] 2159 	mov	dpl,#0x2a
      0008ED 12r00r8B         [24] 2160 	lcall	_lcdPutCh
                                   2161 ;	lcdCommands.c:282: goToAddr(lookUpTable[1][12]);
      0008F0 90r02r10         [24] 2162 	mov	dptr,#(_lookUpTable + 0x001c)
      0008F3 E4               [12] 2163 	clr	a
      0008F4 93               [24] 2164 	movc	a,@a+dptr
      0008F5 F5 82            [12] 2165 	mov	dpl,a
      0008F7 12r00rAD         [24] 2166 	lcall	_goToAddr
                                   2167 ;	lcdCommands.c:283: lcdPutCh('*');
      0008FA 75 82 2A         [24] 2168 	mov	dpl,#0x2a
      0008FD 12r00r8B         [24] 2169 	lcall	_lcdPutCh
                                   2170 ;	lcdCommands.c:284: goToAddr(lookUpTable[1][13]);
      000900 90r02r11         [24] 2171 	mov	dptr,#(_lookUpTable + 0x001d)
      000903 E4               [12] 2172 	clr	a
      000904 93               [24] 2173 	movc	a,@a+dptr
      000905 F5 82            [12] 2174 	mov	dpl,a
      000907 12r00rAD         [24] 2175 	lcall	_goToAddr
                                   2176 ;	lcdCommands.c:285: lcdPutCh('*');
      00090A 75 82 2A         [24] 2177 	mov	dpl,#0x2a
      00090D 12r00r8B         [24] 2178 	lcall	_lcdPutCh
                                   2179 ;	lcdCommands.c:286: printf_tiny("\n\rEnter w to go up, s to go down, a to go left and d to go right and q to quit\n\r");
      000910 74r69            [12] 2180 	mov	a,#___str_15
      000912 C0 E0            [24] 2181 	push	acc
      000914 74s03            [12] 2182 	mov	a,#(___str_15 >> 8)
      000916 C0 E0            [24] 2183 	push	acc
      000918 12r00r00         [24] 2184 	lcall	_printf_tiny
      00091B 15 81            [12] 2185 	dec	sp
      00091D 15 81            [12] 2186 	dec	sp
                                   2187 ;	lcdCommands.c:287: do{
      00091F                       2188 00109$:
                                   2189 ;	lcdCommands.c:288: ch = getchar();
      00091F 12r00r00         [24] 2190 	lcall	_getchar
      000922 AE 82            [24] 2191 	mov	r6,dpl
      000924 AF 83            [24] 2192 	mov	r7,dph
                                   2193 ;	lcdCommands.c:289: if(ch == 'd')
      000926 BE 64 02         [24] 2194 	cjne	r6,#0x64,00134$
      000929 80 03            [24] 2195 	sjmp	00135$
      00092B                       2196 00134$:
      00092B 02r09rCF         [24] 2197 	ljmp	00104$
      00092E                       2198 00135$:
                                   2199 ;	lcdCommands.c:291: putchar(7);
      00092E 90 00 07         [24] 2200 	mov	dptr,#0x0007
      000931 C0 06            [24] 2201 	push	ar6
      000933 12r00r00         [24] 2202 	lcall	_putchar
      000936 D0 06            [24] 2203 	pop	ar6
                                   2204 ;	lcdCommands.c:292: goToAddr(lookUpTable[0][i-1]);
      000938 90r00r17         [24] 2205 	mov	dptr,#_gamePacman_i_65536_107
      00093B E0               [24] 2206 	movx	a,@dptr
      00093C FD               [12] 2207 	mov	r5,a
      00093D A3               [24] 2208 	inc	dptr
      00093E E0               [24] 2209 	movx	a,@dptr
      00093F FF               [12] 2210 	mov	r7,a
      000940 8D 04            [24] 2211 	mov	ar4,r5
      000942 EC               [12] 2212 	mov	a,r4
      000943 14               [12] 2213 	dec	a
      000944 90r01rF4         [24] 2214 	mov	dptr,#_lookUpTable
      000947 93               [24] 2215 	movc	a,@a+dptr
      000948 F5 82            [12] 2216 	mov	dpl,a
      00094A C0 07            [24] 2217 	push	ar7
      00094C C0 06            [24] 2218 	push	ar6
      00094E C0 05            [24] 2219 	push	ar5
      000950 12r00rAD         [24] 2220 	lcall	_goToAddr
                                   2221 ;	lcdCommands.c:293: busyWait();
      000953 12r00r1E         [24] 2222 	lcall	_busyWait
                                   2223 ;	lcdCommands.c:294: lcdPutCh(' ');
      000956 75 82 20         [24] 2224 	mov	dpl,#0x20
      000959 12r00r8B         [24] 2225 	lcall	_lcdPutCh
                                   2226 ;	lcdCommands.c:295: busyWait();
      00095C 12r00r1E         [24] 2227 	lcall	_busyWait
      00095F D0 05            [24] 2228 	pop	ar5
      000961 D0 06            [24] 2229 	pop	ar6
      000963 D0 07            [24] 2230 	pop	ar7
                                   2231 ;	lcdCommands.c:296: lcdGeneral = 0x80 | (lookUpTable[0][i]);
      000965 ED               [12] 2232 	mov	a,r5
      000966 24rF4            [12] 2233 	add	a,#_lookUpTable
      000968 F5 82            [12] 2234 	mov	dpl,a
      00096A EF               [12] 2235 	mov	a,r7
      00096B 34s01            [12] 2236 	addc	a,#(_lookUpTable >> 8)
      00096D F5 83            [12] 2237 	mov	dph,a
      00096F E4               [12] 2238 	clr	a
      000970 93               [24] 2239 	movc	a,@a+dptr
      000971 FC               [12] 2240 	mov	r4,a
      000972 7B 00            [12] 2241 	mov	r3,#0x00
      000974 90 F0 00         [24] 2242 	mov	dptr,#_lcdGeneral
      000977 74 80            [12] 2243 	mov	a,#0x80
      000979 4C               [12] 2244 	orl	a,r4
      00097A F0               [24] 2245 	movx	@dptr,a
      00097B EB               [12] 2246 	mov	a,r3
      00097C A3               [24] 2247 	inc	dptr
      00097D F0               [24] 2248 	movx	@dptr,a
                                   2249 ;	lcdCommands.c:297: busyWait();
      00097E C0 07            [24] 2250 	push	ar7
      000980 C0 06            [24] 2251 	push	ar6
      000982 C0 05            [24] 2252 	push	ar5
      000984 12r00r1E         [24] 2253 	lcall	_busyWait
                                   2254 ;	lcdCommands.c:298: writeCharacter = 0x00;
      000987 90 F1 00         [24] 2255 	mov	dptr,#_writeCharacter
      00098A E4               [12] 2256 	clr	a
      00098B F0               [24] 2257 	movx	@dptr,a
      00098C A3               [24] 2258 	inc	dptr
      00098D F0               [24] 2259 	movx	@dptr,a
                                   2260 ;	lcdCommands.c:299: busyWait();
      00098E 12r00r1E         [24] 2261 	lcall	_busyWait
      000991 D0 05            [24] 2262 	pop	ar5
      000993 D0 06            [24] 2263 	pop	ar6
      000995 D0 07            [24] 2264 	pop	ar7
                                   2265 ;	lcdCommands.c:300: if(i >= 47)
      000997 C3               [12] 2266 	clr	c
      000998 ED               [12] 2267 	mov	a,r5
      000999 94 2F            [12] 2268 	subb	a,#0x2f
      00099B EF               [12] 2269 	mov	a,r7
      00099C 64 80            [12] 2270 	xrl	a,#0x80
      00099E 94 80            [12] 2271 	subb	a,#0x80
      0009A0 40 21            [24] 2272 	jc	00102$
                                   2273 ;	lcdCommands.c:302: goToAddr(lookUpTable[2][15]);
      0009A2 90r02r23         [24] 2274 	mov	dptr,#(_lookUpTable + 0x002f)
      0009A5 E4               [12] 2275 	clr	a
      0009A6 93               [24] 2276 	movc	a,@a+dptr
      0009A7 F5 82            [12] 2277 	mov	dpl,a
      0009A9 C0 06            [24] 2278 	push	ar6
      0009AB 12r00rAD         [24] 2279 	lcall	_goToAddr
                                   2280 ;	lcdCommands.c:303: busyWait();
      0009AE 12r00r1E         [24] 2281 	lcall	_busyWait
                                   2282 ;	lcdCommands.c:304: lcdPutCh(' ');
      0009B1 75 82 20         [24] 2283 	mov	dpl,#0x20
      0009B4 12r00r8B         [24] 2284 	lcall	_lcdPutCh
                                   2285 ;	lcdCommands.c:305: busyWait();
      0009B7 12r00r1E         [24] 2286 	lcall	_busyWait
      0009BA D0 06            [24] 2287 	pop	ar6
                                   2288 ;	lcdCommands.c:306: i = 0;
      0009BC 90r00r17         [24] 2289 	mov	dptr,#_gamePacman_i_65536_107
      0009BF E4               [12] 2290 	clr	a
      0009C0 F0               [24] 2291 	movx	@dptr,a
      0009C1 A3               [24] 2292 	inc	dptr
      0009C2 F0               [24] 2293 	movx	@dptr,a
      0009C3                       2294 00102$:
                                   2295 ;	lcdCommands.c:308: i++;
      0009C3 90r00r17         [24] 2296 	mov	dptr,#_gamePacman_i_65536_107
      0009C6 E0               [24] 2297 	movx	a,@dptr
      0009C7 24 01            [12] 2298 	add	a,#0x01
      0009C9 F0               [24] 2299 	movx	@dptr,a
      0009CA A3               [24] 2300 	inc	dptr
      0009CB E0               [24] 2301 	movx	a,@dptr
      0009CC 34 00            [12] 2302 	addc	a,#0x00
      0009CE F0               [24] 2303 	movx	@dptr,a
      0009CF                       2304 00104$:
                                   2305 ;	lcdCommands.c:310: i--;
      0009CF 90r00r17         [24] 2306 	mov	dptr,#_gamePacman_i_65536_107
      0009D2 E0               [24] 2307 	movx	a,@dptr
      0009D3 24 FF            [12] 2308 	add	a,#0xff
      0009D5 FD               [12] 2309 	mov	r5,a
      0009D6 A3               [24] 2310 	inc	dptr
      0009D7 E0               [24] 2311 	movx	a,@dptr
      0009D8 34 FF            [12] 2312 	addc	a,#0xff
      0009DA FF               [12] 2313 	mov	r7,a
      0009DB 90r00r17         [24] 2314 	mov	dptr,#_gamePacman_i_65536_107
      0009DE ED               [12] 2315 	mov	a,r5
      0009DF F0               [24] 2316 	movx	@dptr,a
      0009E0 EF               [12] 2317 	mov	a,r7
      0009E1 A3               [24] 2318 	inc	dptr
      0009E2 F0               [24] 2319 	movx	@dptr,a
                                   2320 ;	lcdCommands.c:312: if(ch == 'a')
      0009E3 BE 61 02         [24] 2321 	cjne	r6,#0x61,00137$
      0009E6 80 03            [24] 2322 	sjmp	00138$
      0009E8                       2323 00137$:
      0009E8 02r0Ar99         [24] 2324 	ljmp	00108$
      0009EB                       2325 00138$:
                                   2326 ;	lcdCommands.c:314: putchar(7);
      0009EB 90 00 07         [24] 2327 	mov	dptr,#0x0007
      0009EE C0 06            [24] 2328 	push	ar6
      0009F0 12r00r00         [24] 2329 	lcall	_putchar
      0009F3 D0 06            [24] 2330 	pop	ar6
                                   2331 ;	lcdCommands.c:315: goToAddr(lookUpTable[0][i+1]);
      0009F5 90r00r17         [24] 2332 	mov	dptr,#_gamePacman_i_65536_107
      0009F8 E0               [24] 2333 	movx	a,@dptr
      0009F9 FD               [12] 2334 	mov	r5,a
      0009FA A3               [24] 2335 	inc	dptr
      0009FB E0               [24] 2336 	movx	a,@dptr
      0009FC FF               [12] 2337 	mov	r7,a
      0009FD 8D 04            [24] 2338 	mov	ar4,r5
      0009FF EC               [12] 2339 	mov	a,r4
      000A00 04               [12] 2340 	inc	a
      000A01 90r01rF4         [24] 2341 	mov	dptr,#_lookUpTable
      000A04 93               [24] 2342 	movc	a,@a+dptr
      000A05 F5 82            [12] 2343 	mov	dpl,a
      000A07 C0 07            [24] 2344 	push	ar7
      000A09 C0 06            [24] 2345 	push	ar6
      000A0B C0 05            [24] 2346 	push	ar5
      000A0D 12r00rAD         [24] 2347 	lcall	_goToAddr
                                   2348 ;	lcdCommands.c:316: busyWait();
      000A10 12r00r1E         [24] 2349 	lcall	_busyWait
                                   2350 ;	lcdCommands.c:317: lcdPutCh(' ');
      000A13 75 82 20         [24] 2351 	mov	dpl,#0x20
      000A16 12r00r8B         [24] 2352 	lcall	_lcdPutCh
                                   2353 ;	lcdCommands.c:318: busyWait();
      000A19 12r00r1E         [24] 2354 	lcall	_busyWait
      000A1C D0 05            [24] 2355 	pop	ar5
      000A1E D0 06            [24] 2356 	pop	ar6
      000A20 D0 07            [24] 2357 	pop	ar7
                                   2358 ;	lcdCommands.c:319: lcdGeneral = 0x80 | (lookUpTable[0][i]);
      000A22 ED               [12] 2359 	mov	a,r5
      000A23 24rF4            [12] 2360 	add	a,#_lookUpTable
      000A25 F5 82            [12] 2361 	mov	dpl,a
      000A27 EF               [12] 2362 	mov	a,r7
      000A28 34s01            [12] 2363 	addc	a,#(_lookUpTable >> 8)
      000A2A F5 83            [12] 2364 	mov	dph,a
      000A2C E4               [12] 2365 	clr	a
      000A2D 93               [24] 2366 	movc	a,@a+dptr
      000A2E FC               [12] 2367 	mov	r4,a
      000A2F 7B 00            [12] 2368 	mov	r3,#0x00
      000A31 90 F0 00         [24] 2369 	mov	dptr,#_lcdGeneral
      000A34 74 80            [12] 2370 	mov	a,#0x80
      000A36 4C               [12] 2371 	orl	a,r4
      000A37 F0               [24] 2372 	movx	@dptr,a
      000A38 EB               [12] 2373 	mov	a,r3
      000A39 A3               [24] 2374 	inc	dptr
      000A3A F0               [24] 2375 	movx	@dptr,a
                                   2376 ;	lcdCommands.c:320: busyWait();
      000A3B C0 07            [24] 2377 	push	ar7
      000A3D C0 06            [24] 2378 	push	ar6
      000A3F C0 05            [24] 2379 	push	ar5
      000A41 12r00r1E         [24] 2380 	lcall	_busyWait
                                   2381 ;	lcdCommands.c:321: writeCharacter = 0x00;
      000A44 90 F1 00         [24] 2382 	mov	dptr,#_writeCharacter
      000A47 E4               [12] 2383 	clr	a
      000A48 F0               [24] 2384 	movx	@dptr,a
      000A49 A3               [24] 2385 	inc	dptr
      000A4A F0               [24] 2386 	movx	@dptr,a
                                   2387 ;	lcdCommands.c:322: busyWait();
      000A4B 12r00r1E         [24] 2388 	lcall	_busyWait
      000A4E D0 05            [24] 2389 	pop	ar5
      000A50 D0 06            [24] 2390 	pop	ar6
      000A52 D0 07            [24] 2391 	pop	ar7
                                   2392 ;	lcdCommands.c:323: if( i <= 0)
      000A54 C3               [12] 2393 	clr	c
      000A55 E4               [12] 2394 	clr	a
      000A56 9D               [12] 2395 	subb	a,r5
      000A57 74 80            [12] 2396 	mov	a,#(0x00 ^ 0x80)
      000A59 8F F0            [24] 2397 	mov	b,r7
      000A5B 63 F0 80         [24] 2398 	xrl	b,#0x80
      000A5E 95 F0            [12] 2399 	subb	a,b
      000A60 40 23            [24] 2400 	jc	00106$
                                   2401 ;	lcdCommands.c:325: goToAddr(lookUpTable[0][0]);
      000A62 90r01rF4         [24] 2402 	mov	dptr,#_lookUpTable
      000A65 E4               [12] 2403 	clr	a
      000A66 93               [24] 2404 	movc	a,@a+dptr
      000A67 F5 82            [12] 2405 	mov	dpl,a
      000A69 C0 06            [24] 2406 	push	ar6
      000A6B 12r00rAD         [24] 2407 	lcall	_goToAddr
                                   2408 ;	lcdCommands.c:326: busyWait();
      000A6E 12r00r1E         [24] 2409 	lcall	_busyWait
                                   2410 ;	lcdCommands.c:327: lcdPutCh(' ');
      000A71 75 82 20         [24] 2411 	mov	dpl,#0x20
      000A74 12r00r8B         [24] 2412 	lcall	_lcdPutCh
                                   2413 ;	lcdCommands.c:328: busyWait();
      000A77 12r00r1E         [24] 2414 	lcall	_busyWait
      000A7A D0 06            [24] 2415 	pop	ar6
                                   2416 ;	lcdCommands.c:329: i = 47;
      000A7C 90r00r17         [24] 2417 	mov	dptr,#_gamePacman_i_65536_107
      000A7F 74 2F            [12] 2418 	mov	a,#0x2f
      000A81 F0               [24] 2419 	movx	@dptr,a
      000A82 E4               [12] 2420 	clr	a
      000A83 A3               [24] 2421 	inc	dptr
      000A84 F0               [24] 2422 	movx	@dptr,a
      000A85                       2423 00106$:
                                   2424 ;	lcdCommands.c:331: i--;
      000A85 90r00r17         [24] 2425 	mov	dptr,#_gamePacman_i_65536_107
      000A88 E0               [24] 2426 	movx	a,@dptr
      000A89 24 FF            [12] 2427 	add	a,#0xff
      000A8B FD               [12] 2428 	mov	r5,a
      000A8C A3               [24] 2429 	inc	dptr
      000A8D E0               [24] 2430 	movx	a,@dptr
      000A8E 34 FF            [12] 2431 	addc	a,#0xff
      000A90 FF               [12] 2432 	mov	r7,a
      000A91 90r00r17         [24] 2433 	mov	dptr,#_gamePacman_i_65536_107
      000A94 ED               [12] 2434 	mov	a,r5
      000A95 F0               [24] 2435 	movx	@dptr,a
      000A96 EF               [12] 2436 	mov	a,r7
      000A97 A3               [24] 2437 	inc	dptr
      000A98 F0               [24] 2438 	movx	@dptr,a
      000A99                       2439 00108$:
                                   2440 ;	lcdCommands.c:333: i++;
      000A99 90r00r17         [24] 2441 	mov	dptr,#_gamePacman_i_65536_107
      000A9C E0               [24] 2442 	movx	a,@dptr
      000A9D 24 01            [12] 2443 	add	a,#0x01
      000A9F F0               [24] 2444 	movx	@dptr,a
      000AA0 A3               [24] 2445 	inc	dptr
      000AA1 E0               [24] 2446 	movx	a,@dptr
      000AA2 34 00            [12] 2447 	addc	a,#0x00
      000AA4 F0               [24] 2448 	movx	@dptr,a
                                   2449 ;	lcdCommands.c:334: }while(ch != 'q');
      000AA5 BE 71 01         [24] 2450 	cjne	r6,#0x71,00140$
      000AA8 22               [24] 2451 	ret
      000AA9                       2452 00140$:
      000AA9 02r09r1F         [24] 2453 	ljmp	00109$
                                   2454 ;	lcdCommands.c:335: }
      000AAC 22               [24] 2455 	ret
                                   2456 ;------------------------------------------------------------
                                   2457 ;Allocation info for local variables in function 'makePacmanRight'
                                   2458 ;------------------------------------------------------------
                                   2459 ;	lcdCommands.c:337: void makePacmanRight()
                                   2460 ;	-----------------------------------------
                                   2461 ;	 function makePacmanRight
                                   2462 ;	-----------------------------------------
      000AAD                       2463 _makePacmanRight:
                                   2464 ;	lcdCommands.c:339: busyWait();
      000AAD 12r00r1E         [24] 2465 	lcall	_busyWait
                                   2466 ;	lcdCommands.c:340: lcdGeneral = 0x40 | 0x00;
      000AB0 90 F0 00         [24] 2467 	mov	dptr,#_lcdGeneral
      000AB3 74 40            [12] 2468 	mov	a,#0x40
      000AB5 F0               [24] 2469 	movx	@dptr,a
      000AB6 E4               [12] 2470 	clr	a
      000AB7 A3               [24] 2471 	inc	dptr
      000AB8 F0               [24] 2472 	movx	@dptr,a
                                   2473 ;	lcdCommands.c:341: busyWait();
      000AB9 12r00r1E         [24] 2474 	lcall	_busyWait
                                   2475 ;	lcdCommands.c:342: writeCharacter = 0x06;
      000ABC 90 F1 00         [24] 2476 	mov	dptr,#_writeCharacter
      000ABF 74 06            [12] 2477 	mov	a,#0x06
      000AC1 F0               [24] 2478 	movx	@dptr,a
      000AC2 E4               [12] 2479 	clr	a
      000AC3 A3               [24] 2480 	inc	dptr
      000AC4 F0               [24] 2481 	movx	@dptr,a
                                   2482 ;	lcdCommands.c:343: busyWait();
      000AC5 12r00r1E         [24] 2483 	lcall	_busyWait
                                   2484 ;	lcdCommands.c:344: lcdGeneral = 0x40 | 0x01;
      000AC8 90 F0 00         [24] 2485 	mov	dptr,#_lcdGeneral
      000ACB 74 41            [12] 2486 	mov	a,#0x41
      000ACD F0               [24] 2487 	movx	@dptr,a
      000ACE E4               [12] 2488 	clr	a
      000ACF A3               [24] 2489 	inc	dptr
      000AD0 F0               [24] 2490 	movx	@dptr,a
                                   2491 ;	lcdCommands.c:345: busyWait();
      000AD1 12r00r1E         [24] 2492 	lcall	_busyWait
                                   2493 ;	lcdCommands.c:346: writeCharacter = 0x09;
      000AD4 90 F1 00         [24] 2494 	mov	dptr,#_writeCharacter
      000AD7 74 09            [12] 2495 	mov	a,#0x09
      000AD9 F0               [24] 2496 	movx	@dptr,a
      000ADA E4               [12] 2497 	clr	a
      000ADB A3               [24] 2498 	inc	dptr
      000ADC F0               [24] 2499 	movx	@dptr,a
                                   2500 ;	lcdCommands.c:347: busyWait();
      000ADD 12r00r1E         [24] 2501 	lcall	_busyWait
                                   2502 ;	lcdCommands.c:348: lcdGeneral = 0x40 | 0x02;
      000AE0 90 F0 00         [24] 2503 	mov	dptr,#_lcdGeneral
      000AE3 74 42            [12] 2504 	mov	a,#0x42
      000AE5 F0               [24] 2505 	movx	@dptr,a
      000AE6 E4               [12] 2506 	clr	a
      000AE7 A3               [24] 2507 	inc	dptr
      000AE8 F0               [24] 2508 	movx	@dptr,a
                                   2509 ;	lcdCommands.c:349: busyWait();
      000AE9 12r00r1E         [24] 2510 	lcall	_busyWait
                                   2511 ;	lcdCommands.c:350: writeCharacter = 0x12;
      000AEC 90 F1 00         [24] 2512 	mov	dptr,#_writeCharacter
      000AEF 74 12            [12] 2513 	mov	a,#0x12
      000AF1 F0               [24] 2514 	movx	@dptr,a
      000AF2 E4               [12] 2515 	clr	a
      000AF3 A3               [24] 2516 	inc	dptr
      000AF4 F0               [24] 2517 	movx	@dptr,a
                                   2518 ;	lcdCommands.c:351: busyWait();
      000AF5 12r00r1E         [24] 2519 	lcall	_busyWait
                                   2520 ;	lcdCommands.c:352: lcdGeneral = 0x40 | 0x03;
      000AF8 90 F0 00         [24] 2521 	mov	dptr,#_lcdGeneral
      000AFB 74 43            [12] 2522 	mov	a,#0x43
      000AFD F0               [24] 2523 	movx	@dptr,a
      000AFE E4               [12] 2524 	clr	a
      000AFF A3               [24] 2525 	inc	dptr
      000B00 F0               [24] 2526 	movx	@dptr,a
                                   2527 ;	lcdCommands.c:353: busyWait();
      000B01 12r00r1E         [24] 2528 	lcall	_busyWait
                                   2529 ;	lcdCommands.c:354: writeCharacter = 0x14;
      000B04 90 F1 00         [24] 2530 	mov	dptr,#_writeCharacter
      000B07 74 14            [12] 2531 	mov	a,#0x14
      000B09 F0               [24] 2532 	movx	@dptr,a
      000B0A E4               [12] 2533 	clr	a
      000B0B A3               [24] 2534 	inc	dptr
      000B0C F0               [24] 2535 	movx	@dptr,a
                                   2536 ;	lcdCommands.c:355: busyWait();
      000B0D 12r00r1E         [24] 2537 	lcall	_busyWait
                                   2538 ;	lcdCommands.c:356: lcdGeneral = 0x40 | 0x04;
      000B10 90 F0 00         [24] 2539 	mov	dptr,#_lcdGeneral
      000B13 74 44            [12] 2540 	mov	a,#0x44
      000B15 F0               [24] 2541 	movx	@dptr,a
      000B16 E4               [12] 2542 	clr	a
      000B17 A3               [24] 2543 	inc	dptr
      000B18 F0               [24] 2544 	movx	@dptr,a
                                   2545 ;	lcdCommands.c:357: busyWait();
      000B19 12r00r1E         [24] 2546 	lcall	_busyWait
                                   2547 ;	lcdCommands.c:358: writeCharacter = 0x14;
      000B1C 90 F1 00         [24] 2548 	mov	dptr,#_writeCharacter
      000B1F 74 14            [12] 2549 	mov	a,#0x14
      000B21 F0               [24] 2550 	movx	@dptr,a
      000B22 E4               [12] 2551 	clr	a
      000B23 A3               [24] 2552 	inc	dptr
      000B24 F0               [24] 2553 	movx	@dptr,a
                                   2554 ;	lcdCommands.c:359: busyWait();
      000B25 12r00r1E         [24] 2555 	lcall	_busyWait
                                   2556 ;	lcdCommands.c:360: lcdGeneral = 0x40 | 0x05;
      000B28 90 F0 00         [24] 2557 	mov	dptr,#_lcdGeneral
      000B2B 74 45            [12] 2558 	mov	a,#0x45
      000B2D F0               [24] 2559 	movx	@dptr,a
      000B2E E4               [12] 2560 	clr	a
      000B2F A3               [24] 2561 	inc	dptr
      000B30 F0               [24] 2562 	movx	@dptr,a
                                   2563 ;	lcdCommands.c:361: busyWait();
      000B31 12r00r1E         [24] 2564 	lcall	_busyWait
                                   2565 ;	lcdCommands.c:362: writeCharacter = 0x12;
      000B34 90 F1 00         [24] 2566 	mov	dptr,#_writeCharacter
      000B37 74 12            [12] 2567 	mov	a,#0x12
      000B39 F0               [24] 2568 	movx	@dptr,a
      000B3A E4               [12] 2569 	clr	a
      000B3B A3               [24] 2570 	inc	dptr
      000B3C F0               [24] 2571 	movx	@dptr,a
                                   2572 ;	lcdCommands.c:363: busyWait();
      000B3D 12r00r1E         [24] 2573 	lcall	_busyWait
                                   2574 ;	lcdCommands.c:364: lcdGeneral = 0x40 | 0x06;
      000B40 90 F0 00         [24] 2575 	mov	dptr,#_lcdGeneral
      000B43 74 46            [12] 2576 	mov	a,#0x46
      000B45 F0               [24] 2577 	movx	@dptr,a
      000B46 E4               [12] 2578 	clr	a
      000B47 A3               [24] 2579 	inc	dptr
      000B48 F0               [24] 2580 	movx	@dptr,a
                                   2581 ;	lcdCommands.c:365: busyWait();
      000B49 12r00r1E         [24] 2582 	lcall	_busyWait
                                   2583 ;	lcdCommands.c:366: writeCharacter = 0x09;
      000B4C 90 F1 00         [24] 2584 	mov	dptr,#_writeCharacter
      000B4F 74 09            [12] 2585 	mov	a,#0x09
      000B51 F0               [24] 2586 	movx	@dptr,a
      000B52 E4               [12] 2587 	clr	a
      000B53 A3               [24] 2588 	inc	dptr
      000B54 F0               [24] 2589 	movx	@dptr,a
                                   2590 ;	lcdCommands.c:367: busyWait();
      000B55 12r00r1E         [24] 2591 	lcall	_busyWait
                                   2592 ;	lcdCommands.c:368: lcdGeneral = 0x40 | 0x07;
      000B58 90 F0 00         [24] 2593 	mov	dptr,#_lcdGeneral
      000B5B 74 47            [12] 2594 	mov	a,#0x47
      000B5D F0               [24] 2595 	movx	@dptr,a
      000B5E E4               [12] 2596 	clr	a
      000B5F A3               [24] 2597 	inc	dptr
      000B60 F0               [24] 2598 	movx	@dptr,a
                                   2599 ;	lcdCommands.c:369: busyWait();
      000B61 12r00r1E         [24] 2600 	lcall	_busyWait
                                   2601 ;	lcdCommands.c:370: writeCharacter = 0x06;
      000B64 90 F1 00         [24] 2602 	mov	dptr,#_writeCharacter
      000B67 74 06            [12] 2603 	mov	a,#0x06
      000B69 F0               [24] 2604 	movx	@dptr,a
      000B6A E4               [12] 2605 	clr	a
      000B6B A3               [24] 2606 	inc	dptr
      000B6C F0               [24] 2607 	movx	@dptr,a
                                   2608 ;	lcdCommands.c:371: busyWait();
      000B6D 12r00r1E         [24] 2609 	lcall	_busyWait
                                   2610 ;	lcdCommands.c:372: goToXY(3,1);
      000B70 90r00r02         [24] 2611 	mov	dptr,#_goToXY_PARM_2
      000B73 74 01            [12] 2612 	mov	a,#0x01
      000B75 F0               [24] 2613 	movx	@dptr,a
      000B76 75 82 03         [24] 2614 	mov	dpl,#0x03
      000B79 12r00rC8         [24] 2615 	lcall	_goToXY
                                   2616 ;	lcdCommands.c:373: busyWait();
      000B7C 12r00r1E         [24] 2617 	lcall	_busyWait
                                   2618 ;	lcdCommands.c:374: lcdGeneral = 0x80 | 0x00;
      000B7F 90 F0 00         [24] 2619 	mov	dptr,#_lcdGeneral
      000B82 74 80            [12] 2620 	mov	a,#0x80
      000B84 F0               [24] 2621 	movx	@dptr,a
      000B85 E4               [12] 2622 	clr	a
      000B86 A3               [24] 2623 	inc	dptr
      000B87 F0               [24] 2624 	movx	@dptr,a
                                   2625 ;	lcdCommands.c:375: busyWait();
      000B88 12r00r1E         [24] 2626 	lcall	_busyWait
                                   2627 ;	lcdCommands.c:376: writeCharacter = 0x00;
      000B8B 90 F1 00         [24] 2628 	mov	dptr,#_writeCharacter
      000B8E E4               [12] 2629 	clr	a
      000B8F F0               [24] 2630 	movx	@dptr,a
      000B90 A3               [24] 2631 	inc	dptr
      000B91 F0               [24] 2632 	movx	@dptr,a
                                   2633 ;	lcdCommands.c:377: }
      000B92 22               [24] 2634 	ret
                                   2635 ;------------------------------------------------------------
                                   2636 ;Allocation info for local variables in function 'makePacmanLeft'
                                   2637 ;------------------------------------------------------------
                                   2638 ;	lcdCommands.c:378: void makePacmanLeft()
                                   2639 ;	-----------------------------------------
                                   2640 ;	 function makePacmanLeft
                                   2641 ;	-----------------------------------------
      000B93                       2642 _makePacmanLeft:
                                   2643 ;	lcdCommands.c:380: busyWait();
      000B93 12r00r1E         [24] 2644 	lcall	_busyWait
                                   2645 ;	lcdCommands.c:381: lcdGeneral = 0x40 | 0x30;
      000B96 90 F0 00         [24] 2646 	mov	dptr,#_lcdGeneral
      000B99 74 70            [12] 2647 	mov	a,#0x70
      000B9B F0               [24] 2648 	movx	@dptr,a
      000B9C E4               [12] 2649 	clr	a
      000B9D A3               [24] 2650 	inc	dptr
      000B9E F0               [24] 2651 	movx	@dptr,a
                                   2652 ;	lcdCommands.c:382: busyWait();
      000B9F 12r00r1E         [24] 2653 	lcall	_busyWait
                                   2654 ;	lcdCommands.c:383: writeCharacter = 0x0C;
      000BA2 90 F1 00         [24] 2655 	mov	dptr,#_writeCharacter
      000BA5 74 0C            [12] 2656 	mov	a,#0x0c
      000BA7 F0               [24] 2657 	movx	@dptr,a
      000BA8 E4               [12] 2658 	clr	a
      000BA9 A3               [24] 2659 	inc	dptr
      000BAA F0               [24] 2660 	movx	@dptr,a
                                   2661 ;	lcdCommands.c:384: busyWait();
      000BAB 12r00r1E         [24] 2662 	lcall	_busyWait
                                   2663 ;	lcdCommands.c:385: lcdGeneral = 0x40 | 0x31;
      000BAE 90 F0 00         [24] 2664 	mov	dptr,#_lcdGeneral
      000BB1 74 71            [12] 2665 	mov	a,#0x71
      000BB3 F0               [24] 2666 	movx	@dptr,a
      000BB4 E4               [12] 2667 	clr	a
      000BB5 A3               [24] 2668 	inc	dptr
      000BB6 F0               [24] 2669 	movx	@dptr,a
                                   2670 ;	lcdCommands.c:386: busyWait();
      000BB7 12r00r1E         [24] 2671 	lcall	_busyWait
                                   2672 ;	lcdCommands.c:387: writeCharacter = 0x12;
      000BBA 90 F1 00         [24] 2673 	mov	dptr,#_writeCharacter
      000BBD 74 12            [12] 2674 	mov	a,#0x12
      000BBF F0               [24] 2675 	movx	@dptr,a
      000BC0 E4               [12] 2676 	clr	a
      000BC1 A3               [24] 2677 	inc	dptr
      000BC2 F0               [24] 2678 	movx	@dptr,a
                                   2679 ;	lcdCommands.c:388: busyWait();
      000BC3 12r00r1E         [24] 2680 	lcall	_busyWait
                                   2681 ;	lcdCommands.c:389: lcdGeneral = 0x40 | 0x32;
      000BC6 90 F0 00         [24] 2682 	mov	dptr,#_lcdGeneral
      000BC9 74 72            [12] 2683 	mov	a,#0x72
      000BCB F0               [24] 2684 	movx	@dptr,a
      000BCC E4               [12] 2685 	clr	a
      000BCD A3               [24] 2686 	inc	dptr
      000BCE F0               [24] 2687 	movx	@dptr,a
                                   2688 ;	lcdCommands.c:390: busyWait();
      000BCF 12r00r1E         [24] 2689 	lcall	_busyWait
                                   2690 ;	lcdCommands.c:391: writeCharacter = 0x09;
      000BD2 90 F1 00         [24] 2691 	mov	dptr,#_writeCharacter
      000BD5 74 09            [12] 2692 	mov	a,#0x09
      000BD7 F0               [24] 2693 	movx	@dptr,a
      000BD8 E4               [12] 2694 	clr	a
      000BD9 A3               [24] 2695 	inc	dptr
      000BDA F0               [24] 2696 	movx	@dptr,a
                                   2697 ;	lcdCommands.c:392: busyWait();
      000BDB 12r00r1E         [24] 2698 	lcall	_busyWait
                                   2699 ;	lcdCommands.c:393: lcdGeneral = 0x40 | 0x33;
      000BDE 90 F0 00         [24] 2700 	mov	dptr,#_lcdGeneral
      000BE1 74 73            [12] 2701 	mov	a,#0x73
      000BE3 F0               [24] 2702 	movx	@dptr,a
      000BE4 E4               [12] 2703 	clr	a
      000BE5 A3               [24] 2704 	inc	dptr
      000BE6 F0               [24] 2705 	movx	@dptr,a
                                   2706 ;	lcdCommands.c:394: busyWait();
      000BE7 12r00r1E         [24] 2707 	lcall	_busyWait
                                   2708 ;	lcdCommands.c:395: writeCharacter = 0x05;
      000BEA 90 F1 00         [24] 2709 	mov	dptr,#_writeCharacter
      000BED 74 05            [12] 2710 	mov	a,#0x05
      000BEF F0               [24] 2711 	movx	@dptr,a
      000BF0 E4               [12] 2712 	clr	a
      000BF1 A3               [24] 2713 	inc	dptr
      000BF2 F0               [24] 2714 	movx	@dptr,a
                                   2715 ;	lcdCommands.c:396: busyWait();
      000BF3 12r00r1E         [24] 2716 	lcall	_busyWait
                                   2717 ;	lcdCommands.c:397: lcdGeneral = 0x40 | 0x34;
      000BF6 90 F0 00         [24] 2718 	mov	dptr,#_lcdGeneral
      000BF9 74 74            [12] 2719 	mov	a,#0x74
      000BFB F0               [24] 2720 	movx	@dptr,a
      000BFC E4               [12] 2721 	clr	a
      000BFD A3               [24] 2722 	inc	dptr
      000BFE F0               [24] 2723 	movx	@dptr,a
                                   2724 ;	lcdCommands.c:398: busyWait();
      000BFF 12r00r1E         [24] 2725 	lcall	_busyWait
                                   2726 ;	lcdCommands.c:399: writeCharacter = 0x05;
      000C02 90 F1 00         [24] 2727 	mov	dptr,#_writeCharacter
      000C05 74 05            [12] 2728 	mov	a,#0x05
      000C07 F0               [24] 2729 	movx	@dptr,a
      000C08 E4               [12] 2730 	clr	a
      000C09 A3               [24] 2731 	inc	dptr
      000C0A F0               [24] 2732 	movx	@dptr,a
                                   2733 ;	lcdCommands.c:400: busyWait();
      000C0B 12r00r1E         [24] 2734 	lcall	_busyWait
                                   2735 ;	lcdCommands.c:401: lcdGeneral = 0x40 | 0x35;
      000C0E 90 F0 00         [24] 2736 	mov	dptr,#_lcdGeneral
      000C11 74 75            [12] 2737 	mov	a,#0x75
      000C13 F0               [24] 2738 	movx	@dptr,a
      000C14 E4               [12] 2739 	clr	a
      000C15 A3               [24] 2740 	inc	dptr
      000C16 F0               [24] 2741 	movx	@dptr,a
                                   2742 ;	lcdCommands.c:402: busyWait();
      000C17 12r00r1E         [24] 2743 	lcall	_busyWait
                                   2744 ;	lcdCommands.c:403: writeCharacter = 0x09;
      000C1A 90 F1 00         [24] 2745 	mov	dptr,#_writeCharacter
      000C1D 74 09            [12] 2746 	mov	a,#0x09
      000C1F F0               [24] 2747 	movx	@dptr,a
      000C20 E4               [12] 2748 	clr	a
      000C21 A3               [24] 2749 	inc	dptr
      000C22 F0               [24] 2750 	movx	@dptr,a
                                   2751 ;	lcdCommands.c:404: busyWait();
      000C23 12r00r1E         [24] 2752 	lcall	_busyWait
                                   2753 ;	lcdCommands.c:405: lcdGeneral = 0x40 | 0x36;
      000C26 90 F0 00         [24] 2754 	mov	dptr,#_lcdGeneral
      000C29 74 76            [12] 2755 	mov	a,#0x76
      000C2B F0               [24] 2756 	movx	@dptr,a
      000C2C E4               [12] 2757 	clr	a
      000C2D A3               [24] 2758 	inc	dptr
      000C2E F0               [24] 2759 	movx	@dptr,a
                                   2760 ;	lcdCommands.c:406: busyWait();
      000C2F 12r00r1E         [24] 2761 	lcall	_busyWait
                                   2762 ;	lcdCommands.c:407: writeCharacter = 0x12;
      000C32 90 F1 00         [24] 2763 	mov	dptr,#_writeCharacter
      000C35 74 12            [12] 2764 	mov	a,#0x12
      000C37 F0               [24] 2765 	movx	@dptr,a
      000C38 E4               [12] 2766 	clr	a
      000C39 A3               [24] 2767 	inc	dptr
      000C3A F0               [24] 2768 	movx	@dptr,a
                                   2769 ;	lcdCommands.c:408: busyWait();
      000C3B 12r00r1E         [24] 2770 	lcall	_busyWait
                                   2771 ;	lcdCommands.c:409: lcdGeneral = 0x40 | 0x37;
      000C3E 90 F0 00         [24] 2772 	mov	dptr,#_lcdGeneral
      000C41 74 77            [12] 2773 	mov	a,#0x77
      000C43 F0               [24] 2774 	movx	@dptr,a
      000C44 E4               [12] 2775 	clr	a
      000C45 A3               [24] 2776 	inc	dptr
      000C46 F0               [24] 2777 	movx	@dptr,a
                                   2778 ;	lcdCommands.c:410: busyWait();
      000C47 12r00r1E         [24] 2779 	lcall	_busyWait
                                   2780 ;	lcdCommands.c:411: writeCharacter = 0x0C;
      000C4A 90 F1 00         [24] 2781 	mov	dptr,#_writeCharacter
      000C4D 74 0C            [12] 2782 	mov	a,#0x0c
      000C4F F0               [24] 2783 	movx	@dptr,a
      000C50 E4               [12] 2784 	clr	a
      000C51 A3               [24] 2785 	inc	dptr
      000C52 F0               [24] 2786 	movx	@dptr,a
                                   2787 ;	lcdCommands.c:412: busyWait();
      000C53 12r00r1E         [24] 2788 	lcall	_busyWait
                                   2789 ;	lcdCommands.c:413: goToXY(3,1);
      000C56 90r00r02         [24] 2790 	mov	dptr,#_goToXY_PARM_2
      000C59 74 01            [12] 2791 	mov	a,#0x01
      000C5B F0               [24] 2792 	movx	@dptr,a
      000C5C 75 82 03         [24] 2793 	mov	dpl,#0x03
      000C5F 12r00rC8         [24] 2794 	lcall	_goToXY
                                   2795 ;	lcdCommands.c:414: busyWait();
      000C62 12r00r1E         [24] 2796 	lcall	_busyWait
                                   2797 ;	lcdCommands.c:416: busyWait();
                                   2798 ;	lcdCommands.c:418: }
      000C65 02r00r1E         [24] 2799 	ljmp	_busyWait
                                   2800 ;------------------------------------------------------------
                                   2801 ;Allocation info for local variables in function 'printBinary'
                                   2802 ;------------------------------------------------------------
                                   2803 ;x                         Allocated with name '_printBinary_x_65536_115'
                                   2804 ;temp                      Allocated with name '_printBinary_temp_65536_116'
                                   2805 ;------------------------------------------------------------
                                   2806 ;	lcdCommands.c:420: void printBinary(int x)
                                   2807 ;	-----------------------------------------
                                   2808 ;	 function printBinary
                                   2809 ;	-----------------------------------------
      000C68                       2810 _printBinary:
      000C68 AF 83            [24] 2811 	mov	r7,dph
      000C6A E5 82            [12] 2812 	mov	a,dpl
      000C6C 90r00r19         [24] 2813 	mov	dptr,#_printBinary_x_65536_115
      000C6F F0               [24] 2814 	movx	@dptr,a
      000C70 EF               [12] 2815 	mov	a,r7
      000C71 A3               [24] 2816 	inc	dptr
      000C72 F0               [24] 2817 	movx	@dptr,a
                                   2818 ;	lcdCommands.c:423: while(x != 0)
      000C73                       2819 00101$:
      000C73 90r00r19         [24] 2820 	mov	dptr,#_printBinary_x_65536_115
      000C76 E0               [24] 2821 	movx	a,@dptr
      000C77 FE               [12] 2822 	mov	r6,a
      000C78 A3               [24] 2823 	inc	dptr
      000C79 E0               [24] 2824 	movx	a,@dptr
      000C7A FF               [12] 2825 	mov	r7,a
      000C7B 4E               [12] 2826 	orl	a,r6
      000C7C 60 3A            [24] 2827 	jz	00104$
                                   2828 ;	lcdCommands.c:425: temp = x % 2;
      000C7E 90r00r00         [24] 2829 	mov	dptr,#__modsint_PARM_2
      000C81 74 02            [12] 2830 	mov	a,#0x02
      000C83 F0               [24] 2831 	movx	@dptr,a
      000C84 E4               [12] 2832 	clr	a
      000C85 A3               [24] 2833 	inc	dptr
      000C86 F0               [24] 2834 	movx	@dptr,a
                                   2835 ;	lcdCommands.c:426: putchar(temp);
      000C87 8E 82            [24] 2836 	mov	dpl,r6
      000C89 8F 83            [24] 2837 	mov	dph,r7
      000C8B C0 07            [24] 2838 	push	ar7
      000C8D C0 06            [24] 2839 	push	ar6
      000C8F 12r00r00         [24] 2840 	lcall	__modsint
      000C92 12r00r00         [24] 2841 	lcall	_putchar
      000C95 D0 06            [24] 2842 	pop	ar6
      000C97 D0 07            [24] 2843 	pop	ar7
                                   2844 ;	lcdCommands.c:427: x = x / 2;
      000C99 90r00r00         [24] 2845 	mov	dptr,#__divsint_PARM_2
      000C9C 74 02            [12] 2846 	mov	a,#0x02
      000C9E F0               [24] 2847 	movx	@dptr,a
      000C9F E4               [12] 2848 	clr	a
      000CA0 A3               [24] 2849 	inc	dptr
      000CA1 F0               [24] 2850 	movx	@dptr,a
      000CA2 8E 82            [24] 2851 	mov	dpl,r6
      000CA4 8F 83            [24] 2852 	mov	dph,r7
      000CA6 12r00r00         [24] 2853 	lcall	__divsint
      000CA9 E5 82            [12] 2854 	mov	a,dpl
      000CAB 85 83 F0         [24] 2855 	mov	b,dph
      000CAE 90r00r19         [24] 2856 	mov	dptr,#_printBinary_x_65536_115
      000CB1 F0               [24] 2857 	movx	@dptr,a
      000CB2 E5 F0            [12] 2858 	mov	a,b
      000CB4 A3               [24] 2859 	inc	dptr
      000CB5 F0               [24] 2860 	movx	@dptr,a
      000CB6 80 BB            [24] 2861 	sjmp	00101$
      000CB8                       2862 00104$:
                                   2863 ;	lcdCommands.c:429: }
      000CB8 22               [24] 2864 	ret
                                   2865 ;------------------------------------------------------------
                                   2866 ;Allocation info for local variables in function 'atoh'
                                   2867 ;------------------------------------------------------------
                                   2868 ;ap                        Allocated with name '_atoh_ap_65536_118'
                                   2869 ;p                         Allocated with name '_atoh_p_65536_119'
                                   2870 ;n                         Allocated with name '_atoh_n_65536_119'
                                   2871 ;digit                     Allocated with name '_atoh_digit_65536_119'
                                   2872 ;lcase                     Allocated with name '_atoh_lcase_65536_119'
                                   2873 ;------------------------------------------------------------
                                   2874 ;	lcdCommands.c:431: int atoh(char *ap)
                                   2875 ;	-----------------------------------------
                                   2876 ;	 function atoh
                                   2877 ;	-----------------------------------------
      000CB9                       2878 _atoh:
      000CB9 AF F0            [24] 2879 	mov	r7,b
      000CBB AE 83            [24] 2880 	mov	r6,dph
      000CBD E5 82            [12] 2881 	mov	a,dpl
      000CBF 90r00r1B         [24] 2882 	mov	dptr,#_atoh_ap_65536_118
      000CC2 F0               [24] 2883 	movx	@dptr,a
      000CC3 EE               [12] 2884 	mov	a,r6
      000CC4 A3               [24] 2885 	inc	dptr
      000CC5 F0               [24] 2886 	movx	@dptr,a
      000CC6 EF               [12] 2887 	mov	a,r7
      000CC7 A3               [24] 2888 	inc	dptr
      000CC8 F0               [24] 2889 	movx	@dptr,a
                                   2890 ;	lcdCommands.c:437: p = ap;
      000CC9 90r00r1B         [24] 2891 	mov	dptr,#_atoh_ap_65536_118
      000CCC E0               [24] 2892 	movx	a,@dptr
      000CCD FD               [12] 2893 	mov	r5,a
      000CCE A3               [24] 2894 	inc	dptr
      000CCF E0               [24] 2895 	movx	a,@dptr
      000CD0 FE               [12] 2896 	mov	r6,a
      000CD1 A3               [24] 2897 	inc	dptr
      000CD2 E0               [24] 2898 	movx	a,@dptr
      000CD3 FF               [12] 2899 	mov	r7,a
                                   2900 ;	lcdCommands.c:438: n = 0;
      000CD4 90r00r21         [24] 2901 	mov	dptr,#_atoh_n_65536_119
      000CD7 E4               [12] 2902 	clr	a
      000CD8 F0               [24] 2903 	movx	@dptr,a
      000CD9 A3               [24] 2904 	inc	dptr
      000CDA F0               [24] 2905 	movx	@dptr,a
                                   2906 ;	lcdCommands.c:439: while(*p == ' ' || *p == '	')
      000CDB                       2907 00102$:
      000CDB 8D 82            [24] 2908 	mov	dpl,r5
      000CDD 8E 83            [24] 2909 	mov	dph,r6
      000CDF 8F F0            [24] 2910 	mov	b,r7
      000CE1 12r00r00         [24] 2911 	lcall	__gptrget
      000CE4 FC               [12] 2912 	mov	r4,a
      000CE5 BC 20 02         [24] 2913 	cjne	r4,#0x20,00178$
      000CE8 80 03            [24] 2914 	sjmp	00103$
      000CEA                       2915 00178$:
      000CEA BC 09 07         [24] 2916 	cjne	r4,#0x09,00141$
      000CED                       2917 00103$:
                                   2918 ;	lcdCommands.c:440: p++;
      000CED 0D               [12] 2919 	inc	r5
      000CEE BD 00 EA         [24] 2920 	cjne	r5,#0x00,00102$
      000CF1 0E               [12] 2921 	inc	r6
      000CF2 80 E7            [24] 2922 	sjmp	00102$
      000CF4                       2923 00141$:
      000CF4 90r00r1E         [24] 2924 	mov	dptr,#_atoh_p_65536_119
      000CF7 ED               [12] 2925 	mov	a,r5
      000CF8 F0               [24] 2926 	movx	@dptr,a
      000CF9 EE               [12] 2927 	mov	a,r6
      000CFA A3               [24] 2928 	inc	dptr
      000CFB F0               [24] 2929 	movx	@dptr,a
      000CFC EF               [12] 2930 	mov	a,r7
      000CFD A3               [24] 2931 	inc	dptr
      000CFE F0               [24] 2932 	movx	@dptr,a
                                   2933 ;	lcdCommands.c:442: if(*p == '0' && ((*(p+1) == 'x') || (*(p+1) == 'X')))
      000CFF BC 30 29         [24] 2934 	cjne	r4,#0x30,00118$
      000D02 74 01            [12] 2935 	mov	a,#0x01
      000D04 2D               [12] 2936 	add	a,r5
      000D05 FA               [12] 2937 	mov	r2,a
      000D06 E4               [12] 2938 	clr	a
      000D07 3E               [12] 2939 	addc	a,r6
      000D08 FB               [12] 2940 	mov	r3,a
      000D09 8F 04            [24] 2941 	mov	ar4,r7
      000D0B 8A 82            [24] 2942 	mov	dpl,r2
      000D0D 8B 83            [24] 2943 	mov	dph,r3
      000D0F 8C F0            [24] 2944 	mov	b,r4
      000D11 12r00r00         [24] 2945 	lcall	__gptrget
      000D14 FC               [12] 2946 	mov	r4,a
      000D15 BC 78 02         [24] 2947 	cjne	r4,#0x78,00184$
      000D18 80 03            [24] 2948 	sjmp	00105$
      000D1A                       2949 00184$:
      000D1A BC 58 0E         [24] 2950 	cjne	r4,#0x58,00118$
      000D1D                       2951 00105$:
                                   2952 ;	lcdCommands.c:443: p+=2;
      000D1D 90r00r1E         [24] 2953 	mov	dptr,#_atoh_p_65536_119
      000D20 74 02            [12] 2954 	mov	a,#0x02
      000D22 2D               [12] 2955 	add	a,r5
      000D23 F0               [24] 2956 	movx	@dptr,a
      000D24 E4               [12] 2957 	clr	a
      000D25 3E               [12] 2958 	addc	a,r6
      000D26 A3               [24] 2959 	inc	dptr
      000D27 F0               [24] 2960 	movx	@dptr,a
      000D28 EF               [12] 2961 	mov	a,r7
      000D29 A3               [24] 2962 	inc	dptr
      000D2A F0               [24] 2963 	movx	@dptr,a
                                   2964 ;	lcdCommands.c:445: while ((digit = (*p >= '0' && *p <= '9')) ||
      000D2B                       2965 00118$:
      000D2B 90r00r1E         [24] 2966 	mov	dptr,#_atoh_p_65536_119
      000D2E E0               [24] 2967 	movx	a,@dptr
      000D2F FD               [12] 2968 	mov	r5,a
      000D30 A3               [24] 2969 	inc	dptr
      000D31 E0               [24] 2970 	movx	a,@dptr
      000D32 FE               [12] 2971 	mov	r6,a
      000D33 A3               [24] 2972 	inc	dptr
      000D34 E0               [24] 2973 	movx	a,@dptr
      000D35 FF               [12] 2974 	mov	r7,a
      000D36 8D 82            [24] 2975 	mov	dpl,r5
      000D38 8E 83            [24] 2976 	mov	dph,r6
      000D3A 8F F0            [24] 2977 	mov	b,r7
      000D3C 12r00r00         [24] 2978 	lcall	__gptrget
      000D3F FF               [12] 2979 	mov	r7,a
      000D40 BF 30 00         [24] 2980 	cjne	r7,#0x30,00187$
      000D43                       2981 00187$:
      000D43 40 05            [24] 2982 	jc	00123$
      000D45 EF               [12] 2983 	mov	a,r7
      000D46 24 C6            [12] 2984 	add	a,#0xff - 0x39
      000D48 50 04            [24] 2985 	jnc	00124$
      000D4A                       2986 00123$:
      000D4A 7F 00            [12] 2987 	mov	r7,#0x00
      000D4C 80 02            [24] 2988 	sjmp	00125$
      000D4E                       2989 00124$:
      000D4E 7F 01            [12] 2990 	mov	r7,#0x01
      000D50                       2991 00125$:
      000D50 EF               [12] 2992 	mov	a,r7
      000D51 FD               [12] 2993 	mov	r5,a
      000D52 33               [12] 2994 	rlc	a
      000D53 95 E0            [12] 2995 	subb	a,acc
      000D55 FE               [12] 2996 	mov	r6,a
      000D56 EF               [12] 2997 	mov	a,r7
      000D57 70 5C            [24] 2998 	jnz	00119$
                                   2999 ;	lcdCommands.c:446: (lcase = (*p >= 'a' && *p <= 'f')) ||
      000D59 90r00r1E         [24] 3000 	mov	dptr,#_atoh_p_65536_119
      000D5C E0               [24] 3001 	movx	a,@dptr
      000D5D FB               [12] 3002 	mov	r3,a
      000D5E A3               [24] 3003 	inc	dptr
      000D5F E0               [24] 3004 	movx	a,@dptr
      000D60 FC               [12] 3005 	mov	r4,a
      000D61 A3               [24] 3006 	inc	dptr
      000D62 E0               [24] 3007 	movx	a,@dptr
      000D63 FF               [12] 3008 	mov	r7,a
      000D64 8B 82            [24] 3009 	mov	dpl,r3
      000D66 8C 83            [24] 3010 	mov	dph,r4
      000D68 8F F0            [24] 3011 	mov	b,r7
      000D6A 12r00r00         [24] 3012 	lcall	__gptrget
      000D6D FF               [12] 3013 	mov	r7,a
      000D6E BF 61 00         [24] 3014 	cjne	r7,#0x61,00191$
      000D71                       3015 00191$:
      000D71 40 05            [24] 3016 	jc	00126$
      000D73 EF               [12] 3017 	mov	a,r7
      000D74 24 99            [12] 3018 	add	a,#0xff - 0x66
      000D76 50 04            [24] 3019 	jnc	00127$
      000D78                       3020 00126$:
      000D78 7F 00            [12] 3021 	mov	r7,#0x00
      000D7A 80 02            [24] 3022 	sjmp	00128$
      000D7C                       3023 00127$:
      000D7C 7F 01            [12] 3024 	mov	r7,#0x01
      000D7E                       3025 00128$:
      000D7E EF               [12] 3026 	mov	a,r7
      000D7F FC               [12] 3027 	mov	r4,a
      000D80 33               [12] 3028 	rlc	a
      000D81 95 E0            [12] 3029 	subb	a,acc
      000D83 FF               [12] 3030 	mov	r7,a
      000D84 90r00r23         [24] 3031 	mov	dptr,#_atoh_lcase_65536_119
      000D87 EC               [12] 3032 	mov	a,r4
      000D88 F0               [24] 3033 	movx	@dptr,a
      000D89 EF               [12] 3034 	mov	a,r7
      000D8A A3               [24] 3035 	inc	dptr
      000D8B F0               [24] 3036 	movx	@dptr,a
      000D8C EC               [12] 3037 	mov	a,r4
      000D8D 4F               [12] 3038 	orl	a,r7
      000D8E 70 25            [24] 3039 	jnz	00119$
                                   3040 ;	lcdCommands.c:447: (*p >= 'A' && *p <= 'F')) {
      000D90 90r00r1E         [24] 3041 	mov	dptr,#_atoh_p_65536_119
      000D93 E0               [24] 3042 	movx	a,@dptr
      000D94 FB               [12] 3043 	mov	r3,a
      000D95 A3               [24] 3044 	inc	dptr
      000D96 E0               [24] 3045 	movx	a,@dptr
      000D97 FC               [12] 3046 	mov	r4,a
      000D98 A3               [24] 3047 	inc	dptr
      000D99 E0               [24] 3048 	movx	a,@dptr
      000D9A FF               [12] 3049 	mov	r7,a
      000D9B 8B 82            [24] 3050 	mov	dpl,r3
      000D9D 8C 83            [24] 3051 	mov	dph,r4
      000D9F 8F F0            [24] 3052 	mov	b,r7
      000DA1 12r00r00         [24] 3053 	lcall	__gptrget
      000DA4 FF               [12] 3054 	mov	r7,a
      000DA5 BF 41 00         [24] 3055 	cjne	r7,#0x41,00195$
      000DA8                       3056 00195$:
      000DA8 50 03            [24] 3057 	jnc	00196$
      000DAA 02r0ErA7         [24] 3058 	ljmp	00120$
      000DAD                       3059 00196$:
      000DAD EF               [12] 3060 	mov	a,r7
      000DAE 24 B9            [12] 3061 	add	a,#0xff - 0x46
      000DB0 50 03            [24] 3062 	jnc	00197$
      000DB2 02r0ErA7         [24] 3063 	ljmp	00120$
      000DB5                       3064 00197$:
      000DB5                       3065 00119$:
                                   3066 ;	lcdCommands.c:448: n *= 16;
      000DB5 90r00r21         [24] 3067 	mov	dptr,#_atoh_n_65536_119
      000DB8 E0               [24] 3068 	movx	a,@dptr
      000DB9 FC               [12] 3069 	mov	r4,a
      000DBA A3               [24] 3070 	inc	dptr
      000DBB E0               [24] 3071 	movx	a,@dptr
      000DBC C4               [12] 3072 	swap	a
      000DBD 54 F0            [12] 3073 	anl	a,#0xf0
      000DBF CC               [12] 3074 	xch	a,r4
      000DC0 C4               [12] 3075 	swap	a
      000DC1 CC               [12] 3076 	xch	a,r4
      000DC2 6C               [12] 3077 	xrl	a,r4
      000DC3 CC               [12] 3078 	xch	a,r4
      000DC4 54 F0            [12] 3079 	anl	a,#0xf0
      000DC6 CC               [12] 3080 	xch	a,r4
      000DC7 6C               [12] 3081 	xrl	a,r4
      000DC8 FF               [12] 3082 	mov	r7,a
      000DC9 90r00r21         [24] 3083 	mov	dptr,#_atoh_n_65536_119
      000DCC EC               [12] 3084 	mov	a,r4
      000DCD F0               [24] 3085 	movx	@dptr,a
      000DCE EF               [12] 3086 	mov	a,r7
      000DCF A3               [24] 3087 	inc	dptr
      000DD0 F0               [24] 3088 	movx	@dptr,a
                                   3089 ;	lcdCommands.c:449: if (digit)	n += *p++ - '0';
      000DD1 ED               [12] 3090 	mov	a,r5
      000DD2 4E               [12] 3091 	orl	a,r6
      000DD3 60 42            [24] 3092 	jz	00113$
      000DD5 90r00r1E         [24] 3093 	mov	dptr,#_atoh_p_65536_119
      000DD8 E0               [24] 3094 	movx	a,@dptr
      000DD9 FD               [12] 3095 	mov	r5,a
      000DDA A3               [24] 3096 	inc	dptr
      000DDB E0               [24] 3097 	movx	a,@dptr
      000DDC FE               [12] 3098 	mov	r6,a
      000DDD A3               [24] 3099 	inc	dptr
      000DDE E0               [24] 3100 	movx	a,@dptr
      000DDF FF               [12] 3101 	mov	r7,a
      000DE0 8D 82            [24] 3102 	mov	dpl,r5
      000DE2 8E 83            [24] 3103 	mov	dph,r6
      000DE4 8F F0            [24] 3104 	mov	b,r7
      000DE6 12r00r00         [24] 3105 	lcall	__gptrget
      000DE9 FC               [12] 3106 	mov	r4,a
      000DEA 90r00r1E         [24] 3107 	mov	dptr,#_atoh_p_65536_119
      000DED 74 01            [12] 3108 	mov	a,#0x01
      000DEF 2D               [12] 3109 	add	a,r5
      000DF0 F0               [24] 3110 	movx	@dptr,a
      000DF1 E4               [12] 3111 	clr	a
      000DF2 3E               [12] 3112 	addc	a,r6
      000DF3 A3               [24] 3113 	inc	dptr
      000DF4 F0               [24] 3114 	movx	@dptr,a
      000DF5 EF               [12] 3115 	mov	a,r7
      000DF6 A3               [24] 3116 	inc	dptr
      000DF7 F0               [24] 3117 	movx	@dptr,a
      000DF8 7F 00            [12] 3118 	mov	r7,#0x00
      000DFA EC               [12] 3119 	mov	a,r4
      000DFB 24 D0            [12] 3120 	add	a,#0xd0
      000DFD FC               [12] 3121 	mov	r4,a
      000DFE EF               [12] 3122 	mov	a,r7
      000DFF 34 FF            [12] 3123 	addc	a,#0xff
      000E01 FF               [12] 3124 	mov	r7,a
      000E02 90r00r21         [24] 3125 	mov	dptr,#_atoh_n_65536_119
      000E05 E0               [24] 3126 	movx	a,@dptr
      000E06 FD               [12] 3127 	mov	r5,a
      000E07 A3               [24] 3128 	inc	dptr
      000E08 E0               [24] 3129 	movx	a,@dptr
      000E09 FE               [12] 3130 	mov	r6,a
      000E0A 90r00r21         [24] 3131 	mov	dptr,#_atoh_n_65536_119
      000E0D EC               [12] 3132 	mov	a,r4
      000E0E 2D               [12] 3133 	add	a,r5
      000E0F F0               [24] 3134 	movx	@dptr,a
      000E10 EF               [12] 3135 	mov	a,r7
      000E11 3E               [12] 3136 	addc	a,r6
      000E12 A3               [24] 3137 	inc	dptr
      000E13 F0               [24] 3138 	movx	@dptr,a
      000E14 02r0Dr2B         [24] 3139 	ljmp	00118$
      000E17                       3140 00113$:
                                   3141 ;	lcdCommands.c:450: else if (lcase)	n += 10 + (*p++ - 'a');
      000E17 90r00r23         [24] 3142 	mov	dptr,#_atoh_lcase_65536_119
      000E1A E0               [24] 3143 	movx	a,@dptr
      000E1B F5 F0            [12] 3144 	mov	b,a
      000E1D A3               [24] 3145 	inc	dptr
      000E1E E0               [24] 3146 	movx	a,@dptr
      000E1F 45 F0            [12] 3147 	orl	a,b
      000E21 60 42            [24] 3148 	jz	00110$
      000E23 90r00r1E         [24] 3149 	mov	dptr,#_atoh_p_65536_119
      000E26 E0               [24] 3150 	movx	a,@dptr
      000E27 FD               [12] 3151 	mov	r5,a
      000E28 A3               [24] 3152 	inc	dptr
      000E29 E0               [24] 3153 	movx	a,@dptr
      000E2A FE               [12] 3154 	mov	r6,a
      000E2B A3               [24] 3155 	inc	dptr
      000E2C E0               [24] 3156 	movx	a,@dptr
      000E2D FF               [12] 3157 	mov	r7,a
      000E2E 8D 82            [24] 3158 	mov	dpl,r5
      000E30 8E 83            [24] 3159 	mov	dph,r6
      000E32 8F F0            [24] 3160 	mov	b,r7
      000E34 12r00r00         [24] 3161 	lcall	__gptrget
      000E37 FC               [12] 3162 	mov	r4,a
      000E38 90r00r1E         [24] 3163 	mov	dptr,#_atoh_p_65536_119
      000E3B 74 01            [12] 3164 	mov	a,#0x01
      000E3D 2D               [12] 3165 	add	a,r5
      000E3E F0               [24] 3166 	movx	@dptr,a
      000E3F E4               [12] 3167 	clr	a
      000E40 3E               [12] 3168 	addc	a,r6
      000E41 A3               [24] 3169 	inc	dptr
      000E42 F0               [24] 3170 	movx	@dptr,a
      000E43 EF               [12] 3171 	mov	a,r7
      000E44 A3               [24] 3172 	inc	dptr
      000E45 F0               [24] 3173 	movx	@dptr,a
      000E46 7F 00            [12] 3174 	mov	r7,#0x00
      000E48 74 A9            [12] 3175 	mov	a,#0xa9
      000E4A 2C               [12] 3176 	add	a,r4
      000E4B FC               [12] 3177 	mov	r4,a
      000E4C 74 FF            [12] 3178 	mov	a,#0xff
      000E4E 3F               [12] 3179 	addc	a,r7
      000E4F FF               [12] 3180 	mov	r7,a
      000E50 90r00r21         [24] 3181 	mov	dptr,#_atoh_n_65536_119
      000E53 E0               [24] 3182 	movx	a,@dptr
      000E54 FD               [12] 3183 	mov	r5,a
      000E55 A3               [24] 3184 	inc	dptr
      000E56 E0               [24] 3185 	movx	a,@dptr
      000E57 FE               [12] 3186 	mov	r6,a
      000E58 90r00r21         [24] 3187 	mov	dptr,#_atoh_n_65536_119
      000E5B EC               [12] 3188 	mov	a,r4
      000E5C 2D               [12] 3189 	add	a,r5
      000E5D F0               [24] 3190 	movx	@dptr,a
      000E5E EF               [12] 3191 	mov	a,r7
      000E5F 3E               [12] 3192 	addc	a,r6
      000E60 A3               [24] 3193 	inc	dptr
      000E61 F0               [24] 3194 	movx	@dptr,a
      000E62 02r0Dr2B         [24] 3195 	ljmp	00118$
      000E65                       3196 00110$:
                                   3197 ;	lcdCommands.c:451: else		n += 10 + (*p++ - 'A');
      000E65 90r00r1E         [24] 3198 	mov	dptr,#_atoh_p_65536_119
      000E68 E0               [24] 3199 	movx	a,@dptr
      000E69 FD               [12] 3200 	mov	r5,a
      000E6A A3               [24] 3201 	inc	dptr
      000E6B E0               [24] 3202 	movx	a,@dptr
      000E6C FE               [12] 3203 	mov	r6,a
      000E6D A3               [24] 3204 	inc	dptr
      000E6E E0               [24] 3205 	movx	a,@dptr
      000E6F FF               [12] 3206 	mov	r7,a
      000E70 8D 82            [24] 3207 	mov	dpl,r5
      000E72 8E 83            [24] 3208 	mov	dph,r6
      000E74 8F F0            [24] 3209 	mov	b,r7
      000E76 12r00r00         [24] 3210 	lcall	__gptrget
      000E79 FC               [12] 3211 	mov	r4,a
      000E7A 90r00r1E         [24] 3212 	mov	dptr,#_atoh_p_65536_119
      000E7D 74 01            [12] 3213 	mov	a,#0x01
      000E7F 2D               [12] 3214 	add	a,r5
      000E80 F0               [24] 3215 	movx	@dptr,a
      000E81 E4               [12] 3216 	clr	a
      000E82 3E               [12] 3217 	addc	a,r6
      000E83 A3               [24] 3218 	inc	dptr
      000E84 F0               [24] 3219 	movx	@dptr,a
      000E85 EF               [12] 3220 	mov	a,r7
      000E86 A3               [24] 3221 	inc	dptr
      000E87 F0               [24] 3222 	movx	@dptr,a
      000E88 7F 00            [12] 3223 	mov	r7,#0x00
      000E8A 74 C9            [12] 3224 	mov	a,#0xc9
      000E8C 2C               [12] 3225 	add	a,r4
      000E8D FC               [12] 3226 	mov	r4,a
      000E8E 74 FF            [12] 3227 	mov	a,#0xff
      000E90 3F               [12] 3228 	addc	a,r7
      000E91 FF               [12] 3229 	mov	r7,a
      000E92 90r00r21         [24] 3230 	mov	dptr,#_atoh_n_65536_119
      000E95 E0               [24] 3231 	movx	a,@dptr
      000E96 FD               [12] 3232 	mov	r5,a
      000E97 A3               [24] 3233 	inc	dptr
      000E98 E0               [24] 3234 	movx	a,@dptr
      000E99 FE               [12] 3235 	mov	r6,a
      000E9A 90r00r21         [24] 3236 	mov	dptr,#_atoh_n_65536_119
      000E9D EC               [12] 3237 	mov	a,r4
      000E9E 2D               [12] 3238 	add	a,r5
      000E9F F0               [24] 3239 	movx	@dptr,a
      000EA0 EF               [12] 3240 	mov	a,r7
      000EA1 3E               [12] 3241 	addc	a,r6
      000EA2 A3               [24] 3242 	inc	dptr
      000EA3 F0               [24] 3243 	movx	@dptr,a
      000EA4 02r0Dr2B         [24] 3244 	ljmp	00118$
      000EA7                       3245 00120$:
                                   3246 ;	lcdCommands.c:453: return(n);
      000EA7 90r00r21         [24] 3247 	mov	dptr,#_atoh_n_65536_119
      000EAA E0               [24] 3248 	movx	a,@dptr
      000EAB FE               [12] 3249 	mov	r6,a
      000EAC A3               [24] 3250 	inc	dptr
      000EAD E0               [24] 3251 	movx	a,@dptr
                                   3252 ;	lcdCommands.c:454: }
      000EAE 8E 82            [24] 3253 	mov	dpl,r6
      000EB0 F5 83            [12] 3254 	mov	dph,a
      000EB2 22               [24] 3255 	ret
                                   3256 ;------------------------------------------------------------
                                   3257 ;Allocation info for local variables in function 'printMenu'
                                   3258 ;------------------------------------------------------------
                                   3259 ;i                         Allocated with name '_printMenu_i_65536_121'
                                   3260 ;------------------------------------------------------------
                                   3261 ;	lcdCommands.c:456: void printMenu()
                                   3262 ;	-----------------------------------------
                                   3263 ;	 function printMenu
                                   3264 ;	-----------------------------------------
      000EB3                       3265 _printMenu:
                                   3266 ;	lcdCommands.c:459: printf("%s",uiLines);
      000EB3 74r00            [12] 3267 	mov	a,#_uiLines
      000EB5 C0 E0            [24] 3268 	push	acc
      000EB7 74s00            [12] 3269 	mov	a,#(_uiLines >> 8)
      000EB9 C0 E0            [24] 3270 	push	acc
      000EBB 74 80            [12] 3271 	mov	a,#0x80
      000EBD C0 E0            [24] 3272 	push	acc
      000EBF 74rBA            [12] 3273 	mov	a,#___str_16
      000EC1 C0 E0            [24] 3274 	push	acc
      000EC3 74s03            [12] 3275 	mov	a,#(___str_16 >> 8)
      000EC5 C0 E0            [24] 3276 	push	acc
      000EC7 74 80            [12] 3277 	mov	a,#0x80
      000EC9 C0 E0            [24] 3278 	push	acc
      000ECB 12r00r00         [24] 3279 	lcall	_printf
      000ECE E5 81            [12] 3280 	mov	a,sp
      000ED0 24 FA            [12] 3281 	add	a,#0xfa
      000ED2 F5 81            [12] 3282 	mov	sp,a
                                   3283 ;	lcdCommands.c:460: printf("\n\r");
      000ED4 74r53            [12] 3284 	mov	a,#___str_13
      000ED6 C0 E0            [24] 3285 	push	acc
      000ED8 74s03            [12] 3286 	mov	a,#(___str_13 >> 8)
      000EDA C0 E0            [24] 3287 	push	acc
      000EDC 74 80            [12] 3288 	mov	a,#0x80
      000EDE C0 E0            [24] 3289 	push	acc
      000EE0 12r00r00         [24] 3290 	lcall	_printf
      000EE3 15 81            [12] 3291 	dec	sp
      000EE5 15 81            [12] 3292 	dec	sp
      000EE7 15 81            [12] 3293 	dec	sp
                                   3294 ;	lcdCommands.c:461: for ( i = 0; i < 10; i++)
      000EE9 7E 00            [12] 3295 	mov	r6,#0x00
      000EEB 7F 00            [12] 3296 	mov	r7,#0x00
      000EED                       3297 00102$:
                                   3298 ;	lcdCommands.c:463: printf("%s",messages[i]);
      000EED 90r00r00         [24] 3299 	mov	dptr,#__mulint_PARM_2
      000EF0 EE               [12] 3300 	mov	a,r6
      000EF1 F0               [24] 3301 	movx	@dptr,a
      000EF2 EF               [12] 3302 	mov	a,r7
      000EF3 A3               [24] 3303 	inc	dptr
      000EF4 F0               [24] 3304 	movx	@dptr,a
      000EF5 90 00 28         [24] 3305 	mov	dptr,#0x0028
      000EF8 C0 07            [24] 3306 	push	ar7
      000EFA C0 06            [24] 3307 	push	ar6
      000EFC 12r00r00         [24] 3308 	lcall	__mulint
      000EFF AC 82            [24] 3309 	mov	r4,dpl
      000F01 AD 83            [24] 3310 	mov	r5,dph
      000F03 EC               [12] 3311 	mov	a,r4
      000F04 24r3C            [12] 3312 	add	a,#_messages
      000F06 FC               [12] 3313 	mov	r4,a
      000F07 ED               [12] 3314 	mov	a,r5
      000F08 34s00            [12] 3315 	addc	a,#(_messages >> 8)
      000F0A FD               [12] 3316 	mov	r5,a
      000F0B 7B 80            [12] 3317 	mov	r3,#0x80
      000F0D C0 04            [24] 3318 	push	ar4
      000F0F C0 05            [24] 3319 	push	ar5
      000F11 C0 03            [24] 3320 	push	ar3
      000F13 74rBA            [12] 3321 	mov	a,#___str_16
      000F15 C0 E0            [24] 3322 	push	acc
      000F17 74s03            [12] 3323 	mov	a,#(___str_16 >> 8)
      000F19 C0 E0            [24] 3324 	push	acc
      000F1B EB               [12] 3325 	mov	a,r3
      000F1C C0 E0            [24] 3326 	push	acc
      000F1E 12r00r00         [24] 3327 	lcall	_printf
      000F21 E5 81            [12] 3328 	mov	a,sp
      000F23 24 FA            [12] 3329 	add	a,#0xfa
      000F25 F5 81            [12] 3330 	mov	sp,a
                                   3331 ;	lcdCommands.c:464: printf_tiny("\n\r");
      000F27 74r53            [12] 3332 	mov	a,#___str_13
      000F29 C0 E0            [24] 3333 	push	acc
      000F2B 74s03            [12] 3334 	mov	a,#(___str_13 >> 8)
      000F2D C0 E0            [24] 3335 	push	acc
      000F2F 12r00r00         [24] 3336 	lcall	_printf_tiny
      000F32 15 81            [12] 3337 	dec	sp
      000F34 15 81            [12] 3338 	dec	sp
      000F36 D0 06            [24] 3339 	pop	ar6
      000F38 D0 07            [24] 3340 	pop	ar7
                                   3341 ;	lcdCommands.c:461: for ( i = 0; i < 10; i++)
      000F3A 0E               [12] 3342 	inc	r6
      000F3B BE 00 01         [24] 3343 	cjne	r6,#0x00,00115$
      000F3E 0F               [12] 3344 	inc	r7
      000F3F                       3345 00115$:
      000F3F C3               [12] 3346 	clr	c
      000F40 EE               [12] 3347 	mov	a,r6
      000F41 94 0A            [12] 3348 	subb	a,#0x0a
      000F43 EF               [12] 3349 	mov	a,r7
      000F44 64 80            [12] 3350 	xrl	a,#0x80
      000F46 94 80            [12] 3351 	subb	a,#0x80
      000F48 40 A3            [24] 3352 	jc	00102$
                                   3353 ;	lcdCommands.c:466: printf("%s",uiLines);
      000F4A 74r00            [12] 3354 	mov	a,#_uiLines
      000F4C C0 E0            [24] 3355 	push	acc
      000F4E 74s00            [12] 3356 	mov	a,#(_uiLines >> 8)
      000F50 C0 E0            [24] 3357 	push	acc
      000F52 74 80            [12] 3358 	mov	a,#0x80
      000F54 C0 E0            [24] 3359 	push	acc
      000F56 74rBA            [12] 3360 	mov	a,#___str_16
      000F58 C0 E0            [24] 3361 	push	acc
      000F5A 74s03            [12] 3362 	mov	a,#(___str_16 >> 8)
      000F5C C0 E0            [24] 3363 	push	acc
      000F5E 74 80            [12] 3364 	mov	a,#0x80
      000F60 C0 E0            [24] 3365 	push	acc
      000F62 12r00r00         [24] 3366 	lcall	_printf
      000F65 E5 81            [12] 3367 	mov	a,sp
      000F67 24 FA            [12] 3368 	add	a,#0xfa
      000F69 F5 81            [12] 3369 	mov	sp,a
                                   3370 ;	lcdCommands.c:467: printf("\n\r");
      000F6B 74r53            [12] 3371 	mov	a,#___str_13
      000F6D C0 E0            [24] 3372 	push	acc
      000F6F 74s03            [12] 3373 	mov	a,#(___str_13 >> 8)
      000F71 C0 E0            [24] 3374 	push	acc
      000F73 74 80            [12] 3375 	mov	a,#0x80
      000F75 C0 E0            [24] 3376 	push	acc
      000F77 12r00r00         [24] 3377 	lcall	_printf
      000F7A 15 81            [12] 3378 	dec	sp
      000F7C 15 81            [12] 3379 	dec	sp
      000F7E 15 81            [12] 3380 	dec	sp
                                   3381 ;	lcdCommands.c:469: }
      000F80 22               [24] 3382 	ret
                                   3383 	.area CSEG    (CODE)
                                   3384 	.area CONST   (CODE)
      000000                       3385 _uiLines:
      000000 0A                    3386 	.db 0x0a
      000001 0D                    3387 	.db 0x0d
      000002 2D 2D 2D 2D 2D 2D 2D  3388 	.ascii "-------------------------------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
      000033 0A                    3389 	.db 0x0a
      000034 0D                    3390 	.db 0x0d
      000035 00                    3391 	.db 0x00
      000036 00                    3392 	.db 0x00
      000037 00                    3393 	.db 0x00
      000038 00                    3394 	.db 0x00
      000039 00                    3395 	.db 0x00
      00003A 00                    3396 	.db 0x00
      00003B 00                    3397 	.db 0x00
      00003C                       3398 _messages:
      00003C 20 45 6E 74 65 72 20  3399 	.ascii " Enter w to write a character "
             77 20 74 6F 20 77 72
             69 74 65 20 61 20 63
             68 61 72 61 63 74 65
             72 20
      00005A 00                    3400 	.db 0x00
      00005B 00                    3401 	.db 0x00
      00005C 00                    3402 	.db 0x00
      00005D 00                    3403 	.db 0x00
      00005E 00                    3404 	.db 0x00
      00005F 00                    3405 	.db 0x00
      000060 00                    3406 	.db 0x00
      000061 00                    3407 	.db 0x00
      000062 00                    3408 	.db 0x00
      000063 00                    3409 	.db 0x00
      000064 20 45 6E 74 65 72 20  3410 	.ascii " Enter s to write a string"
             73 20 74 6F 20 77 72
             69 74 65 20 61 20 73
             74 72 69 6E 67
      00007E 00                    3411 	.db 0x00
      00007F 00                    3412 	.db 0x00
      000080 00                    3413 	.db 0x00
      000081 00                    3414 	.db 0x00
      000082 00                    3415 	.db 0x00
      000083 00                    3416 	.db 0x00
      000084 00                    3417 	.db 0x00
      000085 00                    3418 	.db 0x00
      000086 00                    3419 	.db 0x00
      000087 00                    3420 	.db 0x00
      000088 00                    3421 	.db 0x00
      000089 00                    3422 	.db 0x00
      00008A 00                    3423 	.db 0x00
      00008B 00                    3424 	.db 0x00
      00008C 20 45 6E 74 65 72 20  3425 	.ascii " Enter p to play pacman "
             70 20 74 6F 20 70 6C
             61 79 20 70 61 63 6D
             61 6E 20
      0000A4 00                    3426 	.db 0x00
      0000A5 00                    3427 	.db 0x00
      0000A6 00                    3428 	.db 0x00
      0000A7 00                    3429 	.db 0x00
      0000A8 00                    3430 	.db 0x00
      0000A9 00                    3431 	.db 0x00
      0000AA 00                    3432 	.db 0x00
      0000AB 00                    3433 	.db 0x00
      0000AC 00                    3434 	.db 0x00
      0000AD 00                    3435 	.db 0x00
      0000AE 00                    3436 	.db 0x00
      0000AF 00                    3437 	.db 0x00
      0000B0 00                    3438 	.db 0x00
      0000B1 00                    3439 	.db 0x00
      0000B2 00                    3440 	.db 0x00
      0000B3 00                    3441 	.db 0x00
      0000B4 20 45 6E 74 65 72 20  3442 	.ascii " Enter d to perform RAM dump "
             64 20 74 6F 20 70 65
             72 66 6F 72 6D 20 52
             41 4D 20 64 75 6D 70
             20
      0000D1 00                    3443 	.db 0x00
      0000D2 00                    3444 	.db 0x00
      0000D3 00                    3445 	.db 0x00
      0000D4 00                    3446 	.db 0x00
      0000D5 00                    3447 	.db 0x00
      0000D6 00                    3448 	.db 0x00
      0000D7 00                    3449 	.db 0x00
      0000D8 00                    3450 	.db 0x00
      0000D9 00                    3451 	.db 0x00
      0000DA 00                    3452 	.db 0x00
      0000DB 00                    3453 	.db 0x00
      0000DC 20 45 6E 74 65 72 20  3454 	.ascii " Enter g for custom character"
             67 20 66 6F 72 20 63
             75 73 74 6F 6D 20 63
             68 61 72 61 63 74 65
             72
      0000F9 00                    3455 	.db 0x00
      0000FA 00                    3456 	.db 0x00
      0000FB 00                    3457 	.db 0x00
      0000FC 00                    3458 	.db 0x00
      0000FD 00                    3459 	.db 0x00
      0000FE 00                    3460 	.db 0x00
      0000FF 00                    3461 	.db 0x00
      000100 00                    3462 	.db 0x00
      000101 00                    3463 	.db 0x00
      000102 00                    3464 	.db 0x00
      000103 00                    3465 	.db 0x00
      000104 20 45 6E 74 65 72 20  3466 	.ascii " Enter x to reset timer"
             78 20 74 6F 20 72 65
             73 65 74 20 74 69 6D
             65 72
      00011B 00                    3467 	.db 0x00
      00011C 00                    3468 	.db 0x00
      00011D 00                    3469 	.db 0x00
      00011E 00                    3470 	.db 0x00
      00011F 00                    3471 	.db 0x00
      000120 00                    3472 	.db 0x00
      000121 00                    3473 	.db 0x00
      000122 00                    3474 	.db 0x00
      000123 00                    3475 	.db 0x00
      000124 00                    3476 	.db 0x00
      000125 00                    3477 	.db 0x00
      000126 00                    3478 	.db 0x00
      000127 00                    3479 	.db 0x00
      000128 00                    3480 	.db 0x00
      000129 00                    3481 	.db 0x00
      00012A 00                    3482 	.db 0x00
      00012B 00                    3483 	.db 0x00
      00012C 20 45 6E 74 65 72 20  3484 	.ascii " Enter y to pause timer"
             79 20 74 6F 20 70 61
             75 73 65 20 74 69 6D
             65 72
      000143 00                    3485 	.db 0x00
      000144 00                    3486 	.db 0x00
      000145 00                    3487 	.db 0x00
      000146 00                    3488 	.db 0x00
      000147 00                    3489 	.db 0x00
      000148 00                    3490 	.db 0x00
      000149 00                    3491 	.db 0x00
      00014A 00                    3492 	.db 0x00
      00014B 00                    3493 	.db 0x00
      00014C 00                    3494 	.db 0x00
      00014D 00                    3495 	.db 0x00
      00014E 00                    3496 	.db 0x00
      00014F 00                    3497 	.db 0x00
      000150 00                    3498 	.db 0x00
      000151 00                    3499 	.db 0x00
      000152 00                    3500 	.db 0x00
      000153 00                    3501 	.db 0x00
      000154 20 45 6E 74 65 72 20  3502 	.ascii " Enter z to resume timer"
             7A 20 74 6F 20 72 65
             73 75 6D 65 20 74 69
             6D 65 72
      00016C 00                    3503 	.db 0x00
      00016D 00                    3504 	.db 0x00
      00016E 00                    3505 	.db 0x00
      00016F 00                    3506 	.db 0x00
      000170 00                    3507 	.db 0x00
      000171 00                    3508 	.db 0x00
      000172 00                    3509 	.db 0x00
      000173 00                    3510 	.db 0x00
      000174 00                    3511 	.db 0x00
      000175 00                    3512 	.db 0x00
      000176 00                    3513 	.db 0x00
      000177 00                    3514 	.db 0x00
      000178 00                    3515 	.db 0x00
      000179 00                    3516 	.db 0x00
      00017A 00                    3517 	.db 0x00
      00017B 00                    3518 	.db 0x00
      00017C 20 45 6E 74 65 72 20  3519 	.ascii " Enter s to clear screen"
             73 20 74 6F 20 63 6C
             65 61 72 20 73 63 72
             65 65 6E
      000194 00                    3520 	.db 0x00
      000195 00                    3521 	.db 0x00
      000196 00                    3522 	.db 0x00
      000197 00                    3523 	.db 0x00
      000198 00                    3524 	.db 0x00
      000199 00                    3525 	.db 0x00
      00019A 00                    3526 	.db 0x00
      00019B 00                    3527 	.db 0x00
      00019C 00                    3528 	.db 0x00
      00019D 00                    3529 	.db 0x00
      00019E 00                    3530 	.db 0x00
      00019F 00                    3531 	.db 0x00
      0001A0 00                    3532 	.db 0x00
      0001A1 00                    3533 	.db 0x00
      0001A2 00                    3534 	.db 0x00
      0001A3 00                    3535 	.db 0x00
      0001A4 20 45 6E 74 65 72 20  3536 	.ascii " Enter m for main menu "
             6D 20 66 6F 72 20 6D
             61 69 6E 20 6D 65 6E
             75 20
      0001BB 00                    3537 	.db 0x00
      0001BC 00                    3538 	.db 0x00
      0001BD 00                    3539 	.db 0x00
      0001BE 00                    3540 	.db 0x00
      0001BF 00                    3541 	.db 0x00
      0001C0 00                    3542 	.db 0x00
      0001C1 00                    3543 	.db 0x00
      0001C2 00                    3544 	.db 0x00
      0001C3 00                    3545 	.db 0x00
      0001C4 00                    3546 	.db 0x00
      0001C5 00                    3547 	.db 0x00
      0001C6 00                    3548 	.db 0x00
      0001C7 00                    3549 	.db 0x00
      0001C8 00                    3550 	.db 0x00
      0001C9 00                    3551 	.db 0x00
      0001CA 00                    3552 	.db 0x00
      0001CB 00                    3553 	.db 0x00
      0001CC 00                    3554 	.db 0x00
      0001CD 00                    3555 	.db 0x00
      0001CE 00                    3556 	.db 0x00
      0001CF 00                    3557 	.db 0x00
      0001D0 00                    3558 	.db 0x00
      0001D1 00                    3559 	.db 0x00
      0001D2 00                    3560 	.db 0x00
      0001D3 00                    3561 	.db 0x00
      0001D4 00                    3562 	.db 0x00
      0001D5 00                    3563 	.db 0x00
      0001D6 00                    3564 	.db 0x00
      0001D7 00                    3565 	.db 0x00
      0001D8 00                    3566 	.db 0x00
      0001D9 00                    3567 	.db 0x00
      0001DA 00                    3568 	.db 0x00
      0001DB 00                    3569 	.db 0x00
      0001DC 00                    3570 	.db 0x00
      0001DD 00                    3571 	.db 0x00
      0001DE 00                    3572 	.db 0x00
      0001DF 00                    3573 	.db 0x00
      0001E0 00                    3574 	.db 0x00
      0001E1 00                    3575 	.db 0x00
      0001E2 00                    3576 	.db 0x00
      0001E3 00                    3577 	.db 0x00
      0001E4 00                    3578 	.db 0x00
      0001E5 00                    3579 	.db 0x00
      0001E6 00                    3580 	.db 0x00
      0001E7 00                    3581 	.db 0x00
      0001E8 00                    3582 	.db 0x00
      0001E9 00                    3583 	.db 0x00
      0001EA 00                    3584 	.db 0x00
      0001EB 00                    3585 	.db 0x00
      0001EC 00                    3586 	.db 0x00
      0001ED 00                    3587 	.db 0x00
      0001EE 00                    3588 	.db 0x00
      0001EF 00                    3589 	.db 0x00
      0001F0 00                    3590 	.db 0x00
      0001F1 00                    3591 	.db 0x00
      0001F2 00                    3592 	.db 0x00
      0001F3 00                    3593 	.db 0x00
      0001F4                       3594 _lookUpTable:
      0001F4 00                    3595 	.db #0x00	; 0
      0001F5 01                    3596 	.db #0x01	; 1
      0001F6 02                    3597 	.db #0x02	; 2
      0001F7 03                    3598 	.db #0x03	; 3
      0001F8 04                    3599 	.db #0x04	; 4
      0001F9 05                    3600 	.db #0x05	; 5
      0001FA 06                    3601 	.db #0x06	; 6
      0001FB 07                    3602 	.db #0x07	; 7
      0001FC 08                    3603 	.db #0x08	; 8
      0001FD 09                    3604 	.db #0x09	; 9
      0001FE 0A                    3605 	.db #0x0a	; 10
      0001FF 0B                    3606 	.db #0x0b	; 11
      000200 0C                    3607 	.db #0x0c	; 12
      000201 0D                    3608 	.db #0x0d	; 13
      000202 0E                    3609 	.db #0x0e	; 14
      000203 0F                    3610 	.db #0x0f	; 15
      000204 40                    3611 	.db #0x40	; 64
      000205 41                    3612 	.db #0x41	; 65	'A'
      000206 42                    3613 	.db #0x42	; 66	'B'
      000207 43                    3614 	.db #0x43	; 67	'C'
      000208 44                    3615 	.db #0x44	; 68	'D'
      000209 45                    3616 	.db #0x45	; 69	'E'
      00020A 46                    3617 	.db #0x46	; 70	'F'
      00020B 47                    3618 	.db #0x47	; 71	'G'
      00020C 48                    3619 	.db #0x48	; 72	'H'
      00020D 49                    3620 	.db #0x49	; 73	'I'
      00020E 4A                    3621 	.db #0x4a	; 74	'J'
      00020F 4B                    3622 	.db #0x4b	; 75	'K'
      000210 4C                    3623 	.db #0x4c	; 76	'L'
      000211 4D                    3624 	.db #0x4d	; 77	'M'
      000212 4E                    3625 	.db #0x4e	; 78	'N'
      000213 4F                    3626 	.db #0x4f	; 79	'O'
      000214 10                    3627 	.db #0x10	; 16
      000215 11                    3628 	.db #0x11	; 17
      000216 12                    3629 	.db #0x12	; 18
      000217 13                    3630 	.db #0x13	; 19
      000218 14                    3631 	.db #0x14	; 20
      000219 15                    3632 	.db #0x15	; 21
      00021A 16                    3633 	.db #0x16	; 22
      00021B 17                    3634 	.db #0x17	; 23
      00021C 18                    3635 	.db #0x18	; 24
      00021D 19                    3636 	.db #0x19	; 25
      00021E 1A                    3637 	.db #0x1a	; 26
      00021F 1B                    3638 	.db #0x1b	; 27
      000220 1C                    3639 	.db #0x1c	; 28
      000221 1D                    3640 	.db #0x1d	; 29
      000222 1E                    3641 	.db #0x1e	; 30
      000223 1F                    3642 	.db #0x1f	; 31
      000224 50                    3643 	.db #0x50	; 80	'P'
      000225 51                    3644 	.db #0x51	; 81	'Q'
      000226 52                    3645 	.db #0x52	; 82	'R'
      000227 53                    3646 	.db #0x53	; 83	'S'
      000228 54                    3647 	.db #0x54	; 84	'T'
      000229 55                    3648 	.db #0x55	; 85	'U'
      00022A 56                    3649 	.db #0x56	; 86	'V'
      00022B 57                    3650 	.db #0x57	; 87	'W'
      00022C 58                    3651 	.db #0x58	; 88	'X'
      00022D 59                    3652 	.db #0x59	; 89	'Y'
      00022E 5A                    3653 	.db #0x5a	; 90	'Z'
      00022F 5B                    3654 	.db #0x5b	; 91
      000230 5C                    3655 	.db #0x5c	; 92
      000231 5D                    3656 	.db #0x5d	; 93
      000232 5E                    3657 	.db #0x5e	; 94
      000233 5F                    3658 	.db #0x5f	; 95
                                   3659 	.area CONST   (CODE)
      000234                       3660 ___str_0:
      000234 0A                    3661 	.db 0x0a
      000235 0D                    3662 	.db 0x0d
      000236 45 6E 74 65 72 20 76  3663 	.ascii "Enter value for Row 1"
             61 6C 75 65 20 66 6F
             72 20 52 6F 77 20 31
      00024B 0A                    3664 	.db 0x0a
      00024C 0D                    3665 	.db 0x0d
      00024D 00                    3666 	.db 0x00
                                   3667 	.area CSEG    (CODE)
                                   3668 	.area CONST   (CODE)
      00024E                       3669 ___str_1:
      00024E 0A                    3670 	.db 0x0a
      00024F 0D                    3671 	.db 0x0d
      000250 45 6E 74 65 72 20 76  3672 	.ascii "Enter value for Row 2"
             61 6C 75 65 20 66 6F
             72 20 52 6F 77 20 32
      000265 0A                    3673 	.db 0x0a
      000266 0D                    3674 	.db 0x0d
      000267 00                    3675 	.db 0x00
                                   3676 	.area CSEG    (CODE)
                                   3677 	.area CONST   (CODE)
      000268                       3678 ___str_2:
      000268 0A                    3679 	.db 0x0a
      000269 0D                    3680 	.db 0x0d
      00026A 45 6E 74 65 72 20 76  3681 	.ascii "Enter value for Row 3"
             61 6C 75 65 20 66 6F
             72 20 52 6F 77 20 33
      00027F 0A                    3682 	.db 0x0a
      000280 0D                    3683 	.db 0x0d
      000281 00                    3684 	.db 0x00
                                   3685 	.area CSEG    (CODE)
                                   3686 	.area CONST   (CODE)
      000282                       3687 ___str_3:
      000282 0A                    3688 	.db 0x0a
      000283 0D                    3689 	.db 0x0d
      000284 45 6E 74 65 72 20 76  3690 	.ascii "Enter value for Row 4"
             61 6C 75 65 20 66 6F
             72 20 52 6F 77 20 34
      000299 0A                    3691 	.db 0x0a
      00029A 0D                    3692 	.db 0x0d
      00029B 00                    3693 	.db 0x00
                                   3694 	.area CSEG    (CODE)
                                   3695 	.area CONST   (CODE)
      00029C                       3696 ___str_4:
      00029C 0A                    3697 	.db 0x0a
      00029D 0D                    3698 	.db 0x0d
      00029E 45 6E 74 65 72 20 76  3699 	.ascii "Enter value for Row 5"
             61 6C 75 65 20 66 6F
             72 20 52 6F 77 20 35
      0002B3 0A                    3700 	.db 0x0a
      0002B4 0D                    3701 	.db 0x0d
      0002B5 00                    3702 	.db 0x00
                                   3703 	.area CSEG    (CODE)
                                   3704 	.area CONST   (CODE)
      0002B6                       3705 ___str_5:
      0002B6 0A                    3706 	.db 0x0a
      0002B7 0D                    3707 	.db 0x0d
      0002B8 45 6E 74 65 72 20 76  3708 	.ascii "Enter value for Row 6"
             61 6C 75 65 20 66 6F
             72 20 52 6F 77 20 36
      0002CD 0A                    3709 	.db 0x0a
      0002CE 0D                    3710 	.db 0x0d
      0002CF 00                    3711 	.db 0x00
                                   3712 	.area CSEG    (CODE)
                                   3713 	.area CONST   (CODE)
      0002D0                       3714 ___str_6:
      0002D0 0A                    3715 	.db 0x0a
      0002D1 0D                    3716 	.db 0x0d
      0002D2 45 6E 74 65 72 20 76  3717 	.ascii "Enter value for Row 7"
             61 6C 75 65 20 66 6F
             72 20 52 6F 77 20 37
      0002E7 0A                    3718 	.db 0x0a
      0002E8 0D                    3719 	.db 0x0d
      0002E9 00                    3720 	.db 0x00
                                   3721 	.area CSEG    (CODE)
                                   3722 	.area CONST   (CODE)
      0002EA                       3723 ___str_7:
      0002EA 0A                    3724 	.db 0x0a
      0002EB 0D                    3725 	.db 0x0d
      0002EC 45 6E 74 65 72 20 76  3726 	.ascii "Enter value for Row 8"
             61 6C 75 65 20 66 6F
             72 20 52 6F 77 20 38
      000301 0A                    3727 	.db 0x0a
      000302 0D                    3728 	.db 0x0d
      000303 00                    3729 	.db 0x00
                                   3730 	.area CSEG    (CODE)
                                   3731 	.area CONST   (CODE)
      000304                       3732 ___str_8:
      000304 25 64                 3733 	.ascii "%d"
      000306 0A                    3734 	.db 0x0a
      000307 0D                    3735 	.db 0x0d
      000308 00                    3736 	.db 0x00
                                   3737 	.area CSEG    (CODE)
                                   3738 	.area CONST   (CODE)
      000309                       3739 ___str_9:
      000309 0A                    3740 	.db 0x0a
      00030A 0D                    3741 	.db 0x0d
      00030B 50 6C 65 61 73 65 20  3742 	.ascii "Please Input a maximum of 48 characters"
             49 6E 70 75 74 20 61
             20 6D 61 78 69 6D 75
             6D 20 6F 66 20 34 38
             20 63 68 61 72 61 63
             74 65 72 73
      000332 0A                    3743 	.db 0x0a
      000333 0D                    3744 	.db 0x0d
      000334 00                    3745 	.db 0x00
                                   3746 	.area CSEG    (CODE)
                                   3747 	.area CONST   (CODE)
      000335                       3748 ___str_10:
      000335 0A                    3749 	.db 0x0a
      000336 0D                    3750 	.db 0x0d
      000337 44 44 52 41 4D 20 43  3751 	.ascii "DDRAM Contents"
             6F 6E 74 65 6E 74 73
      000345 0A                    3752 	.db 0x0a
      000346 0D                    3753 	.db 0x0d
      000347 00                    3754 	.db 0x00
                                   3755 	.area CSEG    (CODE)
                                   3756 	.area CONST   (CODE)
      000348                       3757 ___str_11:
      000348 25 32 78 3A 20        3758 	.ascii "%2x: "
      00034D 00                    3759 	.db 0x00
                                   3760 	.area CSEG    (CODE)
                                   3761 	.area CONST   (CODE)
      00034E                       3762 ___str_12:
      00034E 25 32 78 20           3763 	.ascii "%2x "
      000352 00                    3764 	.db 0x00
                                   3765 	.area CSEG    (CODE)
                                   3766 	.area CONST   (CODE)
      000353                       3767 ___str_13:
      000353 0A                    3768 	.db 0x0a
      000354 0D                    3769 	.db 0x0d
      000355 00                    3770 	.db 0x00
                                   3771 	.area CSEG    (CODE)
                                   3772 	.area CONST   (CODE)
      000356                       3773 ___str_14:
      000356 0A                    3774 	.db 0x0a
      000357 0D                    3775 	.db 0x0d
      000358 43 47 52 41 4D 20 43  3776 	.ascii "CGRAM Contents"
             6F 6E 74 65 6E 74 73
      000366 0A                    3777 	.db 0x0a
      000367 0D                    3778 	.db 0x0d
      000368 00                    3779 	.db 0x00
                                   3780 	.area CSEG    (CODE)
                                   3781 	.area CONST   (CODE)
      000369                       3782 ___str_15:
      000369 0A                    3783 	.db 0x0a
      00036A 0D                    3784 	.db 0x0d
      00036B 45 6E 74 65 72 20 77  3785 	.ascii "Enter w to go up, s to go down, a to go left and d to go rig"
             20 74 6F 20 67 6F 20
             75 70 2C 20 73 20 74
             6F 20 67 6F 20 64 6F
             77 6E 2C 20 61 20 74
             6F 20 67 6F 20 6C 65
             66 74 20 61 6E 64 20
             64 20 74 6F 20 67 6F
             20 72 69 67
      0003A7 68 74 20 61 6E 64 20  3786 	.ascii "ht and q to quit"
             71 20 74 6F 20 71 75
             69 74
      0003B7 0A                    3787 	.db 0x0a
      0003B8 0D                    3788 	.db 0x0d
      0003B9 00                    3789 	.db 0x00
                                   3790 	.area CSEG    (CODE)
                                   3791 	.area CONST   (CODE)
      0003BA                       3792 ___str_16:
      0003BA 25 73                 3793 	.ascii "%s"
      0003BC 00                    3794 	.db 0x00
                                   3795 	.area CSEG    (CODE)
                                   3796 	.area XINIT   (CODE)
                                   3797 	.area CABS    (ABS,CODE)
