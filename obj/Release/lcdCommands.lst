                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module lcdCommands
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _lookUpTable
                                     12 	.globl _messages
                                     13 	.globl _uiLines
                                     14 	.globl _memset
                                     15 	.globl _printf_tiny
                                     16 	.globl _putchar
                                     17 	.globl _getchar
                                     18 	.globl _printf
                                     19 	.globl _P5_7
                                     20 	.globl _P5_6
                                     21 	.globl _P5_5
                                     22 	.globl _P5_4
                                     23 	.globl _P5_3
                                     24 	.globl _P5_2
                                     25 	.globl _P5_1
                                     26 	.globl _P5_0
                                     27 	.globl _P4_7
                                     28 	.globl _P4_6
                                     29 	.globl _P4_5
                                     30 	.globl _P4_4
                                     31 	.globl _P4_3
                                     32 	.globl _P4_2
                                     33 	.globl _P4_1
                                     34 	.globl _P4_0
                                     35 	.globl _PX0L
                                     36 	.globl _PT0L
                                     37 	.globl _PX1L
                                     38 	.globl _PT1L
                                     39 	.globl _PSL
                                     40 	.globl _PT2L
                                     41 	.globl _PPCL
                                     42 	.globl _EC
                                     43 	.globl _CCF0
                                     44 	.globl _CCF1
                                     45 	.globl _CCF2
                                     46 	.globl _CCF3
                                     47 	.globl _CCF4
                                     48 	.globl _CR
                                     49 	.globl _CF
                                     50 	.globl _TF2
                                     51 	.globl _EXF2
                                     52 	.globl _RCLK
                                     53 	.globl _TCLK
                                     54 	.globl _EXEN2
                                     55 	.globl _TR2
                                     56 	.globl _C_T2
                                     57 	.globl _CP_RL2
                                     58 	.globl _T2CON_7
                                     59 	.globl _T2CON_6
                                     60 	.globl _T2CON_5
                                     61 	.globl _T2CON_4
                                     62 	.globl _T2CON_3
                                     63 	.globl _T2CON_2
                                     64 	.globl _T2CON_1
                                     65 	.globl _T2CON_0
                                     66 	.globl _PT2
                                     67 	.globl _ET2
                                     68 	.globl _CY
                                     69 	.globl _AC
                                     70 	.globl _F0
                                     71 	.globl _RS1
                                     72 	.globl _RS0
                                     73 	.globl _OV
                                     74 	.globl _F1
                                     75 	.globl _P
                                     76 	.globl _PS
                                     77 	.globl _PT1
                                     78 	.globl _PX1
                                     79 	.globl _PT0
                                     80 	.globl _PX0
                                     81 	.globl _RD
                                     82 	.globl _WR
                                     83 	.globl _T1
                                     84 	.globl _T0
                                     85 	.globl _INT1
                                     86 	.globl _INT0
                                     87 	.globl _TXD
                                     88 	.globl _RXD
                                     89 	.globl _P3_7
                                     90 	.globl _P3_6
                                     91 	.globl _P3_5
                                     92 	.globl _P3_4
                                     93 	.globl _P3_3
                                     94 	.globl _P3_2
                                     95 	.globl _P3_1
                                     96 	.globl _P3_0
                                     97 	.globl _EA
                                     98 	.globl _ES
                                     99 	.globl _ET1
                                    100 	.globl _EX1
                                    101 	.globl _ET0
                                    102 	.globl _EX0
                                    103 	.globl _P2_7
                                    104 	.globl _P2_6
                                    105 	.globl _P2_5
                                    106 	.globl _P2_4
                                    107 	.globl _P2_3
                                    108 	.globl _P2_2
                                    109 	.globl _P2_1
                                    110 	.globl _P2_0
                                    111 	.globl _SM0
                                    112 	.globl _SM1
                                    113 	.globl _SM2
                                    114 	.globl _REN
                                    115 	.globl _TB8
                                    116 	.globl _RB8
                                    117 	.globl _TI
                                    118 	.globl _RI
                                    119 	.globl _P1_7
                                    120 	.globl _P1_6
                                    121 	.globl _P1_5
                                    122 	.globl _P1_4
                                    123 	.globl _P1_3
                                    124 	.globl _P1_2
                                    125 	.globl _P1_1
                                    126 	.globl _P1_0
                                    127 	.globl _TF1
                                    128 	.globl _TR1
                                    129 	.globl _TF0
                                    130 	.globl _TR0
                                    131 	.globl _IE1
                                    132 	.globl _IT1
                                    133 	.globl _IE0
                                    134 	.globl _IT0
                                    135 	.globl _P0_7
                                    136 	.globl _P0_6
                                    137 	.globl _P0_5
                                    138 	.globl _P0_4
                                    139 	.globl _P0_3
                                    140 	.globl _P0_2
                                    141 	.globl _P0_1
                                    142 	.globl _P0_0
                                    143 	.globl _EECON
                                    144 	.globl _KBF
                                    145 	.globl _KBE
                                    146 	.globl _KBLS
                                    147 	.globl _BRL
                                    148 	.globl _BDRCON
                                    149 	.globl _T2MOD
                                    150 	.globl _SPDAT
                                    151 	.globl _SPSTA
                                    152 	.globl _SPCON
                                    153 	.globl _SADEN
                                    154 	.globl _SADDR
                                    155 	.globl _WDTPRG
                                    156 	.globl _WDTRST
                                    157 	.globl _P5
                                    158 	.globl _P4
                                    159 	.globl _IPH1
                                    160 	.globl _IPL1
                                    161 	.globl _IPH0
                                    162 	.globl _IPL0
                                    163 	.globl _IEN1
                                    164 	.globl _IEN0
                                    165 	.globl _CMOD
                                    166 	.globl _CL
                                    167 	.globl _CH
                                    168 	.globl _CCON
                                    169 	.globl _CCAPM4
                                    170 	.globl _CCAPM3
                                    171 	.globl _CCAPM2
                                    172 	.globl _CCAPM1
                                    173 	.globl _CCAPM0
                                    174 	.globl _CCAP4L
                                    175 	.globl _CCAP3L
                                    176 	.globl _CCAP2L
                                    177 	.globl _CCAP1L
                                    178 	.globl _CCAP0L
                                    179 	.globl _CCAP4H
                                    180 	.globl _CCAP3H
                                    181 	.globl _CCAP2H
                                    182 	.globl _CCAP1H
                                    183 	.globl _CCAP0H
                                    184 	.globl _CKCON1
                                    185 	.globl _CKCON0
                                    186 	.globl _CKRL
                                    187 	.globl _AUXR1
                                    188 	.globl _AUXR
                                    189 	.globl _TH2
                                    190 	.globl _TL2
                                    191 	.globl _RCAP2H
                                    192 	.globl _RCAP2L
                                    193 	.globl _T2CON
                                    194 	.globl _B
                                    195 	.globl _ACC
                                    196 	.globl _PSW
                                    197 	.globl _IP
                                    198 	.globl _P3
                                    199 	.globl _IE
                                    200 	.globl _P2
                                    201 	.globl _SBUF
                                    202 	.globl _SCON
                                    203 	.globl _P1
                                    204 	.globl _TH1
                                    205 	.globl _TH0
                                    206 	.globl _TL1
                                    207 	.globl _TL0
                                    208 	.globl _TMOD
                                    209 	.globl _TCON
                                    210 	.globl _PCON
                                    211 	.globl _DPH
                                    212 	.globl _DPL
                                    213 	.globl _SP
                                    214 	.globl _P0
                                    215 	.globl _goToXY_PARM_2
                                    216 	.globl _readCharacter
                                    217 	.globl _writeCharacter
                                    218 	.globl _busyPoll
                                    219 	.globl _lcdGeneral
                                    220 	.globl _delay
                                    221 	.globl _timerInit
                                    222 	.globl _busyWait
                                    223 	.globl _lcdInit
                                    224 	.globl _lcdPutCh
                                    225 	.globl _lcdClear
                                    226 	.globl _goToAddr
                                    227 	.globl _goToXY
                                    228 	.globl _customCharacter
                                    229 	.globl _readLCD
                                    230 	.globl _putsLCD
                                    231 	.globl _gets
                                    232 	.globl _ramDump
                                    233 	.globl _gamePacman
                                    234 	.globl _makePacmanRight
                                    235 	.globl _makePacmanLeft
                                    236 	.globl _printBinary
                                    237 	.globl _atoh
                                    238 	.globl _printMenu
                                    239 ;--------------------------------------------------------
                                    240 ; special function registers
                                    241 ;--------------------------------------------------------
                                    242 	.area RSEG    (ABS,DATA)
      000000                        243 	.org 0x0000
                           000080   244 _P0	=	0x0080
                           000081   245 _SP	=	0x0081
                           000082   246 _DPL	=	0x0082
                           000083   247 _DPH	=	0x0083
                           000087   248 _PCON	=	0x0087
                           000088   249 _TCON	=	0x0088
                           000089   250 _TMOD	=	0x0089
                           00008A   251 _TL0	=	0x008a
                           00008B   252 _TL1	=	0x008b
                           00008C   253 _TH0	=	0x008c
                           00008D   254 _TH1	=	0x008d
                           000090   255 _P1	=	0x0090
                           000098   256 _SCON	=	0x0098
                           000099   257 _SBUF	=	0x0099
                           0000A0   258 _P2	=	0x00a0
                           0000A8   259 _IE	=	0x00a8
                           0000B0   260 _P3	=	0x00b0
                           0000B8   261 _IP	=	0x00b8
                           0000D0   262 _PSW	=	0x00d0
                           0000E0   263 _ACC	=	0x00e0
                           0000F0   264 _B	=	0x00f0
                           0000C8   265 _T2CON	=	0x00c8
                           0000CA   266 _RCAP2L	=	0x00ca
                           0000CB   267 _RCAP2H	=	0x00cb
                           0000CC   268 _TL2	=	0x00cc
                           0000CD   269 _TH2	=	0x00cd
                           00008E   270 _AUXR	=	0x008e
                           0000A2   271 _AUXR1	=	0x00a2
                           000097   272 _CKRL	=	0x0097
                           00008F   273 _CKCON0	=	0x008f
                           0000AF   274 _CKCON1	=	0x00af
                           0000FA   275 _CCAP0H	=	0x00fa
                           0000FB   276 _CCAP1H	=	0x00fb
                           0000FC   277 _CCAP2H	=	0x00fc
                           0000FD   278 _CCAP3H	=	0x00fd
                           0000FE   279 _CCAP4H	=	0x00fe
                           0000EA   280 _CCAP0L	=	0x00ea
                           0000EB   281 _CCAP1L	=	0x00eb
                           0000EC   282 _CCAP2L	=	0x00ec
                           0000ED   283 _CCAP3L	=	0x00ed
                           0000EE   284 _CCAP4L	=	0x00ee
                           0000DA   285 _CCAPM0	=	0x00da
                           0000DB   286 _CCAPM1	=	0x00db
                           0000DC   287 _CCAPM2	=	0x00dc
                           0000DD   288 _CCAPM3	=	0x00dd
                           0000DE   289 _CCAPM4	=	0x00de
                           0000D8   290 _CCON	=	0x00d8
                           0000F9   291 _CH	=	0x00f9
                           0000E9   292 _CL	=	0x00e9
                           0000D9   293 _CMOD	=	0x00d9
                           0000A8   294 _IEN0	=	0x00a8
                           0000B1   295 _IEN1	=	0x00b1
                           0000B8   296 _IPL0	=	0x00b8
                           0000B7   297 _IPH0	=	0x00b7
                           0000B2   298 _IPL1	=	0x00b2
                           0000B3   299 _IPH1	=	0x00b3
                           0000C0   300 _P4	=	0x00c0
                           0000E8   301 _P5	=	0x00e8
                           0000A6   302 _WDTRST	=	0x00a6
                           0000A7   303 _WDTPRG	=	0x00a7
                           0000A9   304 _SADDR	=	0x00a9
                           0000B9   305 _SADEN	=	0x00b9
                           0000C3   306 _SPCON	=	0x00c3
                           0000C4   307 _SPSTA	=	0x00c4
                           0000C5   308 _SPDAT	=	0x00c5
                           0000C9   309 _T2MOD	=	0x00c9
                           00009B   310 _BDRCON	=	0x009b
                           00009A   311 _BRL	=	0x009a
                           00009C   312 _KBLS	=	0x009c
                           00009D   313 _KBE	=	0x009d
                           00009E   314 _KBF	=	0x009e
                           0000D2   315 _EECON	=	0x00d2
                                    316 ;--------------------------------------------------------
                                    317 ; special function bits
                                    318 ;--------------------------------------------------------
                                    319 	.area RSEG    (ABS,DATA)
      000000                        320 	.org 0x0000
                           000080   321 _P0_0	=	0x0080
                           000081   322 _P0_1	=	0x0081
                           000082   323 _P0_2	=	0x0082
                           000083   324 _P0_3	=	0x0083
                           000084   325 _P0_4	=	0x0084
                           000085   326 _P0_5	=	0x0085
                           000086   327 _P0_6	=	0x0086
                           000087   328 _P0_7	=	0x0087
                           000088   329 _IT0	=	0x0088
                           000089   330 _IE0	=	0x0089
                           00008A   331 _IT1	=	0x008a
                           00008B   332 _IE1	=	0x008b
                           00008C   333 _TR0	=	0x008c
                           00008D   334 _TF0	=	0x008d
                           00008E   335 _TR1	=	0x008e
                           00008F   336 _TF1	=	0x008f
                           000090   337 _P1_0	=	0x0090
                           000091   338 _P1_1	=	0x0091
                           000092   339 _P1_2	=	0x0092
                           000093   340 _P1_3	=	0x0093
                           000094   341 _P1_4	=	0x0094
                           000095   342 _P1_5	=	0x0095
                           000096   343 _P1_6	=	0x0096
                           000097   344 _P1_7	=	0x0097
                           000098   345 _RI	=	0x0098
                           000099   346 _TI	=	0x0099
                           00009A   347 _RB8	=	0x009a
                           00009B   348 _TB8	=	0x009b
                           00009C   349 _REN	=	0x009c
                           00009D   350 _SM2	=	0x009d
                           00009E   351 _SM1	=	0x009e
                           00009F   352 _SM0	=	0x009f
                           0000A0   353 _P2_0	=	0x00a0
                           0000A1   354 _P2_1	=	0x00a1
                           0000A2   355 _P2_2	=	0x00a2
                           0000A3   356 _P2_3	=	0x00a3
                           0000A4   357 _P2_4	=	0x00a4
                           0000A5   358 _P2_5	=	0x00a5
                           0000A6   359 _P2_6	=	0x00a6
                           0000A7   360 _P2_7	=	0x00a7
                           0000A8   361 _EX0	=	0x00a8
                           0000A9   362 _ET0	=	0x00a9
                           0000AA   363 _EX1	=	0x00aa
                           0000AB   364 _ET1	=	0x00ab
                           0000AC   365 _ES	=	0x00ac
                           0000AF   366 _EA	=	0x00af
                           0000B0   367 _P3_0	=	0x00b0
                           0000B1   368 _P3_1	=	0x00b1
                           0000B2   369 _P3_2	=	0x00b2
                           0000B3   370 _P3_3	=	0x00b3
                           0000B4   371 _P3_4	=	0x00b4
                           0000B5   372 _P3_5	=	0x00b5
                           0000B6   373 _P3_6	=	0x00b6
                           0000B7   374 _P3_7	=	0x00b7
                           0000B0   375 _RXD	=	0x00b0
                           0000B1   376 _TXD	=	0x00b1
                           0000B2   377 _INT0	=	0x00b2
                           0000B3   378 _INT1	=	0x00b3
                           0000B4   379 _T0	=	0x00b4
                           0000B5   380 _T1	=	0x00b5
                           0000B6   381 _WR	=	0x00b6
                           0000B7   382 _RD	=	0x00b7
                           0000B8   383 _PX0	=	0x00b8
                           0000B9   384 _PT0	=	0x00b9
                           0000BA   385 _PX1	=	0x00ba
                           0000BB   386 _PT1	=	0x00bb
                           0000BC   387 _PS	=	0x00bc
                           0000D0   388 _P	=	0x00d0
                           0000D1   389 _F1	=	0x00d1
                           0000D2   390 _OV	=	0x00d2
                           0000D3   391 _RS0	=	0x00d3
                           0000D4   392 _RS1	=	0x00d4
                           0000D5   393 _F0	=	0x00d5
                           0000D6   394 _AC	=	0x00d6
                           0000D7   395 _CY	=	0x00d7
                           0000AD   396 _ET2	=	0x00ad
                           0000BD   397 _PT2	=	0x00bd
                           0000C8   398 _T2CON_0	=	0x00c8
                           0000C9   399 _T2CON_1	=	0x00c9
                           0000CA   400 _T2CON_2	=	0x00ca
                           0000CB   401 _T2CON_3	=	0x00cb
                           0000CC   402 _T2CON_4	=	0x00cc
                           0000CD   403 _T2CON_5	=	0x00cd
                           0000CE   404 _T2CON_6	=	0x00ce
                           0000CF   405 _T2CON_7	=	0x00cf
                           0000C8   406 _CP_RL2	=	0x00c8
                           0000C9   407 _C_T2	=	0x00c9
                           0000CA   408 _TR2	=	0x00ca
                           0000CB   409 _EXEN2	=	0x00cb
                           0000CC   410 _TCLK	=	0x00cc
                           0000CD   411 _RCLK	=	0x00cd
                           0000CE   412 _EXF2	=	0x00ce
                           0000CF   413 _TF2	=	0x00cf
                           0000DF   414 _CF	=	0x00df
                           0000DE   415 _CR	=	0x00de
                           0000DC   416 _CCF4	=	0x00dc
                           0000DB   417 _CCF3	=	0x00db
                           0000DA   418 _CCF2	=	0x00da
                           0000D9   419 _CCF1	=	0x00d9
                           0000D8   420 _CCF0	=	0x00d8
                           0000AE   421 _EC	=	0x00ae
                           0000BE   422 _PPCL	=	0x00be
                           0000BD   423 _PT2L	=	0x00bd
                           0000BC   424 _PSL	=	0x00bc
                           0000BB   425 _PT1L	=	0x00bb
                           0000BA   426 _PX1L	=	0x00ba
                           0000B9   427 _PT0L	=	0x00b9
                           0000B8   428 _PX0L	=	0x00b8
                           0000C0   429 _P4_0	=	0x00c0
                           0000C1   430 _P4_1	=	0x00c1
                           0000C2   431 _P4_2	=	0x00c2
                           0000C3   432 _P4_3	=	0x00c3
                           0000C4   433 _P4_4	=	0x00c4
                           0000C5   434 _P4_5	=	0x00c5
                           0000C6   435 _P4_6	=	0x00c6
                           0000C7   436 _P4_7	=	0x00c7
                           0000E8   437 _P5_0	=	0x00e8
                           0000E9   438 _P5_1	=	0x00e9
                           0000EA   439 _P5_2	=	0x00ea
                           0000EB   440 _P5_3	=	0x00eb
                           0000EC   441 _P5_4	=	0x00ec
                           0000ED   442 _P5_5	=	0x00ed
                           0000EE   443 _P5_6	=	0x00ee
                           0000EF   444 _P5_7	=	0x00ef
                                    445 ;--------------------------------------------------------
                                    446 ; overlayable register banks
                                    447 ;--------------------------------------------------------
                                    448 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        449 	.ds 8
                                    450 ;--------------------------------------------------------
                                    451 ; internal ram data
                                    452 ;--------------------------------------------------------
                                    453 	.area DSEG    (DATA)
      000000                        454 _putsLCD_sloc0_1_0:
      000000                        455 	.ds 2
      000002                        456 _putsLCD_sloc1_1_0:
      000002                        457 	.ds 3
                                    458 ;--------------------------------------------------------
                                    459 ; overlayable items in internal ram 
                                    460 ;--------------------------------------------------------
                                    461 ;--------------------------------------------------------
                                    462 ; indirectly addressable internal ram data
                                    463 ;--------------------------------------------------------
                                    464 	.area ISEG    (DATA)
                                    465 ;--------------------------------------------------------
                                    466 ; absolute internal ram data
                                    467 ;--------------------------------------------------------
                                    468 	.area IABS    (ABS,DATA)
                                    469 	.area IABS    (ABS,DATA)
                                    470 ;--------------------------------------------------------
                                    471 ; bit data
                                    472 ;--------------------------------------------------------
                                    473 	.area BSEG    (BIT)
                                    474 ;--------------------------------------------------------
                                    475 ; paged external ram data
                                    476 ;--------------------------------------------------------
                                    477 	.area PSEG    (PAG,XDATA)
                                    478 ;--------------------------------------------------------
                                    479 ; external ram data
                                    480 ;--------------------------------------------------------
                                    481 	.area XSEG    (XDATA)
                           00F000   482 _lcdGeneral	=	0xf000
                           00F200   483 _busyPoll	=	0xf200
                           00F100   484 _writeCharacter	=	0xf100
                           00F300   485 _readCharacter	=	0xf300
      000000                        486 _lcdPutCh_x_65536_76:
      000000                        487 	.ds 1
      000001                        488 _goToAddr_x_65536_79:
      000001                        489 	.ds 1
      000002                        490 _goToXY_PARM_2:
      000002                        491 	.ds 1
      000003                        492 _goToXY_x_65536_81:
      000003                        493 	.ds 1
      000004                        494 _customCharacter_x_65536_83:
      000004                        495 	.ds 8
                           00F000   496 _customCharacter_temp8_196609_86	=	0xf000
      00000C                        497 _putsLCD_y_65536_90:
      00000C                        498 	.ds 3
      00000F                        499 _putsLCD_i_65536_91:
      00000F                        500 	.ds 2
      000011                        501 _gets_s_65536_94:
      000011                        502 	.ds 3
      000014                        503 _gets_count_65536_95:
      000014                        504 	.ds 2
      000016                        505 _ramDump_i_65537_101:
      000016                        506 	.ds 1
      000017                        507 _gamePacman_i_65538_115:
      000017                        508 	.ds 2
      000019                        509 _gamePacman_count_65538_115:
      000019                        510 	.ds 1
      00001A                        511 _printBinary_x_65536_128:
      00001A                        512 	.ds 2
      00001C                        513 _atoh_ap_65536_131:
      00001C                        514 	.ds 3
      00001F                        515 _atoh_p_65536_132:
      00001F                        516 	.ds 3
      000022                        517 _atoh_lcase_65536_132:
      000022                        518 	.ds 2
      000024                        519 _atoh_n_65537_133:
      000024                        520 	.ds 1
                                    521 ;--------------------------------------------------------
                                    522 ; absolute external ram data
                                    523 ;--------------------------------------------------------
                                    524 	.area XABS    (ABS,XDATA)
                                    525 ;--------------------------------------------------------
                                    526 ; external initialized ram data
                                    527 ;--------------------------------------------------------
                                    528 	.area XISEG   (XDATA)
                                    529 	.area HOME    (CODE)
                                    530 	.area GSINIT0 (CODE)
                                    531 	.area GSINIT1 (CODE)
                                    532 	.area GSINIT2 (CODE)
                                    533 	.area GSINIT3 (CODE)
                                    534 	.area GSINIT4 (CODE)
                                    535 	.area GSINIT5 (CODE)
                                    536 	.area GSINIT  (CODE)
                                    537 	.area GSFINAL (CODE)
                                    538 	.area CSEG    (CODE)
                                    539 ;--------------------------------------------------------
                                    540 ; global & static initialisations
                                    541 ;--------------------------------------------------------
                                    542 	.area HOME    (CODE)
                                    543 	.area GSINIT  (CODE)
                                    544 	.area GSFINAL (CODE)
                                    545 	.area GSINIT  (CODE)
                                    546 ;--------------------------------------------------------
                                    547 ; Home
                                    548 ;--------------------------------------------------------
                                    549 	.area HOME    (CODE)
                                    550 	.area HOME    (CODE)
                                    551 ;--------------------------------------------------------
                                    552 ; code
                                    553 ;--------------------------------------------------------
                                    554 	.area CSEG    (CODE)
                                    555 ;------------------------------------------------------------
                                    556 ;Allocation info for local variables in function 'delay'
                                    557 ;------------------------------------------------------------
                                    558 ;i                         Allocated with name '_delay_i_65536_71'
                                    559 ;------------------------------------------------------------
                                    560 ;	lcdCommands.c:9: void delay()
                                    561 ;	-----------------------------------------
                                    562 ;	 function delay
                                    563 ;	-----------------------------------------
      000000                        564 _delay:
                           000007   565 	ar7 = 0x07
                           000006   566 	ar6 = 0x06
                           000005   567 	ar5 = 0x05
                           000004   568 	ar4 = 0x04
                           000003   569 	ar3 = 0x03
                           000002   570 	ar2 = 0x02
                           000001   571 	ar1 = 0x01
                           000000   572 	ar0 = 0x00
                                    573 ;	lcdCommands.c:12: for ( i = 0 ; i < 1000; i++);
      000000 7E E8            [12]  574 	mov	r6,#0xe8
      000002 7F 03            [12]  575 	mov	r7,#0x03
      000004                        576 00104$:
      000004 1E               [12]  577 	dec	r6
      000005 BE FF 01         [24]  578 	cjne	r6,#0xff,00113$
      000008 1F               [12]  579 	dec	r7
      000009                        580 00113$:
      000009 EE               [12]  581 	mov	a,r6
      00000A 4F               [12]  582 	orl	a,r7
      00000B 70 F7            [24]  583 	jnz	00104$
                                    584 ;	lcdCommands.c:13: }
      00000D 22               [24]  585 	ret
                                    586 ;------------------------------------------------------------
                                    587 ;Allocation info for local variables in function 'timerInit'
                                    588 ;------------------------------------------------------------
                                    589 ;	lcdCommands.c:15: void timerInit()
                                    590 ;	-----------------------------------------
                                    591 ;	 function timerInit
                                    592 ;	-----------------------------------------
      00000E                        593 _timerInit:
                                    594 ;	lcdCommands.c:17: TMOD |= 0x01;
      00000E 43 89 01         [24]  595 	orl	_TMOD,#0x01
                                    596 ;	lcdCommands.c:18: TH0 = 0x4B;
      000011 75 8C 4B         [24]  597 	mov	_TH0,#0x4b
                                    598 ;	lcdCommands.c:19: TL0 = 0xFC;
      000014 75 8A FC         [24]  599 	mov	_TL0,#0xfc
                                    600 ;	lcdCommands.c:20: TR0 = 1;           //turn ON Timer zero
                                    601 ;	assignBit
      000017 D2 8C            [12]  602 	setb	_TR0
                                    603 ;	lcdCommands.c:21: EA = 1;            //Enable Global Interrupt bit
                                    604 ;	assignBit
      000019 D2 AF            [12]  605 	setb	_EA
                                    606 ;	lcdCommands.c:22: ET0 = 1;           //Enable TImer0 Interrupt
                                    607 ;	assignBit
      00001B D2 A9            [12]  608 	setb	_ET0
                                    609 ;	lcdCommands.c:23: }
      00001D 22               [24]  610 	ret
                                    611 ;------------------------------------------------------------
                                    612 ;Allocation info for local variables in function 'busyWait'
                                    613 ;------------------------------------------------------------
                                    614 ;	lcdCommands.c:25: void busyWait()
                                    615 ;	-----------------------------------------
                                    616 ;	 function busyWait
                                    617 ;	-----------------------------------------
      00001E                        618 _busyWait:
                                    619 ;	lcdCommands.c:27: while (busyPoll & 0x80);
      00001E                        620 00101$:
      00001E 90 F2 00         [24]  621 	mov	dptr,#_busyPoll
      000021 E0               [24]  622 	movx	a,@dptr
      000022 FE               [12]  623 	mov	r6,a
      000023 A3               [24]  624 	inc	dptr
      000024 E0               [24]  625 	movx	a,@dptr
      000025 EE               [12]  626 	mov	a,r6
      000026 20 E7 F5         [24]  627 	jb	acc.7,00101$
                                    628 ;	lcdCommands.c:28: }
      000029 22               [24]  629 	ret
                                    630 ;------------------------------------------------------------
                                    631 ;Allocation info for local variables in function 'lcdInit'
                                    632 ;------------------------------------------------------------
                                    633 ;	lcdCommands.c:30: void lcdInit()
                                    634 ;	-----------------------------------------
                                    635 ;	 function lcdInit
                                    636 ;	-----------------------------------------
      00002A                        637 _lcdInit:
                                    638 ;	lcdCommands.c:32: delay();
      00002A 12r00r00         [24]  639 	lcall	_delay
                                    640 ;	lcdCommands.c:33: lcdGeneral = 0x30;
      00002D 90 F0 00         [24]  641 	mov	dptr,#_lcdGeneral
      000030 74 30            [12]  642 	mov	a,#0x30
      000032 F0               [24]  643 	movx	@dptr,a
      000033 E4               [12]  644 	clr	a
      000034 A3               [24]  645 	inc	dptr
      000035 F0               [24]  646 	movx	@dptr,a
                                    647 ;	lcdCommands.c:34: delay();
      000036 12r00r00         [24]  648 	lcall	_delay
                                    649 ;	lcdCommands.c:35: lcdGeneral = 0x30;
      000039 90 F0 00         [24]  650 	mov	dptr,#_lcdGeneral
      00003C 74 30            [12]  651 	mov	a,#0x30
      00003E F0               [24]  652 	movx	@dptr,a
      00003F E4               [12]  653 	clr	a
      000040 A3               [24]  654 	inc	dptr
      000041 F0               [24]  655 	movx	@dptr,a
                                    656 ;	lcdCommands.c:36: delay();
      000042 12r00r00         [24]  657 	lcall	_delay
                                    658 ;	lcdCommands.c:37: lcdGeneral = 0x30;
      000045 90 F0 00         [24]  659 	mov	dptr,#_lcdGeneral
      000048 74 30            [12]  660 	mov	a,#0x30
      00004A F0               [24]  661 	movx	@dptr,a
      00004B E4               [12]  662 	clr	a
      00004C A3               [24]  663 	inc	dptr
      00004D F0               [24]  664 	movx	@dptr,a
                                    665 ;	lcdCommands.c:38: busyWait();
      00004E 12r00r1E         [24]  666 	lcall	_busyWait
                                    667 ;	lcdCommands.c:39: lcdGeneral = 0x38;
      000051 90 F0 00         [24]  668 	mov	dptr,#_lcdGeneral
      000054 74 38            [12]  669 	mov	a,#0x38
      000056 F0               [24]  670 	movx	@dptr,a
      000057 E4               [12]  671 	clr	a
      000058 A3               [24]  672 	inc	dptr
      000059 F0               [24]  673 	movx	@dptr,a
                                    674 ;	lcdCommands.c:40: busyWait();
      00005A 12r00r1E         [24]  675 	lcall	_busyWait
                                    676 ;	lcdCommands.c:41: lcdGeneral = 0x08;
      00005D 90 F0 00         [24]  677 	mov	dptr,#_lcdGeneral
      000060 74 08            [12]  678 	mov	a,#0x08
      000062 F0               [24]  679 	movx	@dptr,a
      000063 E4               [12]  680 	clr	a
      000064 A3               [24]  681 	inc	dptr
      000065 F0               [24]  682 	movx	@dptr,a
                                    683 ;	lcdCommands.c:42: busyWait();
      000066 12r00r1E         [24]  684 	lcall	_busyWait
                                    685 ;	lcdCommands.c:43: lcdGeneral = 0x0C;
      000069 90 F0 00         [24]  686 	mov	dptr,#_lcdGeneral
      00006C 74 0C            [12]  687 	mov	a,#0x0c
      00006E F0               [24]  688 	movx	@dptr,a
      00006F E4               [12]  689 	clr	a
      000070 A3               [24]  690 	inc	dptr
      000071 F0               [24]  691 	movx	@dptr,a
                                    692 ;	lcdCommands.c:44: busyWait();
      000072 12r00r1E         [24]  693 	lcall	_busyWait
                                    694 ;	lcdCommands.c:45: lcdGeneral = 0x06;
      000075 90 F0 00         [24]  695 	mov	dptr,#_lcdGeneral
      000078 74 06            [12]  696 	mov	a,#0x06
      00007A F0               [24]  697 	movx	@dptr,a
      00007B E4               [12]  698 	clr	a
      00007C A3               [24]  699 	inc	dptr
      00007D F0               [24]  700 	movx	@dptr,a
                                    701 ;	lcdCommands.c:46: busyWait();
      00007E 12r00r1E         [24]  702 	lcall	_busyWait
                                    703 ;	lcdCommands.c:47: lcdGeneral = 0x01;
      000081 90 F0 00         [24]  704 	mov	dptr,#_lcdGeneral
      000084 74 01            [12]  705 	mov	a,#0x01
      000086 F0               [24]  706 	movx	@dptr,a
      000087 E4               [12]  707 	clr	a
      000088 A3               [24]  708 	inc	dptr
      000089 F0               [24]  709 	movx	@dptr,a
                                    710 ;	lcdCommands.c:48: }
      00008A 22               [24]  711 	ret
                                    712 ;------------------------------------------------------------
                                    713 ;Allocation info for local variables in function 'lcdPutCh'
                                    714 ;------------------------------------------------------------
                                    715 ;x                         Allocated with name '_lcdPutCh_x_65536_76'
                                    716 ;------------------------------------------------------------
                                    717 ;	lcdCommands.c:50: void lcdPutCh(uint8_t x)
                                    718 ;	-----------------------------------------
                                    719 ;	 function lcdPutCh
                                    720 ;	-----------------------------------------
      00008B                        721 _lcdPutCh:
      00008B E5 82            [12]  722 	mov	a,dpl
      00008D 90r00r00         [24]  723 	mov	dptr,#_lcdPutCh_x_65536_76
      000090 F0               [24]  724 	movx	@dptr,a
                                    725 ;	lcdCommands.c:52: busyWait();
      000091 12r00r1E         [24]  726 	lcall	_busyWait
                                    727 ;	lcdCommands.c:53: writeCharacter = x;
      000094 90r00r00         [24]  728 	mov	dptr,#_lcdPutCh_x_65536_76
      000097 E0               [24]  729 	movx	a,@dptr
      000098 90 F1 00         [24]  730 	mov	dptr,#_writeCharacter
      00009B F0               [24]  731 	movx	@dptr,a
      00009C E4               [12]  732 	clr	a
      00009D A3               [24]  733 	inc	dptr
      00009E F0               [24]  734 	movx	@dptr,a
                                    735 ;	lcdCommands.c:54: }
      00009F 22               [24]  736 	ret
                                    737 ;------------------------------------------------------------
                                    738 ;Allocation info for local variables in function 'lcdClear'
                                    739 ;------------------------------------------------------------
                                    740 ;	lcdCommands.c:56: void lcdClear()
                                    741 ;	-----------------------------------------
                                    742 ;	 function lcdClear
                                    743 ;	-----------------------------------------
      0000A0                        744 _lcdClear:
                                    745 ;	lcdCommands.c:58: busyWait();
      0000A0 12r00r1E         [24]  746 	lcall	_busyWait
                                    747 ;	lcdCommands.c:59: lcdGeneral = 0x01;
      0000A3 90 F0 00         [24]  748 	mov	dptr,#_lcdGeneral
      0000A6 74 01            [12]  749 	mov	a,#0x01
      0000A8 F0               [24]  750 	movx	@dptr,a
      0000A9 E4               [12]  751 	clr	a
      0000AA A3               [24]  752 	inc	dptr
      0000AB F0               [24]  753 	movx	@dptr,a
                                    754 ;	lcdCommands.c:60: }
      0000AC 22               [24]  755 	ret
                                    756 ;------------------------------------------------------------
                                    757 ;Allocation info for local variables in function 'goToAddr'
                                    758 ;------------------------------------------------------------
                                    759 ;x                         Allocated with name '_goToAddr_x_65536_79'
                                    760 ;------------------------------------------------------------
                                    761 ;	lcdCommands.c:62: void goToAddr(uint8_t x)
                                    762 ;	-----------------------------------------
                                    763 ;	 function goToAddr
                                    764 ;	-----------------------------------------
      0000AD                        765 _goToAddr:
      0000AD E5 82            [12]  766 	mov	a,dpl
      0000AF 90r00r01         [24]  767 	mov	dptr,#_goToAddr_x_65536_79
      0000B2 F0               [24]  768 	movx	@dptr,a
                                    769 ;	lcdCommands.c:64: busyWait();
      0000B3 12r00r1E         [24]  770 	lcall	_busyWait
                                    771 ;	lcdCommands.c:65: lcdGeneral = 0x80 | x;
      0000B6 90r00r01         [24]  772 	mov	dptr,#_goToAddr_x_65536_79
      0000B9 E0               [24]  773 	movx	a,@dptr
      0000BA FF               [12]  774 	mov	r7,a
      0000BB 7E 00            [12]  775 	mov	r6,#0x00
      0000BD 90 F0 00         [24]  776 	mov	dptr,#_lcdGeneral
      0000C0 74 80            [12]  777 	mov	a,#0x80
      0000C2 4F               [12]  778 	orl	a,r7
      0000C3 F0               [24]  779 	movx	@dptr,a
      0000C4 EE               [12]  780 	mov	a,r6
      0000C5 A3               [24]  781 	inc	dptr
      0000C6 F0               [24]  782 	movx	@dptr,a
                                    783 ;	lcdCommands.c:66: }
      0000C7 22               [24]  784 	ret
                                    785 ;------------------------------------------------------------
                                    786 ;Allocation info for local variables in function 'goToXY'
                                    787 ;------------------------------------------------------------
                                    788 ;y                         Allocated with name '_goToXY_PARM_2'
                                    789 ;x                         Allocated with name '_goToXY_x_65536_81'
                                    790 ;------------------------------------------------------------
                                    791 ;	lcdCommands.c:68: void goToXY(uint8_t x, uint8_t y)
                                    792 ;	-----------------------------------------
                                    793 ;	 function goToXY
                                    794 ;	-----------------------------------------
      0000C8                        795 _goToXY:
      0000C8 E5 82            [12]  796 	mov	a,dpl
      0000CA 90r00r03         [24]  797 	mov	dptr,#_goToXY_x_65536_81
      0000CD F0               [24]  798 	movx	@dptr,a
                                    799 ;	lcdCommands.c:70: busyWait();
      0000CE 12r00r1E         [24]  800 	lcall	_busyWait
                                    801 ;	lcdCommands.c:71: goToAddr(lookUpTable[x][y]);
      0000D1 90r00r03         [24]  802 	mov	dptr,#_goToXY_x_65536_81
      0000D4 E0               [24]  803 	movx	a,@dptr
      0000D5 75 F0 10         [24]  804 	mov	b,#0x10
      0000D8 A4               [48]  805 	mul	ab
      0000D9 24rF4            [12]  806 	add	a,#_lookUpTable
      0000DB FE               [12]  807 	mov	r6,a
      0000DC 74s01            [12]  808 	mov	a,#(_lookUpTable >> 8)
      0000DE 35 F0            [12]  809 	addc	a,b
      0000E0 FF               [12]  810 	mov	r7,a
      0000E1 90r00r02         [24]  811 	mov	dptr,#_goToXY_PARM_2
      0000E4 E0               [24]  812 	movx	a,@dptr
      0000E5 2E               [12]  813 	add	a,r6
      0000E6 F5 82            [12]  814 	mov	dpl,a
      0000E8 E4               [12]  815 	clr	a
      0000E9 3F               [12]  816 	addc	a,r7
      0000EA F5 83            [12]  817 	mov	dph,a
      0000EC E4               [12]  818 	clr	a
      0000ED 93               [24]  819 	movc	a,@a+dptr
      0000EE F5 82            [12]  820 	mov	dpl,a
                                    821 ;	lcdCommands.c:72: }
      0000F0 02r00rAD         [24]  822 	ljmp	_goToAddr
                                    823 ;------------------------------------------------------------
                                    824 ;Allocation info for local variables in function 'customCharacter'
                                    825 ;------------------------------------------------------------
                                    826 ;temp                      Allocated with name '_customCharacter_temp_65536_83'
                                    827 ;i                         Allocated with name '_customCharacter_i_65536_83'
                                    828 ;x                         Allocated with name '_customCharacter_x_65536_83'
                                    829 ;temp8                     Allocated with name '_customCharacter_temp8_196609_86'
                                    830 ;------------------------------------------------------------
                                    831 ;	lcdCommands.c:74: void customCharacter()
                                    832 ;	-----------------------------------------
                                    833 ;	 function customCharacter
                                    834 ;	-----------------------------------------
      0000F3                        835 _customCharacter:
                                    836 ;	lcdCommands.c:79: for(i = 0; i < 8; i++)
      0000F3 7F 00            [12]  837 	mov	r7,#0x00
      0000F5                        838 00106$:
                                    839 ;	lcdCommands.c:81: busyWait();
      0000F5 C0 07            [24]  840 	push	ar7
      0000F7 12r00r1E         [24]  841 	lcall	_busyWait
      0000FA D0 07            [24]  842 	pop	ar7
                                    843 ;	lcdCommands.c:83: temp8 = 0x40 | (0x28 + i);
      0000FC 8F 05            [24]  844 	mov	ar5,r7
      0000FE 7E 00            [12]  845 	mov	r6,#0x00
      000100 74 28            [12]  846 	mov	a,#0x28
      000102 2D               [12]  847 	add	a,r5
      000103 FB               [12]  848 	mov	r3,a
      000104 E4               [12]  849 	clr	a
      000105 3E               [12]  850 	addc	a,r6
      000106 FC               [12]  851 	mov	r4,a
      000107 90 F0 00         [24]  852 	mov	dptr,#_customCharacter_temp8_196609_86
      00010A 74 40            [12]  853 	mov	a,#0x40
      00010C 4B               [12]  854 	orl	a,r3
      00010D F0               [24]  855 	movx	@dptr,a
      00010E EC               [12]  856 	mov	a,r4
      00010F A3               [24]  857 	inc	dptr
      000110 F0               [24]  858 	movx	@dptr,a
                                    859 ;	lcdCommands.c:84: printf("%x %x\n\r",temp8, (0x40 | (0x30 + i)));
      000111 74 30            [12]  860 	mov	a,#0x30
      000113 2D               [12]  861 	add	a,r5
      000114 FD               [12]  862 	mov	r5,a
      000115 E4               [12]  863 	clr	a
      000116 3E               [12]  864 	addc	a,r6
      000117 FE               [12]  865 	mov	r6,a
      000118 43 05 40         [24]  866 	orl	ar5,#0x40
      00011B 90 F0 00         [24]  867 	mov	dptr,#_customCharacter_temp8_196609_86
      00011E E0               [24]  868 	movx	a,@dptr
      00011F FB               [12]  869 	mov	r3,a
      000120 A3               [24]  870 	inc	dptr
      000121 E0               [24]  871 	movx	a,@dptr
      000122 FC               [12]  872 	mov	r4,a
      000123 C0 07            [24]  873 	push	ar7
      000125 C0 05            [24]  874 	push	ar5
      000127 C0 06            [24]  875 	push	ar6
      000129 C0 03            [24]  876 	push	ar3
      00012B C0 04            [24]  877 	push	ar4
      00012D 74r34            [12]  878 	mov	a,#___str_0
      00012F C0 E0            [24]  879 	push	acc
      000131 74s02            [12]  880 	mov	a,#(___str_0 >> 8)
      000133 C0 E0            [24]  881 	push	acc
      000135 74 80            [12]  882 	mov	a,#0x80
      000137 C0 E0            [24]  883 	push	acc
      000139 12r00r00         [24]  884 	lcall	_printf
      00013C E5 81            [12]  885 	mov	a,sp
      00013E 24 F9            [12]  886 	add	a,#0xf9
      000140 F5 81            [12]  887 	mov	sp,a
                                    888 ;	lcdCommands.c:85: busyWait();
      000142 12r00r1E         [24]  889 	lcall	_busyWait
      000145 D0 07            [24]  890 	pop	ar7
                                    891 ;	lcdCommands.c:86: do{
      000147 8F 06            [24]  892 	mov	ar6,r7
      000149                        893 00102$:
                                    894 ;	lcdCommands.c:87: printf_tiny("\n\rEnter value for Row %d\n\r", (i+1));
      000149 8E 04            [24]  895 	mov	ar4,r6
      00014B 7D 00            [12]  896 	mov	r5,#0x00
      00014D 0C               [12]  897 	inc	r4
      00014E BC 00 01         [24]  898 	cjne	r4,#0x00,00127$
      000151 0D               [12]  899 	inc	r5
      000152                        900 00127$:
      000152 C0 06            [24]  901 	push	ar6
      000154 C0 04            [24]  902 	push	ar4
      000156 C0 05            [24]  903 	push	ar5
      000158 74r3C            [12]  904 	mov	a,#___str_1
      00015A C0 E0            [24]  905 	push	acc
      00015C 74s02            [12]  906 	mov	a,#(___str_1 >> 8)
      00015E C0 E0            [24]  907 	push	acc
      000160 12r00r00         [24]  908 	lcall	_printf_tiny
      000163 E5 81            [12]  909 	mov	a,sp
      000165 24 FC            [12]  910 	add	a,#0xfc
      000167 F5 81            [12]  911 	mov	sp,a
                                    912 ;	lcdCommands.c:88: gets(x);
      000169 90r00r04         [24]  913 	mov	dptr,#_customCharacter_x_65536_83
      00016C 75 F0 00         [24]  914 	mov	b,#0x00
      00016F 12r03r18         [24]  915 	lcall	_gets
                                    916 ;	lcdCommands.c:90: temp = atoh(x);
      000172 90r00r04         [24]  917 	mov	dptr,#_customCharacter_x_65536_83
      000175 75 F0 00         [24]  918 	mov	b,#0x00
      000178 12r0ArBD         [24]  919 	lcall	_atoh
      00017B AD 82            [24]  920 	mov	r5,dpl
      00017D D0 06            [24]  921 	pop	ar6
                                    922 ;	lcdCommands.c:91: }while(temp < 0 || temp > 0x1F);
      00017F ED               [12]  923 	mov	a,r5
      000180 24 E0            [12]  924 	add	a,#0xff - 0x1f
      000182 40 C5            [24]  925 	jc	00102$
                                    926 ;	lcdCommands.c:93: writeCharacter = temp;
      000184 90 F1 00         [24]  927 	mov	dptr,#_writeCharacter
      000187 ED               [12]  928 	mov	a,r5
      000188 F0               [24]  929 	movx	@dptr,a
      000189 E4               [12]  930 	clr	a
      00018A A3               [24]  931 	inc	dptr
      00018B F0               [24]  932 	movx	@dptr,a
                                    933 ;	lcdCommands.c:94: busyWait();
      00018C C0 06            [24]  934 	push	ar6
      00018E 12r00r1E         [24]  935 	lcall	_busyWait
                                    936 ;	lcdCommands.c:95: memset(x,'\0',8 * sizeof(char));
      000191 90r00r00         [24]  937 	mov	dptr,#_memset_PARM_2
      000194 E4               [12]  938 	clr	a
      000195 F0               [24]  939 	movx	@dptr,a
      000196 90r00r00         [24]  940 	mov	dptr,#_memset_PARM_3
      000199 74 08            [12]  941 	mov	a,#0x08
      00019B F0               [24]  942 	movx	@dptr,a
      00019C E4               [12]  943 	clr	a
      00019D A3               [24]  944 	inc	dptr
      00019E F0               [24]  945 	movx	@dptr,a
      00019F 90r00r04         [24]  946 	mov	dptr,#_customCharacter_x_65536_83
      0001A2 75 F0 00         [24]  947 	mov	b,#0x00
      0001A5 12r00r00         [24]  948 	lcall	_memset
      0001A8 D0 06            [24]  949 	pop	ar6
                                    950 ;	lcdCommands.c:79: for(i = 0; i < 8; i++)
      0001AA EE               [12]  951 	mov	a,r6
      0001AB 04               [12]  952 	inc	a
      0001AC FF               [12]  953 	mov	r7,a
      0001AD BF 08 00         [24]  954 	cjne	r7,#0x08,00129$
      0001B0                        955 00129$:
      0001B0 50 03            [24]  956 	jnc	00130$
      0001B2 02r00rF5         [24]  957 	ljmp	00106$
      0001B5                        958 00130$:
                                    959 ;	lcdCommands.c:97: lcdGeneral = 0x80 | 0x11;
      0001B5 90 F0 00         [24]  960 	mov	dptr,#_lcdGeneral
      0001B8 74 91            [12]  961 	mov	a,#0x91
      0001BA F0               [24]  962 	movx	@dptr,a
      0001BB E4               [12]  963 	clr	a
      0001BC A3               [24]  964 	inc	dptr
      0001BD F0               [24]  965 	movx	@dptr,a
                                    966 ;	lcdCommands.c:98: busyWait();
      0001BE 12r00r1E         [24]  967 	lcall	_busyWait
                                    968 ;	lcdCommands.c:99: writeCharacter = 0x06;
      0001C1 90 F1 00         [24]  969 	mov	dptr,#_writeCharacter
      0001C4 74 06            [12]  970 	mov	a,#0x06
      0001C6 F0               [24]  971 	movx	@dptr,a
      0001C7 E4               [12]  972 	clr	a
      0001C8 A3               [24]  973 	inc	dptr
      0001C9 F0               [24]  974 	movx	@dptr,a
                                    975 ;	lcdCommands.c:100: }
      0001CA 22               [24]  976 	ret
                                    977 ;------------------------------------------------------------
                                    978 ;Allocation info for local variables in function 'readLCD'
                                    979 ;------------------------------------------------------------
                                    980 ;temp1                     Allocated with name '_readLCD_temp1_65537_89'
                                    981 ;------------------------------------------------------------
                                    982 ;	lcdCommands.c:102: uint8_t readLCD()
                                    983 ;	-----------------------------------------
                                    984 ;	 function readLCD
                                    985 ;	-----------------------------------------
      0001CB                        986 _readLCD:
                                    987 ;	lcdCommands.c:104: busyWait();
      0001CB 12r00r1E         [24]  988 	lcall	_busyWait
                                    989 ;	lcdCommands.c:105: uint8_t temp1 = readCharacter;
      0001CE 90 F3 00         [24]  990 	mov	dptr,#_readCharacter
      0001D1 E0               [24]  991 	movx	a,@dptr
      0001D2 FE               [12]  992 	mov	r6,a
      0001D3 A3               [24]  993 	inc	dptr
      0001D4 E0               [24]  994 	movx	a,@dptr
                                    995 ;	lcdCommands.c:106: busyWait();
      0001D5 C0 06            [24]  996 	push	ar6
      0001D7 12r00r1E         [24]  997 	lcall	_busyWait
      0001DA D0 06            [24]  998 	pop	ar6
                                    999 ;	lcdCommands.c:107: return temp1;
      0001DC 8E 82            [24] 1000 	mov	dpl,r6
                                   1001 ;	lcdCommands.c:108: }
      0001DE 22               [24] 1002 	ret
                                   1003 ;------------------------------------------------------------
                                   1004 ;Allocation info for local variables in function 'putsLCD'
                                   1005 ;------------------------------------------------------------
                                   1006 ;sloc0                     Allocated with name '_putsLCD_sloc0_1_0'
                                   1007 ;sloc1                     Allocated with name '_putsLCD_sloc1_1_0'
                                   1008 ;y                         Allocated with name '_putsLCD_y_65536_90'
                                   1009 ;i                         Allocated with name '_putsLCD_i_65536_91'
                                   1010 ;j                         Allocated with name '_putsLCD_j_65536_91'
                                   1011 ;k                         Allocated with name '_putsLCD_k_65536_91'
                                   1012 ;------------------------------------------------------------
                                   1013 ;	lcdCommands.c:110: void putsLCD(char* y)
                                   1014 ;	-----------------------------------------
                                   1015 ;	 function putsLCD
                                   1016 ;	-----------------------------------------
      0001DF                       1017 _putsLCD:
      0001DF AF F0            [24] 1018 	mov	r7,b
      0001E1 AE 83            [24] 1019 	mov	r6,dph
      0001E3 E5 82            [12] 1020 	mov	a,dpl
      0001E5 90r00r0C         [24] 1021 	mov	dptr,#_putsLCD_y_65536_90
      0001E8 F0               [24] 1022 	movx	@dptr,a
      0001E9 EE               [12] 1023 	mov	a,r6
      0001EA A3               [24] 1024 	inc	dptr
      0001EB F0               [24] 1025 	movx	@dptr,a
      0001EC EF               [12] 1026 	mov	a,r7
      0001ED A3               [24] 1027 	inc	dptr
      0001EE F0               [24] 1028 	movx	@dptr,a
                                   1029 ;	lcdCommands.c:112: int i = 0,j = 0, k =0;
      0001EF 90r00r0F         [24] 1030 	mov	dptr,#_putsLCD_i_65536_91
      0001F2 E4               [12] 1031 	clr	a
      0001F3 F0               [24] 1032 	movx	@dptr,a
      0001F4 A3               [24] 1033 	inc	dptr
      0001F5 F0               [24] 1034 	movx	@dptr,a
                                   1035 ;	lcdCommands.c:113: while(y[i + (j * 16)] != '\0')
      0001F6 90r00r0C         [24] 1036 	mov	dptr,#_putsLCD_y_65536_90
      0001F9 E0               [24] 1037 	movx	a,@dptr
      0001FA F5*02            [12] 1038 	mov	_putsLCD_sloc1_1_0,a
      0001FC A3               [24] 1039 	inc	dptr
      0001FD E0               [24] 1040 	movx	a,@dptr
      0001FE F5*03            [12] 1041 	mov	(_putsLCD_sloc1_1_0 + 1),a
      000200 A3               [24] 1042 	inc	dptr
      000201 E0               [24] 1043 	movx	a,@dptr
      000202 F5*04            [12] 1044 	mov	(_putsLCD_sloc1_1_0 + 2),a
      000204 AA*02            [24] 1045 	mov	r2,_putsLCD_sloc1_1_0
      000206 AB*03            [24] 1046 	mov	r3,(_putsLCD_sloc1_1_0 + 1)
      000208 AC*04            [24] 1047 	mov	r4,(_putsLCD_sloc1_1_0 + 2)
      00020A 78 00            [12] 1048 	mov	r0,#0x00
      00020C 79 00            [12] 1049 	mov	r1,#0x00
      00020E                       1050 00103$:
      00020E 88 06            [24] 1051 	mov	ar6,r0
      000210 E9               [12] 1052 	mov	a,r1
      000211 C4               [12] 1053 	swap	a
      000212 54 F0            [12] 1054 	anl	a,#0xf0
      000214 CE               [12] 1055 	xch	a,r6
      000215 C4               [12] 1056 	swap	a
      000216 CE               [12] 1057 	xch	a,r6
      000217 6E               [12] 1058 	xrl	a,r6
      000218 CE               [12] 1059 	xch	a,r6
      000219 54 F0            [12] 1060 	anl	a,#0xf0
      00021B CE               [12] 1061 	xch	a,r6
      00021C 6E               [12] 1062 	xrl	a,r6
      00021D FF               [12] 1063 	mov	r7,a
      00021E 90r00r0F         [24] 1064 	mov	dptr,#_putsLCD_i_65536_91
      000221 E0               [24] 1065 	movx	a,@dptr
      000222 F5*00            [12] 1066 	mov	_putsLCD_sloc0_1_0,a
      000224 A3               [24] 1067 	inc	dptr
      000225 E0               [24] 1068 	movx	a,@dptr
      000226 F5*01            [12] 1069 	mov	(_putsLCD_sloc0_1_0 + 1),a
      000228 EE               [12] 1070 	mov	a,r6
      000229 25*00            [12] 1071 	add	a,_putsLCD_sloc0_1_0
      00022B FE               [12] 1072 	mov	r6,a
      00022C EF               [12] 1073 	mov	a,r7
      00022D 35*01            [12] 1074 	addc	a,(_putsLCD_sloc0_1_0 + 1)
      00022F FF               [12] 1075 	mov	r7,a
      000230 EE               [12] 1076 	mov	a,r6
      000231 2A               [12] 1077 	add	a,r2
      000232 FE               [12] 1078 	mov	r6,a
      000233 EF               [12] 1079 	mov	a,r7
      000234 3B               [12] 1080 	addc	a,r3
      000235 FF               [12] 1081 	mov	r7,a
      000236 8C 05            [24] 1082 	mov	ar5,r4
      000238 8E 82            [24] 1083 	mov	dpl,r6
      00023A 8F 83            [24] 1084 	mov	dph,r7
      00023C 8D F0            [24] 1085 	mov	b,r5
      00023E 12r00r00         [24] 1086 	lcall	__gptrget
      000241 70 01            [24] 1087 	jnz	00121$
      000243 22               [24] 1088 	ret
      000244                       1089 00121$:
                                   1090 ;	lcdCommands.c:115: busyWait();
      000244 C0 04            [24] 1091 	push	ar4
      000246 C0 03            [24] 1092 	push	ar3
      000248 C0 02            [24] 1093 	push	ar2
      00024A C0 01            [24] 1094 	push	ar1
      00024C C0 00            [24] 1095 	push	ar0
      00024E 12r00r1E         [24] 1096 	lcall	_busyWait
      000251 D0 00            [24] 1097 	pop	ar0
      000253 D0 01            [24] 1098 	pop	ar1
      000255 D0 02            [24] 1099 	pop	ar2
      000257 D0 03            [24] 1100 	pop	ar3
      000259 D0 04            [24] 1101 	pop	ar4
                                   1102 ;	lcdCommands.c:116: if( i > 15)
      00025B C3               [12] 1103 	clr	c
      00025C 74 0F            [12] 1104 	mov	a,#0x0f
      00025E 95*00            [12] 1105 	subb	a,_putsLCD_sloc0_1_0
      000260 74 80            [12] 1106 	mov	a,#(0x00 ^ 0x80)
      000262 85*01 F0         [24] 1107 	mov	b,(_putsLCD_sloc0_1_0 + 1)
      000265 63 F0 80         [24] 1108 	xrl	b,#0x80
      000268 95 F0            [12] 1109 	subb	a,b
      00026A 50 0C            [24] 1110 	jnc	00102$
                                   1111 ;	lcdCommands.c:118: j++;
      00026C 08               [12] 1112 	inc	r0
      00026D B8 00 01         [24] 1113 	cjne	r0,#0x00,00123$
      000270 09               [12] 1114 	inc	r1
      000271                       1115 00123$:
                                   1116 ;	lcdCommands.c:119: i = 0;
      000271 90r00r0F         [24] 1117 	mov	dptr,#_putsLCD_i_65536_91
      000274 E4               [12] 1118 	clr	a
      000275 F0               [24] 1119 	movx	@dptr,a
      000276 A3               [24] 1120 	inc	dptr
      000277 F0               [24] 1121 	movx	@dptr,a
      000278                       1122 00102$:
                                   1123 ;	lcdCommands.c:122: goToAddr(lookUpTable[j][i]);
      000278 C0 02            [24] 1124 	push	ar2
      00027A C0 03            [24] 1125 	push	ar3
      00027C C0 04            [24] 1126 	push	ar4
      00027E 88 03            [24] 1127 	mov	ar3,r0
      000280 E9               [12] 1128 	mov	a,r1
      000281 C4               [12] 1129 	swap	a
      000282 54 F0            [12] 1130 	anl	a,#0xf0
      000284 CB               [12] 1131 	xch	a,r3
      000285 C4               [12] 1132 	swap	a
      000286 CB               [12] 1133 	xch	a,r3
      000287 6B               [12] 1134 	xrl	a,r3
      000288 CB               [12] 1135 	xch	a,r3
      000289 54 F0            [12] 1136 	anl	a,#0xf0
      00028B CB               [12] 1137 	xch	a,r3
      00028C 6B               [12] 1138 	xrl	a,r3
      00028D FC               [12] 1139 	mov	r4,a
      00028E EB               [12] 1140 	mov	a,r3
      00028F 24rF4            [12] 1141 	add	a,#_lookUpTable
      000291 FA               [12] 1142 	mov	r2,a
      000292 EC               [12] 1143 	mov	a,r4
      000293 34s01            [12] 1144 	addc	a,#(_lookUpTable >> 8)
      000295 FF               [12] 1145 	mov	r7,a
      000296 90r00r0F         [24] 1146 	mov	dptr,#_putsLCD_i_65536_91
      000299 E0               [24] 1147 	movx	a,@dptr
      00029A FD               [12] 1148 	mov	r5,a
      00029B A3               [24] 1149 	inc	dptr
      00029C E0               [24] 1150 	movx	a,@dptr
      00029D FE               [12] 1151 	mov	r6,a
      00029E ED               [12] 1152 	mov	a,r5
      00029F 2A               [12] 1153 	add	a,r2
      0002A0 F5 82            [12] 1154 	mov	dpl,a
      0002A2 EE               [12] 1155 	mov	a,r6
      0002A3 3F               [12] 1156 	addc	a,r7
      0002A4 F5 83            [12] 1157 	mov	dph,a
      0002A6 E4               [12] 1158 	clr	a
      0002A7 93               [24] 1159 	movc	a,@a+dptr
      0002A8 F5 82            [12] 1160 	mov	dpl,a
      0002AA C0 06            [24] 1161 	push	ar6
      0002AC C0 05            [24] 1162 	push	ar5
      0002AE C0 04            [24] 1163 	push	ar4
      0002B0 C0 03            [24] 1164 	push	ar3
      0002B2 C0 02            [24] 1165 	push	ar2
      0002B4 C0 01            [24] 1166 	push	ar1
      0002B6 C0 00            [24] 1167 	push	ar0
      0002B8 12r00rAD         [24] 1168 	lcall	_goToAddr
      0002BB D0 00            [24] 1169 	pop	ar0
      0002BD D0 01            [24] 1170 	pop	ar1
      0002BF D0 02            [24] 1171 	pop	ar2
      0002C1 D0 03            [24] 1172 	pop	ar3
      0002C3 D0 04            [24] 1173 	pop	ar4
      0002C5 D0 05            [24] 1174 	pop	ar5
      0002C7 D0 06            [24] 1175 	pop	ar6
                                   1176 ;	lcdCommands.c:123: lcdPutCh(y[i + (j * 16)]);
      0002C9 EB               [12] 1177 	mov	a,r3
      0002CA 2D               [12] 1178 	add	a,r5
      0002CB FB               [12] 1179 	mov	r3,a
      0002CC EC               [12] 1180 	mov	a,r4
      0002CD 3E               [12] 1181 	addc	a,r6
      0002CE FC               [12] 1182 	mov	r4,a
      0002CF EB               [12] 1183 	mov	a,r3
      0002D0 25*02            [12] 1184 	add	a,_putsLCD_sloc1_1_0
      0002D2 FB               [12] 1185 	mov	r3,a
      0002D3 EC               [12] 1186 	mov	a,r4
      0002D4 35*03            [12] 1187 	addc	a,(_putsLCD_sloc1_1_0 + 1)
      0002D6 FC               [12] 1188 	mov	r4,a
      0002D7 AF*04            [24] 1189 	mov	r7,(_putsLCD_sloc1_1_0 + 2)
      0002D9 8B 82            [24] 1190 	mov	dpl,r3
      0002DB 8C 83            [24] 1191 	mov	dph,r4
      0002DD 8F F0            [24] 1192 	mov	b,r7
      0002DF 12r00r00         [24] 1193 	lcall	__gptrget
      0002E2 FB               [12] 1194 	mov	r3,a
      0002E3 F5 82            [12] 1195 	mov	dpl,a
      0002E5 C0 06            [24] 1196 	push	ar6
      0002E7 C0 05            [24] 1197 	push	ar5
      0002E9 C0 04            [24] 1198 	push	ar4
      0002EB C0 03            [24] 1199 	push	ar3
      0002ED C0 02            [24] 1200 	push	ar2
      0002EF C0 01            [24] 1201 	push	ar1
      0002F1 C0 00            [24] 1202 	push	ar0
      0002F3 12r00r8B         [24] 1203 	lcall	_lcdPutCh
      0002F6 D0 00            [24] 1204 	pop	ar0
      0002F8 D0 01            [24] 1205 	pop	ar1
      0002FA D0 02            [24] 1206 	pop	ar2
      0002FC D0 03            [24] 1207 	pop	ar3
      0002FE D0 04            [24] 1208 	pop	ar4
      000300 D0 05            [24] 1209 	pop	ar5
      000302 D0 06            [24] 1210 	pop	ar6
                                   1211 ;	lcdCommands.c:124: i++;
      000304 90r00r0F         [24] 1212 	mov	dptr,#_putsLCD_i_65536_91
      000307 74 01            [12] 1213 	mov	a,#0x01
      000309 2D               [12] 1214 	add	a,r5
      00030A F0               [24] 1215 	movx	@dptr,a
      00030B E4               [12] 1216 	clr	a
      00030C 3E               [12] 1217 	addc	a,r6
      00030D A3               [24] 1218 	inc	dptr
      00030E F0               [24] 1219 	movx	@dptr,a
      00030F D0 04            [24] 1220 	pop	ar4
      000311 D0 03            [24] 1221 	pop	ar3
      000313 D0 02            [24] 1222 	pop	ar2
                                   1223 ;	lcdCommands.c:126: }
      000315 02r02r0E         [24] 1224 	ljmp	00103$
                                   1225 ;------------------------------------------------------------
                                   1226 ;Allocation info for local variables in function 'gets'
                                   1227 ;------------------------------------------------------------
                                   1228 ;s                         Allocated with name '_gets_s_65536_94'
                                   1229 ;c                         Allocated with name '_gets_c_65536_95'
                                   1230 ;count                     Allocated with name '_gets_count_65536_95'
                                   1231 ;------------------------------------------------------------
                                   1232 ;	lcdCommands.c:128: char *gets (char *s)
                                   1233 ;	-----------------------------------------
                                   1234 ;	 function gets
                                   1235 ;	-----------------------------------------
      000318                       1236 _gets:
      000318 AF F0            [24] 1237 	mov	r7,b
      00031A AE 83            [24] 1238 	mov	r6,dph
      00031C E5 82            [12] 1239 	mov	a,dpl
      00031E 90r00r11         [24] 1240 	mov	dptr,#_gets_s_65536_94
      000321 F0               [24] 1241 	movx	@dptr,a
      000322 EE               [12] 1242 	mov	a,r6
      000323 A3               [24] 1243 	inc	dptr
      000324 F0               [24] 1244 	movx	@dptr,a
      000325 EF               [12] 1245 	mov	a,r7
      000326 A3               [24] 1246 	inc	dptr
      000327 F0               [24] 1247 	movx	@dptr,a
                                   1248 ;	lcdCommands.c:131: unsigned int count = 0;
      000328 90r00r14         [24] 1249 	mov	dptr,#_gets_count_65536_95
      00032B E4               [12] 1250 	clr	a
      00032C F0               [24] 1251 	movx	@dptr,a
      00032D A3               [24] 1252 	inc	dptr
      00032E F0               [24] 1253 	movx	@dptr,a
                                   1254 ;	lcdCommands.c:133: while (1)
      00032F                       1255 00111$:
                                   1256 ;	lcdCommands.c:135: c = getchar ();
      00032F 12r00r00         [24] 1257 	lcall	_getchar
      000332 AE 82            [24] 1258 	mov	r6,dpl
      000334 AF 83            [24] 1259 	mov	r7,dph
                                   1260 ;	lcdCommands.c:136: switch(c)
      000336 BE 08 02         [24] 1261 	cjne	r6,#0x08,00139$
      000339 80 0D            [24] 1262 	sjmp	00101$
      00033B                       1263 00139$:
      00033B BE 0A 02         [24] 1264 	cjne	r6,#0x0a,00140$
      00033E 80 62            [24] 1265 	sjmp	00105$
      000340                       1266 00140$:
      000340 BE 0D 02         [24] 1267 	cjne	r6,#0x0d,00141$
      000343 80 5D            [24] 1268 	sjmp	00105$
      000345                       1269 00141$:
      000345 02r03rCA         [24] 1270 	ljmp	00106$
                                   1271 ;	lcdCommands.c:138: case '\b': /* backspace */
      000348                       1272 00101$:
                                   1273 ;	lcdCommands.c:139: if (count)
      000348 90r00r14         [24] 1274 	mov	dptr,#_gets_count_65536_95
      00034B E0               [24] 1275 	movx	a,@dptr
      00034C FD               [12] 1276 	mov	r5,a
      00034D A3               [24] 1277 	inc	dptr
      00034E E0               [24] 1278 	movx	a,@dptr
      00034F FF               [12] 1279 	mov	r7,a
      000350 90r00r14         [24] 1280 	mov	dptr,#_gets_count_65536_95
      000353 E0               [24] 1281 	movx	a,@dptr
      000354 F5 F0            [12] 1282 	mov	b,a
      000356 A3               [24] 1283 	inc	dptr
      000357 E0               [24] 1284 	movx	a,@dptr
      000358 45 F0            [12] 1285 	orl	a,b
      00035A 70 03            [24] 1286 	jnz	00142$
      00035C 02r04r02         [24] 1287 	ljmp	00107$
      00035F                       1288 00142$:
                                   1289 ;	lcdCommands.c:141: putchar ('\b');
      00035F 90 00 08         [24] 1290 	mov	dptr,#0x0008
      000362 C0 07            [24] 1291 	push	ar7
      000364 C0 05            [24] 1292 	push	ar5
      000366 12r00r00         [24] 1293 	lcall	_putchar
                                   1294 ;	lcdCommands.c:142: putchar (' ');
      000369 90 00 20         [24] 1295 	mov	dptr,#0x0020
      00036C 12r00r00         [24] 1296 	lcall	_putchar
                                   1297 ;	lcdCommands.c:143: putchar ('\b');
      00036F 90 00 08         [24] 1298 	mov	dptr,#0x0008
      000372 12r00r00         [24] 1299 	lcall	_putchar
      000375 D0 05            [24] 1300 	pop	ar5
      000377 D0 07            [24] 1301 	pop	ar7
                                   1302 ;	lcdCommands.c:144: --s;
      000379 90r00r11         [24] 1303 	mov	dptr,#_gets_s_65536_94
      00037C E0               [24] 1304 	movx	a,@dptr
      00037D 24 FF            [12] 1305 	add	a,#0xff
      00037F FA               [12] 1306 	mov	r2,a
      000380 A3               [24] 1307 	inc	dptr
      000381 E0               [24] 1308 	movx	a,@dptr
      000382 34 FF            [12] 1309 	addc	a,#0xff
      000384 FB               [12] 1310 	mov	r3,a
      000385 A3               [24] 1311 	inc	dptr
      000386 E0               [24] 1312 	movx	a,@dptr
      000387 FC               [12] 1313 	mov	r4,a
      000388 90r00r11         [24] 1314 	mov	dptr,#_gets_s_65536_94
      00038B EA               [12] 1315 	mov	a,r2
      00038C F0               [24] 1316 	movx	@dptr,a
      00038D EB               [12] 1317 	mov	a,r3
      00038E A3               [24] 1318 	inc	dptr
      00038F F0               [24] 1319 	movx	@dptr,a
      000390 EC               [12] 1320 	mov	a,r4
      000391 A3               [24] 1321 	inc	dptr
      000392 F0               [24] 1322 	movx	@dptr,a
                                   1323 ;	lcdCommands.c:145: --count;
      000393 1D               [12] 1324 	dec	r5
      000394 BD FF 01         [24] 1325 	cjne	r5,#0xff,00143$
      000397 1F               [12] 1326 	dec	r7
      000398                       1327 00143$:
      000398 90r00r14         [24] 1328 	mov	dptr,#_gets_count_65536_95
      00039B ED               [12] 1329 	mov	a,r5
      00039C F0               [24] 1330 	movx	@dptr,a
      00039D EF               [12] 1331 	mov	a,r7
      00039E A3               [24] 1332 	inc	dptr
      00039F F0               [24] 1333 	movx	@dptr,a
                                   1334 ;	lcdCommands.c:147: break;
                                   1335 ;	lcdCommands.c:150: case '\r': /* CR or LF */
      0003A0 80 60            [24] 1336 	sjmp	00107$
      0003A2                       1337 00105$:
                                   1338 ;	lcdCommands.c:151: putchar ('\r');
      0003A2 90 00 0D         [24] 1339 	mov	dptr,#0x000d
      0003A5 12r00r00         [24] 1340 	lcall	_putchar
                                   1341 ;	lcdCommands.c:152: putchar ('\n');
      0003A8 90 00 0A         [24] 1342 	mov	dptr,#0x000a
      0003AB 12r00r00         [24] 1343 	lcall	_putchar
                                   1344 ;	lcdCommands.c:153: *s = 0;
      0003AE 90r00r11         [24] 1345 	mov	dptr,#_gets_s_65536_94
      0003B1 E0               [24] 1346 	movx	a,@dptr
      0003B2 FC               [12] 1347 	mov	r4,a
      0003B3 A3               [24] 1348 	inc	dptr
      0003B4 E0               [24] 1349 	movx	a,@dptr
      0003B5 FD               [12] 1350 	mov	r5,a
      0003B6 A3               [24] 1351 	inc	dptr
      0003B7 E0               [24] 1352 	movx	a,@dptr
      0003B8 FF               [12] 1353 	mov	r7,a
      0003B9 8C 82            [24] 1354 	mov	dpl,r4
      0003BB 8D 83            [24] 1355 	mov	dph,r5
      0003BD 8F F0            [24] 1356 	mov	b,r7
      0003BF E4               [12] 1357 	clr	a
      0003C0 12r00r00         [24] 1358 	lcall	__gptrput
                                   1359 ;	lcdCommands.c:154: return s;
      0003C3 8C 82            [24] 1360 	mov	dpl,r4
      0003C5 8D 83            [24] 1361 	mov	dph,r5
      0003C7 8F F0            [24] 1362 	mov	b,r7
                                   1363 ;	lcdCommands.c:156: default:
      0003C9 22               [24] 1364 	ret
      0003CA                       1365 00106$:
                                   1366 ;	lcdCommands.c:157: *s++ = c;
      0003CA 90r00r11         [24] 1367 	mov	dptr,#_gets_s_65536_94
      0003CD E0               [24] 1368 	movx	a,@dptr
      0003CE FC               [12] 1369 	mov	r4,a
      0003CF A3               [24] 1370 	inc	dptr
      0003D0 E0               [24] 1371 	movx	a,@dptr
      0003D1 FD               [12] 1372 	mov	r5,a
      0003D2 A3               [24] 1373 	inc	dptr
      0003D3 E0               [24] 1374 	movx	a,@dptr
      0003D4 FF               [12] 1375 	mov	r7,a
      0003D5 8C 82            [24] 1376 	mov	dpl,r4
      0003D7 8D 83            [24] 1377 	mov	dph,r5
      0003D9 8F F0            [24] 1378 	mov	b,r7
      0003DB EE               [12] 1379 	mov	a,r6
      0003DC 12r00r00         [24] 1380 	lcall	__gptrput
      0003DF 90r00r11         [24] 1381 	mov	dptr,#_gets_s_65536_94
      0003E2 74 01            [12] 1382 	mov	a,#0x01
      0003E4 2C               [12] 1383 	add	a,r4
      0003E5 F0               [24] 1384 	movx	@dptr,a
      0003E6 E4               [12] 1385 	clr	a
      0003E7 3D               [12] 1386 	addc	a,r5
      0003E8 A3               [24] 1387 	inc	dptr
      0003E9 F0               [24] 1388 	movx	@dptr,a
      0003EA EF               [12] 1389 	mov	a,r7
      0003EB A3               [24] 1390 	inc	dptr
      0003EC F0               [24] 1391 	movx	@dptr,a
                                   1392 ;	lcdCommands.c:158: ++count;
      0003ED 90r00r14         [24] 1393 	mov	dptr,#_gets_count_65536_95
      0003F0 E0               [24] 1394 	movx	a,@dptr
      0003F1 24 01            [12] 1395 	add	a,#0x01
      0003F3 F0               [24] 1396 	movx	@dptr,a
      0003F4 A3               [24] 1397 	inc	dptr
      0003F5 E0               [24] 1398 	movx	a,@dptr
      0003F6 34 00            [12] 1399 	addc	a,#0x00
      0003F8 F0               [24] 1400 	movx	@dptr,a
                                   1401 ;	lcdCommands.c:159: putchar (c);
      0003F9 7F 00            [12] 1402 	mov	r7,#0x00
      0003FB 8E 82            [24] 1403 	mov	dpl,r6
      0003FD 8F 83            [24] 1404 	mov	dph,r7
      0003FF 12r00r00         [24] 1405 	lcall	_putchar
                                   1406 ;	lcdCommands.c:161: }
      000402                       1407 00107$:
                                   1408 ;	lcdCommands.c:162: if (count == 48)
      000402 90r00r14         [24] 1409 	mov	dptr,#_gets_count_65536_95
      000405 E0               [24] 1410 	movx	a,@dptr
      000406 FE               [12] 1411 	mov	r6,a
      000407 A3               [24] 1412 	inc	dptr
      000408 E0               [24] 1413 	movx	a,@dptr
      000409 FF               [12] 1414 	mov	r7,a
      00040A BE 30 05         [24] 1415 	cjne	r6,#0x30,00144$
      00040D BF 00 02         [24] 1416 	cjne	r7,#0x00,00144$
      000410 80 03            [24] 1417 	sjmp	00145$
      000412                       1418 00144$:
      000412 02r03r2F         [24] 1419 	ljmp	00111$
      000415                       1420 00145$:
                                   1421 ;	lcdCommands.c:164: printf("\n\rPlease Input a maximum of 48 characters\n\r");
      000415 74r57            [12] 1422 	mov	a,#___str_2
      000417 C0 E0            [24] 1423 	push	acc
      000419 74s02            [12] 1424 	mov	a,#(___str_2 >> 8)
      00041B C0 E0            [24] 1425 	push	acc
      00041D 74 80            [12] 1426 	mov	a,#0x80
      00041F C0 E0            [24] 1427 	push	acc
      000421 12r00r00         [24] 1428 	lcall	_printf
      000424 15 81            [12] 1429 	dec	sp
      000426 15 81            [12] 1430 	dec	sp
      000428 15 81            [12] 1431 	dec	sp
                                   1432 ;	lcdCommands.c:165: break;
                                   1433 ;	lcdCommands.c:168: }
      00042A 22               [24] 1434 	ret
                                   1435 ;------------------------------------------------------------
                                   1436 ;Allocation info for local variables in function 'ramDump'
                                   1437 ;------------------------------------------------------------
                                   1438 ;i                         Allocated with name '_ramDump_i_65537_101'
                                   1439 ;j                         Allocated with name '_ramDump_j_65537_101'
                                   1440 ;x                         Allocated with name '_ramDump_x_327682_106'
                                   1441 ;x                         Allocated with name '_ramDump_x_327682_111'
                                   1442 ;------------------------------------------------------------
                                   1443 ;	lcdCommands.c:170: void ramDump()
                                   1444 ;	-----------------------------------------
                                   1445 ;	 function ramDump
                                   1446 ;	-----------------------------------------
      00042B                       1447 _ramDump:
                                   1448 ;	lcdCommands.c:172: lcdClear();
      00042B 12r00rA0         [24] 1449 	lcall	_lcdClear
                                   1450 ;	lcdCommands.c:175: printf_tiny("\n\rDDRAM Contents\n\r");
      00042E 74r83            [12] 1451 	mov	a,#___str_3
      000430 C0 E0            [24] 1452 	push	acc
      000432 74s02            [12] 1453 	mov	a,#(___str_3 >> 8)
      000434 C0 E0            [24] 1454 	push	acc
      000436 12r00r00         [24] 1455 	lcall	_printf_tiny
      000439 15 81            [12] 1456 	dec	sp
      00043B 15 81            [12] 1457 	dec	sp
                                   1458 ;	lcdCommands.c:176: for (i = 0; i <= 0x5F; i += 16)      //Print 64 ASCII characters in each line
      00043D 90r00r16         [24] 1459 	mov	dptr,#_ramDump_i_65537_101
      000440 E4               [12] 1460 	clr	a
      000441 F0               [24] 1461 	movx	@dptr,a
      000442                       1462 00109$:
                                   1463 ;	lcdCommands.c:178: printf("%2x: ",i);
      000442 90r00r16         [24] 1464 	mov	dptr,#_ramDump_i_65537_101
      000445 E0               [24] 1465 	movx	a,@dptr
      000446 FF               [12] 1466 	mov	r7,a
      000447 FD               [12] 1467 	mov	r5,a
      000448 7E 00            [12] 1468 	mov	r6,#0x00
      00044A C0 07            [24] 1469 	push	ar7
      00044C C0 05            [24] 1470 	push	ar5
      00044E C0 06            [24] 1471 	push	ar6
      000450 74r96            [12] 1472 	mov	a,#___str_4
      000452 C0 E0            [24] 1473 	push	acc
      000454 74s02            [12] 1474 	mov	a,#(___str_4 >> 8)
      000456 C0 E0            [24] 1475 	push	acc
      000458 74 80            [12] 1476 	mov	a,#0x80
      00045A C0 E0            [24] 1477 	push	acc
      00045C 12r00r00         [24] 1478 	lcall	_printf
      00045F E5 81            [12] 1479 	mov	a,sp
      000461 24 FB            [12] 1480 	add	a,#0xfb
      000463 F5 81            [12] 1481 	mov	sp,a
      000465 D0 07            [24] 1482 	pop	ar7
                                   1483 ;	lcdCommands.c:179: for (j = i; j < (i+16) && j <= 0x5F; j++)    //Print the contents of buffer in ASCII
      000467 8F 06            [24] 1484 	mov	ar6,r7
      000469                       1485 00107$:
      000469 8E 04            [24] 1486 	mov	ar4,r6
      00046B 7D 00            [12] 1487 	mov	r5,#0x00
      00046D 74 10            [12] 1488 	mov	a,#0x10
      00046F 2C               [12] 1489 	add	a,r4
      000470 FC               [12] 1490 	mov	r4,a
      000471 E4               [12] 1491 	clr	a
      000472 3D               [12] 1492 	addc	a,r5
      000473 FD               [12] 1493 	mov	r5,a
      000474 8F 02            [24] 1494 	mov	ar2,r7
      000476 7B 00            [12] 1495 	mov	r3,#0x00
      000478 C3               [12] 1496 	clr	c
      000479 EA               [12] 1497 	mov	a,r2
      00047A 9C               [12] 1498 	subb	a,r4
      00047B EB               [12] 1499 	mov	a,r3
      00047C 64 80            [12] 1500 	xrl	a,#0x80
      00047E 8D F0            [24] 1501 	mov	b,r5
      000480 63 F0 80         [24] 1502 	xrl	b,#0x80
      000483 95 F0            [12] 1503 	subb	a,b
      000485 50 3A            [24] 1504 	jnc	00101$
      000487 EF               [12] 1505 	mov	a,r7
      000488 24 A0            [12] 1506 	add	a,#0xff - 0x5f
      00048A 40 35            [24] 1507 	jc	00101$
                                   1508 ;	lcdCommands.c:181: lcdGeneral = 0x80 | j;
      00048C 90 F0 00         [24] 1509 	mov	dptr,#_lcdGeneral
      00048F 74 80            [12] 1510 	mov	a,#0x80
      000491 4A               [12] 1511 	orl	a,r2
      000492 F0               [24] 1512 	movx	@dptr,a
      000493 EB               [12] 1513 	mov	a,r3
      000494 A3               [24] 1514 	inc	dptr
      000495 F0               [24] 1515 	movx	@dptr,a
                                   1516 ;	lcdCommands.c:182: uint8_t x = readLCD();
      000496 C0 07            [24] 1517 	push	ar7
      000498 C0 06            [24] 1518 	push	ar6
      00049A 12r01rCB         [24] 1519 	lcall	_readLCD
      00049D AD 82            [24] 1520 	mov	r5,dpl
                                   1521 ;	lcdCommands.c:183: printf("%2x ", x);
      00049F 7C 00            [12] 1522 	mov	r4,#0x00
      0004A1 C0 05            [24] 1523 	push	ar5
      0004A3 C0 04            [24] 1524 	push	ar4
      0004A5 74r9C            [12] 1525 	mov	a,#___str_5
      0004A7 C0 E0            [24] 1526 	push	acc
      0004A9 74s02            [12] 1527 	mov	a,#(___str_5 >> 8)
      0004AB C0 E0            [24] 1528 	push	acc
      0004AD 74 80            [12] 1529 	mov	a,#0x80
      0004AF C0 E0            [24] 1530 	push	acc
      0004B1 12r00r00         [24] 1531 	lcall	_printf
      0004B4 E5 81            [12] 1532 	mov	a,sp
      0004B6 24 FB            [12] 1533 	add	a,#0xfb
      0004B8 F5 81            [12] 1534 	mov	sp,a
      0004BA D0 06            [24] 1535 	pop	ar6
      0004BC D0 07            [24] 1536 	pop	ar7
                                   1537 ;	lcdCommands.c:179: for (j = i; j < (i+16) && j <= 0x5F; j++)    //Print the contents of buffer in ASCII
      0004BE 0F               [12] 1538 	inc	r7
      0004BF 80 A8            [24] 1539 	sjmp	00107$
      0004C1                       1540 00101$:
                                   1541 ;	lcdCommands.c:185: printf_tiny("\n\r");
      0004C1 74rA1            [12] 1542 	mov	a,#___str_6
      0004C3 C0 E0            [24] 1543 	push	acc
      0004C5 74s02            [12] 1544 	mov	a,#(___str_6 >> 8)
      0004C7 C0 E0            [24] 1545 	push	acc
      0004C9 12r00r00         [24] 1546 	lcall	_printf_tiny
      0004CC 15 81            [12] 1547 	dec	sp
      0004CE 15 81            [12] 1548 	dec	sp
                                   1549 ;	lcdCommands.c:176: for (i = 0; i <= 0x5F; i += 16)      //Print 64 ASCII characters in each line
      0004D0 90r00r16         [24] 1550 	mov	dptr,#_ramDump_i_65537_101
      0004D3 E0               [24] 1551 	movx	a,@dptr
      0004D4 FF               [12] 1552 	mov	r7,a
      0004D5 24 10            [12] 1553 	add	a,#0x10
      0004D7 F0               [24] 1554 	movx	@dptr,a
      0004D8 E0               [24] 1555 	movx	a,@dptr
      0004D9 FF               [12] 1556 	mov  r7,a
      0004DA 24 A0            [12] 1557 	add	a,#0xff - 0x5f
      0004DC 40 03            [24] 1558 	jc	00154$
      0004DE 02r04r42         [24] 1559 	ljmp	00109$
      0004E1                       1560 00154$:
                                   1561 ;	lcdCommands.c:187: printf_tiny("\n\rCGRAM Contents\n\r");
      0004E1 74rA4            [12] 1562 	mov	a,#___str_7
      0004E3 C0 E0            [24] 1563 	push	acc
      0004E5 74s02            [12] 1564 	mov	a,#(___str_7 >> 8)
      0004E7 C0 E0            [24] 1565 	push	acc
      0004E9 12r00r00         [24] 1566 	lcall	_printf_tiny
      0004EC 15 81            [12] 1567 	dec	sp
      0004EE 15 81            [12] 1568 	dec	sp
                                   1569 ;	lcdCommands.c:188: for (i = 0; i <= 7; i ++)      //Print 64 ASCII characters in each line
      0004F0 7F 00            [12] 1570 	mov	r7,#0x00
      0004F2                       1571 00113$:
                                   1572 ;	lcdCommands.c:190: printf_tiny("\n\rCharacter %d\n\r",i);
      0004F2 8F 05            [24] 1573 	mov	ar5,r7
      0004F4 7E 00            [12] 1574 	mov	r6,#0x00
      0004F6 C0 07            [24] 1575 	push	ar7
      0004F8 C0 05            [24] 1576 	push	ar5
      0004FA C0 06            [24] 1577 	push	ar6
      0004FC 74rB7            [12] 1578 	mov	a,#___str_8
      0004FE C0 E0            [24] 1579 	push	acc
      000500 74s02            [12] 1580 	mov	a,#(___str_8 >> 8)
      000502 C0 E0            [24] 1581 	push	acc
      000504 12r00r00         [24] 1582 	lcall	_printf_tiny
      000507 E5 81            [12] 1583 	mov	a,sp
      000509 24 FC            [12] 1584 	add	a,#0xfc
      00050B F5 81            [12] 1585 	mov	sp,a
      00050D D0 07            [24] 1586 	pop	ar7
                                   1587 ;	lcdCommands.c:191: for (j = 0; j <= 7; j++)    //Print the contents of buffer in ASCII
      00050F 8F 06            [24] 1588 	mov	ar6,r7
      000511 7D 00            [12] 1589 	mov	r5,#0x00
      000513                       1590 00111$:
                                   1591 ;	lcdCommands.c:193: printf("Row %2x: ", j);
      000513 8D 03            [24] 1592 	mov	ar3,r5
      000515 7C 00            [12] 1593 	mov	r4,#0x00
      000517 C0 06            [24] 1594 	push	ar6
      000519 C0 05            [24] 1595 	push	ar5
      00051B C0 04            [24] 1596 	push	ar4
      00051D C0 03            [24] 1597 	push	ar3
      00051F C0 03            [24] 1598 	push	ar3
      000521 C0 04            [24] 1599 	push	ar4
      000523 74rC8            [12] 1600 	mov	a,#___str_9
      000525 C0 E0            [24] 1601 	push	acc
      000527 74s02            [12] 1602 	mov	a,#(___str_9 >> 8)
      000529 C0 E0            [24] 1603 	push	acc
      00052B 74 80            [12] 1604 	mov	a,#0x80
      00052D C0 E0            [24] 1605 	push	acc
      00052F 12r00r00         [24] 1606 	lcall	_printf
      000532 E5 81            [12] 1607 	mov	a,sp
      000534 24 FB            [12] 1608 	add	a,#0xfb
      000536 F5 81            [12] 1609 	mov	sp,a
      000538 D0 03            [24] 1610 	pop	ar3
      00053A D0 04            [24] 1611 	pop	ar4
      00053C D0 05            [24] 1612 	pop	ar5
      00053E D0 06            [24] 1613 	pop	ar6
                                   1614 ;	lcdCommands.c:194: lcdGeneral = 0x40 | j | (i << 3);
      000540 43 03 40         [24] 1615 	orl	ar3,#0x40
      000543 8E 01            [24] 1616 	mov	ar1,r6
      000545 E4               [12] 1617 	clr	a
      000546 03               [12] 1618 	rr	a
      000547 54 F8            [12] 1619 	anl	a,#0xf8
      000549 C9               [12] 1620 	xch	a,r1
      00054A C4               [12] 1621 	swap	a
      00054B 03               [12] 1622 	rr	a
      00054C C9               [12] 1623 	xch	a,r1
      00054D 69               [12] 1624 	xrl	a,r1
      00054E C9               [12] 1625 	xch	a,r1
      00054F 54 F8            [12] 1626 	anl	a,#0xf8
      000551 C9               [12] 1627 	xch	a,r1
      000552 69               [12] 1628 	xrl	a,r1
      000553 FA               [12] 1629 	mov	r2,a
      000554 90 F0 00         [24] 1630 	mov	dptr,#_lcdGeneral
      000557 E9               [12] 1631 	mov	a,r1
      000558 4B               [12] 1632 	orl	a,r3
      000559 F0               [24] 1633 	movx	@dptr,a
      00055A EA               [12] 1634 	mov	a,r2
      00055B 4C               [12] 1635 	orl	a,r4
      00055C A3               [24] 1636 	inc	dptr
      00055D F0               [24] 1637 	movx	@dptr,a
                                   1638 ;	lcdCommands.c:195: uint8_t x = readLCD();
      00055E C0 06            [24] 1639 	push	ar6
      000560 C0 05            [24] 1640 	push	ar5
      000562 12r01rCB         [24] 1641 	lcall	_readLCD
      000565 AC 82            [24] 1642 	mov	r4,dpl
                                   1643 ;	lcdCommands.c:196: printf("%2x ", x);
      000567 7B 00            [12] 1644 	mov	r3,#0x00
      000569 C0 04            [24] 1645 	push	ar4
      00056B C0 03            [24] 1646 	push	ar3
      00056D 74r9C            [12] 1647 	mov	a,#___str_5
      00056F C0 E0            [24] 1648 	push	acc
      000571 74s02            [12] 1649 	mov	a,#(___str_5 >> 8)
      000573 C0 E0            [24] 1650 	push	acc
      000575 74 80            [12] 1651 	mov	a,#0x80
      000577 C0 E0            [24] 1652 	push	acc
      000579 12r00r00         [24] 1653 	lcall	_printf
      00057C E5 81            [12] 1654 	mov	a,sp
      00057E 24 FB            [12] 1655 	add	a,#0xfb
      000580 F5 81            [12] 1656 	mov	sp,a
                                   1657 ;	lcdCommands.c:197: printf_tiny("\n\r");
      000582 74rA1            [12] 1658 	mov	a,#___str_6
      000584 C0 E0            [24] 1659 	push	acc
      000586 74s02            [12] 1660 	mov	a,#(___str_6 >> 8)
      000588 C0 E0            [24] 1661 	push	acc
      00058A 12r00r00         [24] 1662 	lcall	_printf_tiny
      00058D 15 81            [12] 1663 	dec	sp
      00058F 15 81            [12] 1664 	dec	sp
      000591 D0 05            [24] 1665 	pop	ar5
      000593 D0 06            [24] 1666 	pop	ar6
                                   1667 ;	lcdCommands.c:191: for (j = 0; j <= 7; j++)    //Print the contents of buffer in ASCII
      000595 0D               [12] 1668 	inc	r5
      000596 ED               [12] 1669 	mov	a,r5
      000597 24 F8            [12] 1670 	add	a,#0xff - 0x07
      000599 40 03            [24] 1671 	jc	00155$
      00059B 02r05r13         [24] 1672 	ljmp	00111$
      00059E                       1673 00155$:
                                   1674 ;	lcdCommands.c:199: printf_tiny("\n\r");
      00059E C0 06            [24] 1675 	push	ar6
      0005A0 74rA1            [12] 1676 	mov	a,#___str_6
      0005A2 C0 E0            [24] 1677 	push	acc
      0005A4 74s02            [12] 1678 	mov	a,#(___str_6 >> 8)
      0005A6 C0 E0            [24] 1679 	push	acc
      0005A8 12r00r00         [24] 1680 	lcall	_printf_tiny
      0005AB 15 81            [12] 1681 	dec	sp
      0005AD 15 81            [12] 1682 	dec	sp
      0005AF D0 06            [24] 1683 	pop	ar6
                                   1684 ;	lcdCommands.c:188: for (i = 0; i <= 7; i ++)      //Print 64 ASCII characters in each line
      0005B1 EE               [12] 1685 	mov	a,r6
      0005B2 04               [12] 1686 	inc	a
      0005B3 FF               [12] 1687 	mov  r7,a
      0005B4 24 F8            [12] 1688 	add	a,#0xff - 0x07
      0005B6 40 03            [24] 1689 	jc	00156$
      0005B8 02r04rF2         [24] 1690 	ljmp	00113$
      0005BB                       1691 00156$:
                                   1692 ;	lcdCommands.c:201: }
      0005BB 22               [24] 1693 	ret
                                   1694 ;------------------------------------------------------------
                                   1695 ;Allocation info for local variables in function 'gamePacman'
                                   1696 ;------------------------------------------------------------
                                   1697 ;abcd                      Allocated with name '_gamePacman_abcd_65537_113'
                                   1698 ;ch                        Allocated with name '_gamePacman_ch_65538_115'
                                   1699 ;i                         Allocated with name '_gamePacman_i_65538_115'
                                   1700 ;count                     Allocated with name '_gamePacman_count_65538_115'
                                   1701 ;checkEnter                Allocated with name '_gamePacman_checkEnter_196611_119'
                                   1702 ;checkEnter1               Allocated with name '_gamePacman_checkEnter1_196611_123'
                                   1703 ;------------------------------------------------------------
                                   1704 ;	lcdCommands.c:203: void gamePacman()
                                   1705 ;	-----------------------------------------
                                   1706 ;	 function gamePacman
                                   1707 ;	-----------------------------------------
      0005BC                       1708 _gamePacman:
                                   1709 ;	lcdCommands.c:205: lcdClear();
      0005BC 12r00rA0         [24] 1710 	lcall	_lcdClear
                                   1711 ;	lcdCommands.c:207: putsLCD("WELCOME 2 PACMANPRESS G TO START");
      0005BF 90r02rD2         [24] 1712 	mov	dptr,#___str_10
      0005C2 75 F0 80         [24] 1713 	mov	b,#0x80
      0005C5 12r01rDF         [24] 1714 	lcall	_putsLCD
                                   1715 ;	lcdCommands.c:208: do{
      0005C8                       1716 00101$:
                                   1717 ;	lcdCommands.c:210: abcd = getchar();
      0005C8 12r00r00         [24] 1718 	lcall	_getchar
      0005CB AE 82            [24] 1719 	mov	r6,dpl
                                   1720 ;	lcdCommands.c:211: putchar(abcd);
      0005CD 8E 05            [24] 1721 	mov	ar5,r6
      0005CF 7F 00            [12] 1722 	mov	r7,#0x00
      0005D1 8D 82            [24] 1723 	mov	dpl,r5
      0005D3 8F 83            [24] 1724 	mov	dph,r7
      0005D5 C0 06            [24] 1725 	push	ar6
      0005D7 12r00r00         [24] 1726 	lcall	_putchar
      0005DA D0 06            [24] 1727 	pop	ar6
                                   1728 ;	lcdCommands.c:212: }while(abcd != 'g');
      0005DC BE 67 E9         [24] 1729 	cjne	r6,#0x67,00101$
                                   1730 ;	lcdCommands.c:214: int i = 1;
      0005DF 90r00r17         [24] 1731 	mov	dptr,#_gamePacman_i_65538_115
      0005E2 74 01            [12] 1732 	mov	a,#0x01
      0005E4 F0               [24] 1733 	movx	@dptr,a
      0005E5 E4               [12] 1734 	clr	a
      0005E6 A3               [24] 1735 	inc	dptr
      0005E7 F0               [24] 1736 	movx	@dptr,a
                                   1737 ;	lcdCommands.c:215: uint8_t count = 0;
      0005E8 90r00r19         [24] 1738 	mov	dptr,#_gamePacman_count_65538_115
      0005EB F0               [24] 1739 	movx	@dptr,a
                                   1740 ;	lcdCommands.c:216: lcdClear();
      0005EC 12r00rA0         [24] 1741 	lcall	_lcdClear
                                   1742 ;	lcdCommands.c:217: makePacmanRight();
      0005EF 12r08rC3         [24] 1743 	lcall	_makePacmanRight
                                   1744 ;	lcdCommands.c:218: makePacmanLeft();
      0005F2 12r09rA9         [24] 1745 	lcall	_makePacmanLeft
                                   1746 ;	lcdCommands.c:219: goToAddr(lookUpTable[0][4]);
      0005F5 90r01rF8         [24] 1747 	mov	dptr,#(_lookUpTable + 0x0004)
      0005F8 E4               [12] 1748 	clr	a
      0005F9 93               [24] 1749 	movc	a,@a+dptr
      0005FA F5 82            [12] 1750 	mov	dpl,a
      0005FC 12r00rAD         [24] 1751 	lcall	_goToAddr
                                   1752 ;	lcdCommands.c:220: lcdPutCh('*');
      0005FF 75 82 2A         [24] 1753 	mov	dpl,#0x2a
      000602 12r00r8B         [24] 1754 	lcall	_lcdPutCh
                                   1755 ;	lcdCommands.c:221: goToAddr(lookUpTable[0][5]);
      000605 90r01rF9         [24] 1756 	mov	dptr,#(_lookUpTable + 0x0005)
      000608 E4               [12] 1757 	clr	a
      000609 93               [24] 1758 	movc	a,@a+dptr
      00060A F5 82            [12] 1759 	mov	dpl,a
      00060C 12r00rAD         [24] 1760 	lcall	_goToAddr
                                   1761 ;	lcdCommands.c:222: lcdPutCh('*');
      00060F 75 82 2A         [24] 1762 	mov	dpl,#0x2a
      000612 12r00r8B         [24] 1763 	lcall	_lcdPutCh
                                   1764 ;	lcdCommands.c:223: goToAddr(lookUpTable[0][8]);
      000615 90r01rFC         [24] 1765 	mov	dptr,#(_lookUpTable + 0x0008)
      000618 E4               [12] 1766 	clr	a
      000619 93               [24] 1767 	movc	a,@a+dptr
      00061A F5 82            [12] 1768 	mov	dpl,a
      00061C 12r00rAD         [24] 1769 	lcall	_goToAddr
                                   1770 ;	lcdCommands.c:224: lcdPutCh('*');
      00061F 75 82 2A         [24] 1771 	mov	dpl,#0x2a
      000622 12r00r8B         [24] 1772 	lcall	_lcdPutCh
                                   1773 ;	lcdCommands.c:225: goToAddr(lookUpTable[0][12]);
      000625 90r02r00         [24] 1774 	mov	dptr,#(_lookUpTable + 0x000c)
      000628 E4               [12] 1775 	clr	a
      000629 93               [24] 1776 	movc	a,@a+dptr
      00062A F5 82            [12] 1777 	mov	dpl,a
      00062C 12r00rAD         [24] 1778 	lcall	_goToAddr
                                   1779 ;	lcdCommands.c:226: lcdPutCh('*');
      00062F 75 82 2A         [24] 1780 	mov	dpl,#0x2a
      000632 12r00r8B         [24] 1781 	lcall	_lcdPutCh
                                   1782 ;	lcdCommands.c:227: goToAddr(lookUpTable[0][13]);
      000635 90r02r01         [24] 1783 	mov	dptr,#(_lookUpTable + 0x000d)
      000638 E4               [12] 1784 	clr	a
      000639 93               [24] 1785 	movc	a,@a+dptr
      00063A F5 82            [12] 1786 	mov	dpl,a
      00063C 12r00rAD         [24] 1787 	lcall	_goToAddr
                                   1788 ;	lcdCommands.c:228: lcdPutCh('*');
      00063F 75 82 2A         [24] 1789 	mov	dpl,#0x2a
      000642 12r00r8B         [24] 1790 	lcall	_lcdPutCh
                                   1791 ;	lcdCommands.c:229: goToAddr(lookUpTable[0][14]);
      000645 90r02r02         [24] 1792 	mov	dptr,#(_lookUpTable + 0x000e)
      000648 E4               [12] 1793 	clr	a
      000649 93               [24] 1794 	movc	a,@a+dptr
      00064A F5 82            [12] 1795 	mov	dpl,a
      00064C 12r00rAD         [24] 1796 	lcall	_goToAddr
                                   1797 ;	lcdCommands.c:230: lcdPutCh('*');
      00064F 75 82 2A         [24] 1798 	mov	dpl,#0x2a
      000652 12r00r8B         [24] 1799 	lcall	_lcdPutCh
                                   1800 ;	lcdCommands.c:231: goToAddr(lookUpTable[1][2]);
      000655 90r02r06         [24] 1801 	mov	dptr,#(_lookUpTable + 0x0012)
      000658 E4               [12] 1802 	clr	a
      000659 93               [24] 1803 	movc	a,@a+dptr
      00065A F5 82            [12] 1804 	mov	dpl,a
      00065C 12r00rAD         [24] 1805 	lcall	_goToAddr
                                   1806 ;	lcdCommands.c:232: lcdPutCh('*');
      00065F 75 82 2A         [24] 1807 	mov	dpl,#0x2a
      000662 12r00r8B         [24] 1808 	lcall	_lcdPutCh
                                   1809 ;	lcdCommands.c:233: goToAddr(lookUpTable[1][3]);
      000665 90r02r07         [24] 1810 	mov	dptr,#(_lookUpTable + 0x0013)
      000668 E4               [12] 1811 	clr	a
      000669 93               [24] 1812 	movc	a,@a+dptr
      00066A F5 82            [12] 1813 	mov	dpl,a
      00066C 12r00rAD         [24] 1814 	lcall	_goToAddr
                                   1815 ;	lcdCommands.c:234: lcdPutCh('*');
      00066F 75 82 2A         [24] 1816 	mov	dpl,#0x2a
      000672 12r00r8B         [24] 1817 	lcall	_lcdPutCh
                                   1818 ;	lcdCommands.c:235: goToAddr(lookUpTable[1][12]);
      000675 90r02r10         [24] 1819 	mov	dptr,#(_lookUpTable + 0x001c)
      000678 E4               [12] 1820 	clr	a
      000679 93               [24] 1821 	movc	a,@a+dptr
      00067A F5 82            [12] 1822 	mov	dpl,a
      00067C 12r00rAD         [24] 1823 	lcall	_goToAddr
                                   1824 ;	lcdCommands.c:236: lcdPutCh('*');
      00067F 75 82 2A         [24] 1825 	mov	dpl,#0x2a
      000682 12r00r8B         [24] 1826 	lcall	_lcdPutCh
                                   1827 ;	lcdCommands.c:237: printf_tiny("\n\rEnter w to go up, s to go down, a to go left and d to go right and q to quit\n\r");
      000685 74rF3            [12] 1828 	mov	a,#___str_11
      000687 C0 E0            [24] 1829 	push	acc
      000689 74s02            [12] 1830 	mov	a,#(___str_11 >> 8)
      00068B C0 E0            [24] 1831 	push	acc
      00068D 12r00r00         [24] 1832 	lcall	_printf_tiny
      000690 15 81            [12] 1833 	dec	sp
      000692 15 81            [12] 1834 	dec	sp
                                   1835 ;	lcdCommands.c:238: do{
      000694                       1836 00118$:
                                   1837 ;	lcdCommands.c:239: goToAddr(lookUpTable[3][0]);
      000694 90r02r24         [24] 1838 	mov	dptr,#(_lookUpTable + 0x0030)
      000697 E4               [12] 1839 	clr	a
      000698 93               [24] 1840 	movc	a,@a+dptr
      000699 F5 82            [12] 1841 	mov	dpl,a
      00069B 12r00rAD         [24] 1842 	lcall	_goToAddr
                                   1843 ;	lcdCommands.c:240: lcdPutCh(count + '0');
      00069E 90r00r19         [24] 1844 	mov	dptr,#_gamePacman_count_65538_115
      0006A1 E0               [24] 1845 	movx	a,@dptr
      0006A2 FF               [12] 1846 	mov	r7,a
      0006A3 24 30            [12] 1847 	add	a,#0x30
      0006A5 F5 82            [12] 1848 	mov	dpl,a
      0006A7 C0 07            [24] 1849 	push	ar7
      0006A9 12r00r8B         [24] 1850 	lcall	_lcdPutCh
      0006AC D0 07            [24] 1851 	pop	ar7
                                   1852 ;	lcdCommands.c:241: if(count == 9)
      0006AE BF 09 0F         [24] 1853 	cjne	r7,#0x09,00105$
                                   1854 ;	lcdCommands.c:243: lcdClear();
      0006B1 12r00rA0         [24] 1855 	lcall	_lcdClear
                                   1856 ;	lcdCommands.c:244: putsLCD("GAME OVER! PRESS p to restart");
      0006B4 90r03r44         [24] 1857 	mov	dptr,#___str_12
      0006B7 75 F0 80         [24] 1858 	mov	b,#0x80
      0006BA 12r01rDF         [24] 1859 	lcall	_putsLCD
                                   1860 ;	lcdCommands.c:245: printMenu();
                                   1861 ;	lcdCommands.c:246: break;
      0006BD 02r0Cr69         [24] 1862 	ljmp	_printMenu
      0006C0                       1863 00105$:
                                   1864 ;	lcdCommands.c:249: ch = getchar();
      0006C0 C0 07            [24] 1865 	push	ar7
      0006C2 12r00r00         [24] 1866 	lcall	_getchar
      0006C5 AD 82            [24] 1867 	mov	r5,dpl
      0006C7 AE 83            [24] 1868 	mov	r6,dph
      0006C9 D0 07            [24] 1869 	pop	ar7
                                   1870 ;	lcdCommands.c:250: if(ch == 'd')
      0006CB BD 64 02         [24] 1871 	cjne	r5,#0x64,00167$
      0006CE 80 03            [24] 1872 	sjmp	00168$
      0006D0                       1873 00167$:
      0006D0 02r07rAD         [24] 1874 	ljmp	00111$
      0006D3                       1875 00168$:
                                   1876 ;	lcdCommands.c:252: goToAddr(lookUpTable[0][i-1]);
      0006D3 90r00r17         [24] 1877 	mov	dptr,#_gamePacman_i_65538_115
      0006D6 E0               [24] 1878 	movx	a,@dptr
      0006D7 FC               [12] 1879 	mov	r4,a
      0006D8 A3               [24] 1880 	inc	dptr
      0006D9 E0               [24] 1881 	movx	a,@dptr
      0006DA FE               [12] 1882 	mov	r6,a
      0006DB 8C 03            [24] 1883 	mov	ar3,r4
      0006DD EB               [12] 1884 	mov	a,r3
      0006DE 14               [12] 1885 	dec	a
      0006DF 90r01rF4         [24] 1886 	mov	dptr,#_lookUpTable
      0006E2 93               [24] 1887 	movc	a,@a+dptr
      0006E3 F5 82            [12] 1888 	mov	dpl,a
      0006E5 C0 07            [24] 1889 	push	ar7
      0006E7 C0 06            [24] 1890 	push	ar6
      0006E9 C0 05            [24] 1891 	push	ar5
      0006EB C0 04            [24] 1892 	push	ar4
      0006ED 12r00rAD         [24] 1893 	lcall	_goToAddr
                                   1894 ;	lcdCommands.c:253: busyWait();
      0006F0 12r00r1E         [24] 1895 	lcall	_busyWait
                                   1896 ;	lcdCommands.c:254: lcdPutCh(' ');
      0006F3 75 82 20         [24] 1897 	mov	dpl,#0x20
      0006F6 12r00r8B         [24] 1898 	lcall	_lcdPutCh
                                   1899 ;	lcdCommands.c:255: busyWait();
      0006F9 12r00r1E         [24] 1900 	lcall	_busyWait
      0006FC D0 04            [24] 1901 	pop	ar4
      0006FE D0 05            [24] 1902 	pop	ar5
      000700 D0 06            [24] 1903 	pop	ar6
                                   1904 ;	lcdCommands.c:256: goToAddr(lookUpTable[0][i]);
      000702 EC               [12] 1905 	mov	a,r4
      000703 24rF4            [12] 1906 	add	a,#_lookUpTable
      000705 F5 82            [12] 1907 	mov	dpl,a
      000707 EE               [12] 1908 	mov	a,r6
      000708 34s01            [12] 1909 	addc	a,#(_lookUpTable >> 8)
      00070A F5 83            [12] 1910 	mov	dph,a
      00070C E4               [12] 1911 	clr	a
      00070D 93               [24] 1912 	movc	a,@a+dptr
      00070E F5 82            [12] 1913 	mov	dpl,a
      000710 C0 05            [24] 1914 	push	ar5
      000712 12r00rAD         [24] 1915 	lcall	_goToAddr
                                   1916 ;	lcdCommands.c:257: busyWait();
      000715 12r00r1E         [24] 1917 	lcall	_busyWait
                                   1918 ;	lcdCommands.c:258: char checkEnter = readLCD();
      000718 12r01rCB         [24] 1919 	lcall	_readLCD
      00071B AE 82            [24] 1920 	mov	r6,dpl
      00071D D0 05            [24] 1921 	pop	ar5
      00071F D0 07            [24] 1922 	pop	ar7
                                   1923 ;	lcdCommands.c:259: if(checkEnter == '*')
      000721 BE 2A 10         [24] 1924 	cjne	r6,#0x2a,00107$
                                   1925 ;	lcdCommands.c:261: count++;
      000724 90r00r19         [24] 1926 	mov	dptr,#_gamePacman_count_65538_115
      000727 EF               [12] 1927 	mov	a,r7
      000728 04               [12] 1928 	inc	a
      000729 F0               [24] 1929 	movx	@dptr,a
                                   1930 ;	lcdCommands.c:262: putchar(7);
      00072A 90 00 07         [24] 1931 	mov	dptr,#0x0007
      00072D C0 05            [24] 1932 	push	ar5
      00072F 12r00r00         [24] 1933 	lcall	_putchar
      000732 D0 05            [24] 1934 	pop	ar5
      000734                       1935 00107$:
                                   1936 ;	lcdCommands.c:264: busyWait();
      000734 C0 05            [24] 1937 	push	ar5
      000736 12r00r1E         [24] 1938 	lcall	_busyWait
      000739 D0 05            [24] 1939 	pop	ar5
                                   1940 ;	lcdCommands.c:265: lcdGeneral = 0x80 | (lookUpTable[0][i]);
      00073B 90r00r17         [24] 1941 	mov	dptr,#_gamePacman_i_65538_115
      00073E E0               [24] 1942 	movx	a,@dptr
      00073F FE               [12] 1943 	mov	r6,a
      000740 A3               [24] 1944 	inc	dptr
      000741 E0               [24] 1945 	movx	a,@dptr
      000742 FF               [12] 1946 	mov	r7,a
      000743 EE               [12] 1947 	mov	a,r6
      000744 24rF4            [12] 1948 	add	a,#_lookUpTable
      000746 F5 82            [12] 1949 	mov	dpl,a
      000748 EF               [12] 1950 	mov	a,r7
      000749 34s01            [12] 1951 	addc	a,#(_lookUpTable >> 8)
      00074B F5 83            [12] 1952 	mov	dph,a
      00074D E4               [12] 1953 	clr	a
      00074E 93               [24] 1954 	movc	a,@a+dptr
      00074F FC               [12] 1955 	mov	r4,a
      000750 7B 00            [12] 1956 	mov	r3,#0x00
      000752 90 F0 00         [24] 1957 	mov	dptr,#_lcdGeneral
      000755 74 80            [12] 1958 	mov	a,#0x80
      000757 4C               [12] 1959 	orl	a,r4
      000758 F0               [24] 1960 	movx	@dptr,a
      000759 EB               [12] 1961 	mov	a,r3
      00075A A3               [24] 1962 	inc	dptr
      00075B F0               [24] 1963 	movx	@dptr,a
                                   1964 ;	lcdCommands.c:266: busyWait();
      00075C C0 07            [24] 1965 	push	ar7
      00075E C0 06            [24] 1966 	push	ar6
      000760 C0 05            [24] 1967 	push	ar5
      000762 12r00r1E         [24] 1968 	lcall	_busyWait
                                   1969 ;	lcdCommands.c:267: writeCharacter = 0x00;
      000765 90 F1 00         [24] 1970 	mov	dptr,#_writeCharacter
      000768 E4               [12] 1971 	clr	a
      000769 F0               [24] 1972 	movx	@dptr,a
      00076A A3               [24] 1973 	inc	dptr
      00076B F0               [24] 1974 	movx	@dptr,a
                                   1975 ;	lcdCommands.c:268: busyWait();
      00076C 12r00r1E         [24] 1976 	lcall	_busyWait
      00076F D0 05            [24] 1977 	pop	ar5
      000771 D0 06            [24] 1978 	pop	ar6
      000773 D0 07            [24] 1979 	pop	ar7
                                   1980 ;	lcdCommands.c:269: if(i >= 47)
      000775 C3               [12] 1981 	clr	c
      000776 EE               [12] 1982 	mov	a,r6
      000777 94 2F            [12] 1983 	subb	a,#0x2f
      000779 EF               [12] 1984 	mov	a,r7
      00077A 64 80            [12] 1985 	xrl	a,#0x80
      00077C 94 80            [12] 1986 	subb	a,#0x80
      00077E 40 21            [24] 1987 	jc	00109$
                                   1988 ;	lcdCommands.c:271: goToAddr(lookUpTable[2][15]);
      000780 90r02r23         [24] 1989 	mov	dptr,#(_lookUpTable + 0x002f)
      000783 E4               [12] 1990 	clr	a
      000784 93               [24] 1991 	movc	a,@a+dptr
      000785 F5 82            [12] 1992 	mov	dpl,a
      000787 C0 05            [24] 1993 	push	ar5
      000789 12r00rAD         [24] 1994 	lcall	_goToAddr
                                   1995 ;	lcdCommands.c:272: busyWait();
      00078C 12r00r1E         [24] 1996 	lcall	_busyWait
                                   1997 ;	lcdCommands.c:273: lcdPutCh(' ');
      00078F 75 82 20         [24] 1998 	mov	dpl,#0x20
      000792 12r00r8B         [24] 1999 	lcall	_lcdPutCh
                                   2000 ;	lcdCommands.c:274: busyWait();
      000795 12r00r1E         [24] 2001 	lcall	_busyWait
      000798 D0 05            [24] 2002 	pop	ar5
                                   2003 ;	lcdCommands.c:275: i = 0;
      00079A 90r00r17         [24] 2004 	mov	dptr,#_gamePacman_i_65538_115
      00079D E4               [12] 2005 	clr	a
      00079E F0               [24] 2006 	movx	@dptr,a
      00079F A3               [24] 2007 	inc	dptr
      0007A0 F0               [24] 2008 	movx	@dptr,a
      0007A1                       2009 00109$:
                                   2010 ;	lcdCommands.c:277: i++;
      0007A1 90r00r17         [24] 2011 	mov	dptr,#_gamePacman_i_65538_115
      0007A4 E0               [24] 2012 	movx	a,@dptr
      0007A5 24 01            [12] 2013 	add	a,#0x01
      0007A7 F0               [24] 2014 	movx	@dptr,a
      0007A8 A3               [24] 2015 	inc	dptr
      0007A9 E0               [24] 2016 	movx	a,@dptr
      0007AA 34 00            [12] 2017 	addc	a,#0x00
      0007AC F0               [24] 2018 	movx	@dptr,a
      0007AD                       2019 00111$:
                                   2020 ;	lcdCommands.c:279: i--;
      0007AD 90r00r17         [24] 2021 	mov	dptr,#_gamePacman_i_65538_115
      0007B0 E0               [24] 2022 	movx	a,@dptr
      0007B1 24 FF            [12] 2023 	add	a,#0xff
      0007B3 FE               [12] 2024 	mov	r6,a
      0007B4 A3               [24] 2025 	inc	dptr
      0007B5 E0               [24] 2026 	movx	a,@dptr
      0007B6 34 FF            [12] 2027 	addc	a,#0xff
      0007B8 FF               [12] 2028 	mov	r7,a
      0007B9 90r00r17         [24] 2029 	mov	dptr,#_gamePacman_i_65538_115
      0007BC EE               [12] 2030 	mov	a,r6
      0007BD F0               [24] 2031 	movx	@dptr,a
      0007BE EF               [12] 2032 	mov	a,r7
      0007BF A3               [24] 2033 	inc	dptr
      0007C0 F0               [24] 2034 	movx	@dptr,a
                                   2035 ;	lcdCommands.c:281: if(ch == 'a')
      0007C1 BD 61 02         [24] 2036 	cjne	r5,#0x61,00172$
      0007C4 80 03            [24] 2037 	sjmp	00173$
      0007C6                       2038 00172$:
      0007C6 02r08rAF         [24] 2039 	ljmp	00117$
      0007C9                       2040 00173$:
                                   2041 ;	lcdCommands.c:283: goToAddr(lookUpTable[0][i+1]);
      0007C9 90r00r17         [24] 2042 	mov	dptr,#_gamePacman_i_65538_115
      0007CC E0               [24] 2043 	movx	a,@dptr
      0007CD FE               [12] 2044 	mov	r6,a
      0007CE A3               [24] 2045 	inc	dptr
      0007CF E0               [24] 2046 	movx	a,@dptr
      0007D0 FF               [12] 2047 	mov	r7,a
      0007D1 8E 04            [24] 2048 	mov	ar4,r6
      0007D3 EC               [12] 2049 	mov	a,r4
      0007D4 04               [12] 2050 	inc	a
      0007D5 90r01rF4         [24] 2051 	mov	dptr,#_lookUpTable
      0007D8 93               [24] 2052 	movc	a,@a+dptr
      0007D9 F5 82            [12] 2053 	mov	dpl,a
      0007DB C0 07            [24] 2054 	push	ar7
      0007DD C0 06            [24] 2055 	push	ar6
      0007DF C0 05            [24] 2056 	push	ar5
      0007E1 12r00rAD         [24] 2057 	lcall	_goToAddr
                                   2058 ;	lcdCommands.c:284: busyWait();
      0007E4 12r00r1E         [24] 2059 	lcall	_busyWait
                                   2060 ;	lcdCommands.c:285: lcdPutCh(' ');
      0007E7 75 82 20         [24] 2061 	mov	dpl,#0x20
      0007EA 12r00r8B         [24] 2062 	lcall	_lcdPutCh
                                   2063 ;	lcdCommands.c:286: busyWait();
      0007ED 12r00r1E         [24] 2064 	lcall	_busyWait
      0007F0 D0 05            [24] 2065 	pop	ar5
      0007F2 D0 06            [24] 2066 	pop	ar6
      0007F4 D0 07            [24] 2067 	pop	ar7
                                   2068 ;	lcdCommands.c:287: goToAddr(lookUpTable[0][i]);
      0007F6 EE               [12] 2069 	mov	a,r6
      0007F7 24rF4            [12] 2070 	add	a,#_lookUpTable
      0007F9 F5 82            [12] 2071 	mov	dpl,a
      0007FB EF               [12] 2072 	mov	a,r7
      0007FC 34s01            [12] 2073 	addc	a,#(_lookUpTable >> 8)
      0007FE F5 83            [12] 2074 	mov	dph,a
      000800 E4               [12] 2075 	clr	a
      000801 93               [24] 2076 	movc	a,@a+dptr
      000802 F5 82            [12] 2077 	mov	dpl,a
      000804 C0 05            [24] 2078 	push	ar5
      000806 12r00rAD         [24] 2079 	lcall	_goToAddr
                                   2080 ;	lcdCommands.c:288: busyWait();
      000809 12r00r1E         [24] 2081 	lcall	_busyWait
                                   2082 ;	lcdCommands.c:289: char checkEnter1 = readLCD();
      00080C 12r01rCB         [24] 2083 	lcall	_readLCD
      00080F AF 82            [24] 2084 	mov	r7,dpl
      000811 D0 05            [24] 2085 	pop	ar5
                                   2086 ;	lcdCommands.c:290: if(checkEnter1 == '*')
      000813 BF 2A 11         [24] 2087 	cjne	r7,#0x2a,00113$
                                   2088 ;	lcdCommands.c:292: count++;
      000816 90r00r19         [24] 2089 	mov	dptr,#_gamePacman_count_65538_115
      000819 E0               [24] 2090 	movx	a,@dptr
      00081A 24 01            [12] 2091 	add	a,#0x01
      00081C F0               [24] 2092 	movx	@dptr,a
                                   2093 ;	lcdCommands.c:293: putchar(7);
      00081D 90 00 07         [24] 2094 	mov	dptr,#0x0007
      000820 C0 05            [24] 2095 	push	ar5
      000822 12r00r00         [24] 2096 	lcall	_putchar
      000825 D0 05            [24] 2097 	pop	ar5
      000827                       2098 00113$:
                                   2099 ;	lcdCommands.c:295: busyWait();
      000827 C0 05            [24] 2100 	push	ar5
      000829 12r00r1E         [24] 2101 	lcall	_busyWait
      00082C D0 05            [24] 2102 	pop	ar5
                                   2103 ;	lcdCommands.c:296: lcdGeneral = 0x80 | (lookUpTable[0][i]);
      00082E 90r00r17         [24] 2104 	mov	dptr,#_gamePacman_i_65538_115
      000831 E0               [24] 2105 	movx	a,@dptr
      000832 FE               [12] 2106 	mov	r6,a
      000833 A3               [24] 2107 	inc	dptr
      000834 E0               [24] 2108 	movx	a,@dptr
      000835 FF               [12] 2109 	mov	r7,a
      000836 EE               [12] 2110 	mov	a,r6
      000837 24rF4            [12] 2111 	add	a,#_lookUpTable
      000839 F5 82            [12] 2112 	mov	dpl,a
      00083B EF               [12] 2113 	mov	a,r7
      00083C 34s01            [12] 2114 	addc	a,#(_lookUpTable >> 8)
      00083E F5 83            [12] 2115 	mov	dph,a
      000840 E4               [12] 2116 	clr	a
      000841 93               [24] 2117 	movc	a,@a+dptr
      000842 FC               [12] 2118 	mov	r4,a
      000843 7B 00            [12] 2119 	mov	r3,#0x00
      000845 90 F0 00         [24] 2120 	mov	dptr,#_lcdGeneral
      000848 74 80            [12] 2121 	mov	a,#0x80
      00084A 4C               [12] 2122 	orl	a,r4
      00084B F0               [24] 2123 	movx	@dptr,a
      00084C EB               [12] 2124 	mov	a,r3
      00084D A3               [24] 2125 	inc	dptr
      00084E F0               [24] 2126 	movx	@dptr,a
                                   2127 ;	lcdCommands.c:297: busyWait();
      00084F C0 07            [24] 2128 	push	ar7
      000851 C0 06            [24] 2129 	push	ar6
      000853 C0 05            [24] 2130 	push	ar5
      000855 12r00r1E         [24] 2131 	lcall	_busyWait
                                   2132 ;	lcdCommands.c:298: writeCharacter = 0x03;
      000858 90 F1 00         [24] 2133 	mov	dptr,#_writeCharacter
      00085B 74 03            [12] 2134 	mov	a,#0x03
      00085D F0               [24] 2135 	movx	@dptr,a
      00085E E4               [12] 2136 	clr	a
      00085F A3               [24] 2137 	inc	dptr
      000860 F0               [24] 2138 	movx	@dptr,a
                                   2139 ;	lcdCommands.c:299: busyWait();
      000861 12r00r1E         [24] 2140 	lcall	_busyWait
      000864 D0 05            [24] 2141 	pop	ar5
      000866 D0 06            [24] 2142 	pop	ar6
      000868 D0 07            [24] 2143 	pop	ar7
                                   2144 ;	lcdCommands.c:300: if( i <= 0)
      00086A C3               [12] 2145 	clr	c
      00086B E4               [12] 2146 	clr	a
      00086C 9E               [12] 2147 	subb	a,r6
      00086D 74 80            [12] 2148 	mov	a,#(0x00 ^ 0x80)
      00086F 8F F0            [24] 2149 	mov	b,r7
      000871 63 F0 80         [24] 2150 	xrl	b,#0x80
      000874 95 F0            [12] 2151 	subb	a,b
      000876 40 23            [24] 2152 	jc	00115$
                                   2153 ;	lcdCommands.c:302: goToAddr(lookUpTable[0][0]);
      000878 90r01rF4         [24] 2154 	mov	dptr,#_lookUpTable
      00087B E4               [12] 2155 	clr	a
      00087C 93               [24] 2156 	movc	a,@a+dptr
      00087D F5 82            [12] 2157 	mov	dpl,a
      00087F C0 05            [24] 2158 	push	ar5
      000881 12r00rAD         [24] 2159 	lcall	_goToAddr
                                   2160 ;	lcdCommands.c:303: busyWait();
      000884 12r00r1E         [24] 2161 	lcall	_busyWait
                                   2162 ;	lcdCommands.c:304: lcdPutCh(' ');
      000887 75 82 20         [24] 2163 	mov	dpl,#0x20
      00088A 12r00r8B         [24] 2164 	lcall	_lcdPutCh
                                   2165 ;	lcdCommands.c:305: busyWait();
      00088D 12r00r1E         [24] 2166 	lcall	_busyWait
      000890 D0 05            [24] 2167 	pop	ar5
                                   2168 ;	lcdCommands.c:306: i = 47;
      000892 90r00r17         [24] 2169 	mov	dptr,#_gamePacman_i_65538_115
      000895 74 2F            [12] 2170 	mov	a,#0x2f
      000897 F0               [24] 2171 	movx	@dptr,a
      000898 E4               [12] 2172 	clr	a
      000899 A3               [24] 2173 	inc	dptr
      00089A F0               [24] 2174 	movx	@dptr,a
      00089B                       2175 00115$:
                                   2176 ;	lcdCommands.c:308: i--;
      00089B 90r00r17         [24] 2177 	mov	dptr,#_gamePacman_i_65538_115
      00089E E0               [24] 2178 	movx	a,@dptr
      00089F 24 FF            [12] 2179 	add	a,#0xff
      0008A1 FE               [12] 2180 	mov	r6,a
      0008A2 A3               [24] 2181 	inc	dptr
      0008A3 E0               [24] 2182 	movx	a,@dptr
      0008A4 34 FF            [12] 2183 	addc	a,#0xff
      0008A6 FF               [12] 2184 	mov	r7,a
      0008A7 90r00r17         [24] 2185 	mov	dptr,#_gamePacman_i_65538_115
      0008AA EE               [12] 2186 	mov	a,r6
      0008AB F0               [24] 2187 	movx	@dptr,a
      0008AC EF               [12] 2188 	mov	a,r7
      0008AD A3               [24] 2189 	inc	dptr
      0008AE F0               [24] 2190 	movx	@dptr,a
      0008AF                       2191 00117$:
                                   2192 ;	lcdCommands.c:310: i++;
      0008AF 90r00r17         [24] 2193 	mov	dptr,#_gamePacman_i_65538_115
      0008B2 E0               [24] 2194 	movx	a,@dptr
      0008B3 24 01            [12] 2195 	add	a,#0x01
      0008B5 F0               [24] 2196 	movx	@dptr,a
      0008B6 A3               [24] 2197 	inc	dptr
      0008B7 E0               [24] 2198 	movx	a,@dptr
      0008B8 34 00            [12] 2199 	addc	a,#0x00
      0008BA F0               [24] 2200 	movx	@dptr,a
                                   2201 ;	lcdCommands.c:311: }while(ch != 'q');
      0008BB BD 71 01         [24] 2202 	cjne	r5,#0x71,00177$
      0008BE 22               [24] 2203 	ret
      0008BF                       2204 00177$:
      0008BF 02r06r94         [24] 2205 	ljmp	00118$
                                   2206 ;	lcdCommands.c:312: }
      0008C2 22               [24] 2207 	ret
                                   2208 ;------------------------------------------------------------
                                   2209 ;Allocation info for local variables in function 'makePacmanRight'
                                   2210 ;------------------------------------------------------------
                                   2211 ;	lcdCommands.c:314: void makePacmanRight()
                                   2212 ;	-----------------------------------------
                                   2213 ;	 function makePacmanRight
                                   2214 ;	-----------------------------------------
      0008C3                       2215 _makePacmanRight:
                                   2216 ;	lcdCommands.c:316: busyWait();
      0008C3 12r00r1E         [24] 2217 	lcall	_busyWait
                                   2218 ;	lcdCommands.c:317: lcdGeneral = 0x40 | 0x00;
      0008C6 90 F0 00         [24] 2219 	mov	dptr,#_lcdGeneral
      0008C9 74 40            [12] 2220 	mov	a,#0x40
      0008CB F0               [24] 2221 	movx	@dptr,a
      0008CC E4               [12] 2222 	clr	a
      0008CD A3               [24] 2223 	inc	dptr
      0008CE F0               [24] 2224 	movx	@dptr,a
                                   2225 ;	lcdCommands.c:318: busyWait();
      0008CF 12r00r1E         [24] 2226 	lcall	_busyWait
                                   2227 ;	lcdCommands.c:319: writeCharacter = 0x06;
      0008D2 90 F1 00         [24] 2228 	mov	dptr,#_writeCharacter
      0008D5 74 06            [12] 2229 	mov	a,#0x06
      0008D7 F0               [24] 2230 	movx	@dptr,a
      0008D8 E4               [12] 2231 	clr	a
      0008D9 A3               [24] 2232 	inc	dptr
      0008DA F0               [24] 2233 	movx	@dptr,a
                                   2234 ;	lcdCommands.c:320: busyWait();
      0008DB 12r00r1E         [24] 2235 	lcall	_busyWait
                                   2236 ;	lcdCommands.c:321: lcdGeneral = 0x40 | 0x01;
      0008DE 90 F0 00         [24] 2237 	mov	dptr,#_lcdGeneral
      0008E1 74 41            [12] 2238 	mov	a,#0x41
      0008E3 F0               [24] 2239 	movx	@dptr,a
      0008E4 E4               [12] 2240 	clr	a
      0008E5 A3               [24] 2241 	inc	dptr
      0008E6 F0               [24] 2242 	movx	@dptr,a
                                   2243 ;	lcdCommands.c:322: busyWait();
      0008E7 12r00r1E         [24] 2244 	lcall	_busyWait
                                   2245 ;	lcdCommands.c:323: writeCharacter = 0x09;
      0008EA 90 F1 00         [24] 2246 	mov	dptr,#_writeCharacter
      0008ED 74 09            [12] 2247 	mov	a,#0x09
      0008EF F0               [24] 2248 	movx	@dptr,a
      0008F0 E4               [12] 2249 	clr	a
      0008F1 A3               [24] 2250 	inc	dptr
      0008F2 F0               [24] 2251 	movx	@dptr,a
                                   2252 ;	lcdCommands.c:324: busyWait();
      0008F3 12r00r1E         [24] 2253 	lcall	_busyWait
                                   2254 ;	lcdCommands.c:325: lcdGeneral = 0x40 | 0x02;
      0008F6 90 F0 00         [24] 2255 	mov	dptr,#_lcdGeneral
      0008F9 74 42            [12] 2256 	mov	a,#0x42
      0008FB F0               [24] 2257 	movx	@dptr,a
      0008FC E4               [12] 2258 	clr	a
      0008FD A3               [24] 2259 	inc	dptr
      0008FE F0               [24] 2260 	movx	@dptr,a
                                   2261 ;	lcdCommands.c:326: busyWait();
      0008FF 12r00r1E         [24] 2262 	lcall	_busyWait
                                   2263 ;	lcdCommands.c:327: writeCharacter = 0x12;
      000902 90 F1 00         [24] 2264 	mov	dptr,#_writeCharacter
      000905 74 12            [12] 2265 	mov	a,#0x12
      000907 F0               [24] 2266 	movx	@dptr,a
      000908 E4               [12] 2267 	clr	a
      000909 A3               [24] 2268 	inc	dptr
      00090A F0               [24] 2269 	movx	@dptr,a
                                   2270 ;	lcdCommands.c:328: busyWait();
      00090B 12r00r1E         [24] 2271 	lcall	_busyWait
                                   2272 ;	lcdCommands.c:329: lcdGeneral = 0x40 | 0x03;
      00090E 90 F0 00         [24] 2273 	mov	dptr,#_lcdGeneral
      000911 74 43            [12] 2274 	mov	a,#0x43
      000913 F0               [24] 2275 	movx	@dptr,a
      000914 E4               [12] 2276 	clr	a
      000915 A3               [24] 2277 	inc	dptr
      000916 F0               [24] 2278 	movx	@dptr,a
                                   2279 ;	lcdCommands.c:330: busyWait();
      000917 12r00r1E         [24] 2280 	lcall	_busyWait
                                   2281 ;	lcdCommands.c:331: writeCharacter = 0x14;
      00091A 90 F1 00         [24] 2282 	mov	dptr,#_writeCharacter
      00091D 74 14            [12] 2283 	mov	a,#0x14
      00091F F0               [24] 2284 	movx	@dptr,a
      000920 E4               [12] 2285 	clr	a
      000921 A3               [24] 2286 	inc	dptr
      000922 F0               [24] 2287 	movx	@dptr,a
                                   2288 ;	lcdCommands.c:332: busyWait();
      000923 12r00r1E         [24] 2289 	lcall	_busyWait
                                   2290 ;	lcdCommands.c:333: lcdGeneral = 0x40 | 0x04;
      000926 90 F0 00         [24] 2291 	mov	dptr,#_lcdGeneral
      000929 74 44            [12] 2292 	mov	a,#0x44
      00092B F0               [24] 2293 	movx	@dptr,a
      00092C E4               [12] 2294 	clr	a
      00092D A3               [24] 2295 	inc	dptr
      00092E F0               [24] 2296 	movx	@dptr,a
                                   2297 ;	lcdCommands.c:334: busyWait();
      00092F 12r00r1E         [24] 2298 	lcall	_busyWait
                                   2299 ;	lcdCommands.c:335: writeCharacter = 0x14;
      000932 90 F1 00         [24] 2300 	mov	dptr,#_writeCharacter
      000935 74 14            [12] 2301 	mov	a,#0x14
      000937 F0               [24] 2302 	movx	@dptr,a
      000938 E4               [12] 2303 	clr	a
      000939 A3               [24] 2304 	inc	dptr
      00093A F0               [24] 2305 	movx	@dptr,a
                                   2306 ;	lcdCommands.c:336: busyWait();
      00093B 12r00r1E         [24] 2307 	lcall	_busyWait
                                   2308 ;	lcdCommands.c:337: lcdGeneral = 0x40 | 0x05;
      00093E 90 F0 00         [24] 2309 	mov	dptr,#_lcdGeneral
      000941 74 45            [12] 2310 	mov	a,#0x45
      000943 F0               [24] 2311 	movx	@dptr,a
      000944 E4               [12] 2312 	clr	a
      000945 A3               [24] 2313 	inc	dptr
      000946 F0               [24] 2314 	movx	@dptr,a
                                   2315 ;	lcdCommands.c:338: busyWait();
      000947 12r00r1E         [24] 2316 	lcall	_busyWait
                                   2317 ;	lcdCommands.c:339: writeCharacter = 0x12;
      00094A 90 F1 00         [24] 2318 	mov	dptr,#_writeCharacter
      00094D 74 12            [12] 2319 	mov	a,#0x12
      00094F F0               [24] 2320 	movx	@dptr,a
      000950 E4               [12] 2321 	clr	a
      000951 A3               [24] 2322 	inc	dptr
      000952 F0               [24] 2323 	movx	@dptr,a
                                   2324 ;	lcdCommands.c:340: busyWait();
      000953 12r00r1E         [24] 2325 	lcall	_busyWait
                                   2326 ;	lcdCommands.c:341: lcdGeneral = 0x40 | 0x06;
      000956 90 F0 00         [24] 2327 	mov	dptr,#_lcdGeneral
      000959 74 46            [12] 2328 	mov	a,#0x46
      00095B F0               [24] 2329 	movx	@dptr,a
      00095C E4               [12] 2330 	clr	a
      00095D A3               [24] 2331 	inc	dptr
      00095E F0               [24] 2332 	movx	@dptr,a
                                   2333 ;	lcdCommands.c:342: busyWait();
      00095F 12r00r1E         [24] 2334 	lcall	_busyWait
                                   2335 ;	lcdCommands.c:343: writeCharacter = 0x09;
      000962 90 F1 00         [24] 2336 	mov	dptr,#_writeCharacter
      000965 74 09            [12] 2337 	mov	a,#0x09
      000967 F0               [24] 2338 	movx	@dptr,a
      000968 E4               [12] 2339 	clr	a
      000969 A3               [24] 2340 	inc	dptr
      00096A F0               [24] 2341 	movx	@dptr,a
                                   2342 ;	lcdCommands.c:344: busyWait();
      00096B 12r00r1E         [24] 2343 	lcall	_busyWait
                                   2344 ;	lcdCommands.c:345: lcdGeneral = 0x40 | 0x07;
      00096E 90 F0 00         [24] 2345 	mov	dptr,#_lcdGeneral
      000971 74 47            [12] 2346 	mov	a,#0x47
      000973 F0               [24] 2347 	movx	@dptr,a
      000974 E4               [12] 2348 	clr	a
      000975 A3               [24] 2349 	inc	dptr
      000976 F0               [24] 2350 	movx	@dptr,a
                                   2351 ;	lcdCommands.c:346: busyWait();
      000977 12r00r1E         [24] 2352 	lcall	_busyWait
                                   2353 ;	lcdCommands.c:347: writeCharacter = 0x06;
      00097A 90 F1 00         [24] 2354 	mov	dptr,#_writeCharacter
      00097D 74 06            [12] 2355 	mov	a,#0x06
      00097F F0               [24] 2356 	movx	@dptr,a
      000980 E4               [12] 2357 	clr	a
      000981 A3               [24] 2358 	inc	dptr
      000982 F0               [24] 2359 	movx	@dptr,a
                                   2360 ;	lcdCommands.c:348: busyWait();
      000983 12r00r1E         [24] 2361 	lcall	_busyWait
                                   2362 ;	lcdCommands.c:349: goToXY(3,1);
      000986 90r00r02         [24] 2363 	mov	dptr,#_goToXY_PARM_2
      000989 74 01            [12] 2364 	mov	a,#0x01
      00098B F0               [24] 2365 	movx	@dptr,a
      00098C 75 82 03         [24] 2366 	mov	dpl,#0x03
      00098F 12r00rC8         [24] 2367 	lcall	_goToXY
                                   2368 ;	lcdCommands.c:350: busyWait();
      000992 12r00r1E         [24] 2369 	lcall	_busyWait
                                   2370 ;	lcdCommands.c:351: lcdGeneral = 0x80 | 0x00;
      000995 90 F0 00         [24] 2371 	mov	dptr,#_lcdGeneral
      000998 74 80            [12] 2372 	mov	a,#0x80
      00099A F0               [24] 2373 	movx	@dptr,a
      00099B E4               [12] 2374 	clr	a
      00099C A3               [24] 2375 	inc	dptr
      00099D F0               [24] 2376 	movx	@dptr,a
                                   2377 ;	lcdCommands.c:352: busyWait();
      00099E 12r00r1E         [24] 2378 	lcall	_busyWait
                                   2379 ;	lcdCommands.c:353: writeCharacter = 0x00;
      0009A1 90 F1 00         [24] 2380 	mov	dptr,#_writeCharacter
      0009A4 E4               [12] 2381 	clr	a
      0009A5 F0               [24] 2382 	movx	@dptr,a
      0009A6 A3               [24] 2383 	inc	dptr
      0009A7 F0               [24] 2384 	movx	@dptr,a
                                   2385 ;	lcdCommands.c:354: }
      0009A8 22               [24] 2386 	ret
                                   2387 ;------------------------------------------------------------
                                   2388 ;Allocation info for local variables in function 'makePacmanLeft'
                                   2389 ;------------------------------------------------------------
                                   2390 ;	lcdCommands.c:355: void makePacmanLeft()
                                   2391 ;	-----------------------------------------
                                   2392 ;	 function makePacmanLeft
                                   2393 ;	-----------------------------------------
      0009A9                       2394 _makePacmanLeft:
                                   2395 ;	lcdCommands.c:357: busyWait();
      0009A9 12r00r1E         [24] 2396 	lcall	_busyWait
                                   2397 ;	lcdCommands.c:358: lcdGeneral = 0x40 | 0x18;
      0009AC 90 F0 00         [24] 2398 	mov	dptr,#_lcdGeneral
      0009AF 74 58            [12] 2399 	mov	a,#0x58
      0009B1 F0               [24] 2400 	movx	@dptr,a
      0009B2 E4               [12] 2401 	clr	a
      0009B3 A3               [24] 2402 	inc	dptr
      0009B4 F0               [24] 2403 	movx	@dptr,a
                                   2404 ;	lcdCommands.c:359: busyWait();
      0009B5 12r00r1E         [24] 2405 	lcall	_busyWait
                                   2406 ;	lcdCommands.c:360: writeCharacter = 0x0C;
      0009B8 90 F1 00         [24] 2407 	mov	dptr,#_writeCharacter
      0009BB 74 0C            [12] 2408 	mov	a,#0x0c
      0009BD F0               [24] 2409 	movx	@dptr,a
      0009BE E4               [12] 2410 	clr	a
      0009BF A3               [24] 2411 	inc	dptr
      0009C0 F0               [24] 2412 	movx	@dptr,a
                                   2413 ;	lcdCommands.c:361: busyWait();
      0009C1 12r00r1E         [24] 2414 	lcall	_busyWait
                                   2415 ;	lcdCommands.c:362: lcdGeneral = 0x40 | 0x19;
      0009C4 90 F0 00         [24] 2416 	mov	dptr,#_lcdGeneral
      0009C7 74 59            [12] 2417 	mov	a,#0x59
      0009C9 F0               [24] 2418 	movx	@dptr,a
      0009CA E4               [12] 2419 	clr	a
      0009CB A3               [24] 2420 	inc	dptr
      0009CC F0               [24] 2421 	movx	@dptr,a
                                   2422 ;	lcdCommands.c:363: busyWait();
      0009CD 12r00r1E         [24] 2423 	lcall	_busyWait
                                   2424 ;	lcdCommands.c:364: writeCharacter = 0x12;
      0009D0 90 F1 00         [24] 2425 	mov	dptr,#_writeCharacter
      0009D3 74 12            [12] 2426 	mov	a,#0x12
      0009D5 F0               [24] 2427 	movx	@dptr,a
      0009D6 E4               [12] 2428 	clr	a
      0009D7 A3               [24] 2429 	inc	dptr
      0009D8 F0               [24] 2430 	movx	@dptr,a
                                   2431 ;	lcdCommands.c:365: busyWait();
      0009D9 12r00r1E         [24] 2432 	lcall	_busyWait
                                   2433 ;	lcdCommands.c:366: lcdGeneral = 0x40 | 0x1A;
      0009DC 90 F0 00         [24] 2434 	mov	dptr,#_lcdGeneral
      0009DF 74 5A            [12] 2435 	mov	a,#0x5a
      0009E1 F0               [24] 2436 	movx	@dptr,a
      0009E2 E4               [12] 2437 	clr	a
      0009E3 A3               [24] 2438 	inc	dptr
      0009E4 F0               [24] 2439 	movx	@dptr,a
                                   2440 ;	lcdCommands.c:367: busyWait();
      0009E5 12r00r1E         [24] 2441 	lcall	_busyWait
                                   2442 ;	lcdCommands.c:368: writeCharacter = 0x09;
      0009E8 90 F1 00         [24] 2443 	mov	dptr,#_writeCharacter
      0009EB 74 09            [12] 2444 	mov	a,#0x09
      0009ED F0               [24] 2445 	movx	@dptr,a
      0009EE E4               [12] 2446 	clr	a
      0009EF A3               [24] 2447 	inc	dptr
      0009F0 F0               [24] 2448 	movx	@dptr,a
                                   2449 ;	lcdCommands.c:369: busyWait();
      0009F1 12r00r1E         [24] 2450 	lcall	_busyWait
                                   2451 ;	lcdCommands.c:370: lcdGeneral = 0x40 | 0x1B;
      0009F4 90 F0 00         [24] 2452 	mov	dptr,#_lcdGeneral
      0009F7 74 5B            [12] 2453 	mov	a,#0x5b
      0009F9 F0               [24] 2454 	movx	@dptr,a
      0009FA E4               [12] 2455 	clr	a
      0009FB A3               [24] 2456 	inc	dptr
      0009FC F0               [24] 2457 	movx	@dptr,a
                                   2458 ;	lcdCommands.c:371: busyWait();
      0009FD 12r00r1E         [24] 2459 	lcall	_busyWait
                                   2460 ;	lcdCommands.c:372: writeCharacter = 0x05;
      000A00 90 F1 00         [24] 2461 	mov	dptr,#_writeCharacter
      000A03 74 05            [12] 2462 	mov	a,#0x05
      000A05 F0               [24] 2463 	movx	@dptr,a
      000A06 E4               [12] 2464 	clr	a
      000A07 A3               [24] 2465 	inc	dptr
      000A08 F0               [24] 2466 	movx	@dptr,a
                                   2467 ;	lcdCommands.c:373: busyWait();
      000A09 12r00r1E         [24] 2468 	lcall	_busyWait
                                   2469 ;	lcdCommands.c:374: lcdGeneral = 0x40 | 0x1C;
      000A0C 90 F0 00         [24] 2470 	mov	dptr,#_lcdGeneral
      000A0F 74 5C            [12] 2471 	mov	a,#0x5c
      000A11 F0               [24] 2472 	movx	@dptr,a
      000A12 E4               [12] 2473 	clr	a
      000A13 A3               [24] 2474 	inc	dptr
      000A14 F0               [24] 2475 	movx	@dptr,a
                                   2476 ;	lcdCommands.c:375: busyWait();
      000A15 12r00r1E         [24] 2477 	lcall	_busyWait
                                   2478 ;	lcdCommands.c:376: writeCharacter = 0x05;
      000A18 90 F1 00         [24] 2479 	mov	dptr,#_writeCharacter
      000A1B 74 05            [12] 2480 	mov	a,#0x05
      000A1D F0               [24] 2481 	movx	@dptr,a
      000A1E E4               [12] 2482 	clr	a
      000A1F A3               [24] 2483 	inc	dptr
      000A20 F0               [24] 2484 	movx	@dptr,a
                                   2485 ;	lcdCommands.c:377: busyWait();
      000A21 12r00r1E         [24] 2486 	lcall	_busyWait
                                   2487 ;	lcdCommands.c:378: lcdGeneral = 0x40 | 0x1D;
      000A24 90 F0 00         [24] 2488 	mov	dptr,#_lcdGeneral
      000A27 74 5D            [12] 2489 	mov	a,#0x5d
      000A29 F0               [24] 2490 	movx	@dptr,a
      000A2A E4               [12] 2491 	clr	a
      000A2B A3               [24] 2492 	inc	dptr
      000A2C F0               [24] 2493 	movx	@dptr,a
                                   2494 ;	lcdCommands.c:379: busyWait();
      000A2D 12r00r1E         [24] 2495 	lcall	_busyWait
                                   2496 ;	lcdCommands.c:380: writeCharacter = 0x09;
      000A30 90 F1 00         [24] 2497 	mov	dptr,#_writeCharacter
      000A33 74 09            [12] 2498 	mov	a,#0x09
      000A35 F0               [24] 2499 	movx	@dptr,a
      000A36 E4               [12] 2500 	clr	a
      000A37 A3               [24] 2501 	inc	dptr
      000A38 F0               [24] 2502 	movx	@dptr,a
                                   2503 ;	lcdCommands.c:381: busyWait();
      000A39 12r00r1E         [24] 2504 	lcall	_busyWait
                                   2505 ;	lcdCommands.c:382: lcdGeneral = 0x40 | 0x1E;
      000A3C 90 F0 00         [24] 2506 	mov	dptr,#_lcdGeneral
      000A3F 74 5E            [12] 2507 	mov	a,#0x5e
      000A41 F0               [24] 2508 	movx	@dptr,a
      000A42 E4               [12] 2509 	clr	a
      000A43 A3               [24] 2510 	inc	dptr
      000A44 F0               [24] 2511 	movx	@dptr,a
                                   2512 ;	lcdCommands.c:383: busyWait();
      000A45 12r00r1E         [24] 2513 	lcall	_busyWait
                                   2514 ;	lcdCommands.c:384: writeCharacter = 0x12;
      000A48 90 F1 00         [24] 2515 	mov	dptr,#_writeCharacter
      000A4B 74 12            [12] 2516 	mov	a,#0x12
      000A4D F0               [24] 2517 	movx	@dptr,a
      000A4E E4               [12] 2518 	clr	a
      000A4F A3               [24] 2519 	inc	dptr
      000A50 F0               [24] 2520 	movx	@dptr,a
                                   2521 ;	lcdCommands.c:385: busyWait();
      000A51 12r00r1E         [24] 2522 	lcall	_busyWait
                                   2523 ;	lcdCommands.c:386: lcdGeneral = 0x40 | 0x1F;
      000A54 90 F0 00         [24] 2524 	mov	dptr,#_lcdGeneral
      000A57 74 5F            [12] 2525 	mov	a,#0x5f
      000A59 F0               [24] 2526 	movx	@dptr,a
      000A5A E4               [12] 2527 	clr	a
      000A5B A3               [24] 2528 	inc	dptr
      000A5C F0               [24] 2529 	movx	@dptr,a
                                   2530 ;	lcdCommands.c:387: busyWait();
      000A5D 12r00r1E         [24] 2531 	lcall	_busyWait
                                   2532 ;	lcdCommands.c:388: writeCharacter = 0x0C;
      000A60 90 F1 00         [24] 2533 	mov	dptr,#_writeCharacter
      000A63 74 0C            [12] 2534 	mov	a,#0x0c
      000A65 F0               [24] 2535 	movx	@dptr,a
      000A66 E4               [12] 2536 	clr	a
      000A67 A3               [24] 2537 	inc	dptr
      000A68 F0               [24] 2538 	movx	@dptr,a
                                   2539 ;	lcdCommands.c:389: busyWait();
                                   2540 ;	lcdCommands.c:393: }
      000A69 02r00r1E         [24] 2541 	ljmp	_busyWait
                                   2542 ;------------------------------------------------------------
                                   2543 ;Allocation info for local variables in function 'printBinary'
                                   2544 ;------------------------------------------------------------
                                   2545 ;x                         Allocated with name '_printBinary_x_65536_128'
                                   2546 ;temp2                     Allocated with name '_printBinary_temp2_65536_129'
                                   2547 ;------------------------------------------------------------
                                   2548 ;	lcdCommands.c:395: void printBinary(int x)
                                   2549 ;	-----------------------------------------
                                   2550 ;	 function printBinary
                                   2551 ;	-----------------------------------------
      000A6C                       2552 _printBinary:
      000A6C AF 83            [24] 2553 	mov	r7,dph
      000A6E E5 82            [12] 2554 	mov	a,dpl
      000A70 90r00r1A         [24] 2555 	mov	dptr,#_printBinary_x_65536_128
      000A73 F0               [24] 2556 	movx	@dptr,a
      000A74 EF               [12] 2557 	mov	a,r7
      000A75 A3               [24] 2558 	inc	dptr
      000A76 F0               [24] 2559 	movx	@dptr,a
                                   2560 ;	lcdCommands.c:398: while(x != 0)
      000A77                       2561 00101$:
      000A77 90r00r1A         [24] 2562 	mov	dptr,#_printBinary_x_65536_128
      000A7A E0               [24] 2563 	movx	a,@dptr
      000A7B FE               [12] 2564 	mov	r6,a
      000A7C A3               [24] 2565 	inc	dptr
      000A7D E0               [24] 2566 	movx	a,@dptr
      000A7E FF               [12] 2567 	mov	r7,a
      000A7F 4E               [12] 2568 	orl	a,r6
      000A80 60 3A            [24] 2569 	jz	00104$
                                   2570 ;	lcdCommands.c:400: temp2 = x % 2;
      000A82 90r00r00         [24] 2571 	mov	dptr,#__modsint_PARM_2
      000A85 74 02            [12] 2572 	mov	a,#0x02
      000A87 F0               [24] 2573 	movx	@dptr,a
      000A88 E4               [12] 2574 	clr	a
      000A89 A3               [24] 2575 	inc	dptr
      000A8A F0               [24] 2576 	movx	@dptr,a
                                   2577 ;	lcdCommands.c:401: putchar(temp2);
      000A8B 8E 82            [24] 2578 	mov	dpl,r6
      000A8D 8F 83            [24] 2579 	mov	dph,r7
      000A8F C0 07            [24] 2580 	push	ar7
      000A91 C0 06            [24] 2581 	push	ar6
      000A93 12r00r00         [24] 2582 	lcall	__modsint
      000A96 12r00r00         [24] 2583 	lcall	_putchar
      000A99 D0 06            [24] 2584 	pop	ar6
      000A9B D0 07            [24] 2585 	pop	ar7
                                   2586 ;	lcdCommands.c:402: x = x / 2;
      000A9D 90r00r00         [24] 2587 	mov	dptr,#__divsint_PARM_2
      000AA0 74 02            [12] 2588 	mov	a,#0x02
      000AA2 F0               [24] 2589 	movx	@dptr,a
      000AA3 E4               [12] 2590 	clr	a
      000AA4 A3               [24] 2591 	inc	dptr
      000AA5 F0               [24] 2592 	movx	@dptr,a
      000AA6 8E 82            [24] 2593 	mov	dpl,r6
      000AA8 8F 83            [24] 2594 	mov	dph,r7
      000AAA 12r00r00         [24] 2595 	lcall	__divsint
      000AAD E5 82            [12] 2596 	mov	a,dpl
      000AAF 85 83 F0         [24] 2597 	mov	b,dph
      000AB2 90r00r1A         [24] 2598 	mov	dptr,#_printBinary_x_65536_128
      000AB5 F0               [24] 2599 	movx	@dptr,a
      000AB6 E5 F0            [12] 2600 	mov	a,b
      000AB8 A3               [24] 2601 	inc	dptr
      000AB9 F0               [24] 2602 	movx	@dptr,a
      000ABA 80 BB            [24] 2603 	sjmp	00101$
      000ABC                       2604 00104$:
                                   2605 ;	lcdCommands.c:404: }
      000ABC 22               [24] 2606 	ret
                                   2607 ;------------------------------------------------------------
                                   2608 ;Allocation info for local variables in function 'atoh'
                                   2609 ;------------------------------------------------------------
                                   2610 ;ap                        Allocated with name '_atoh_ap_65536_131'
                                   2611 ;p                         Allocated with name '_atoh_p_65536_132'
                                   2612 ;digit                     Allocated with name '_atoh_digit_65536_132'
                                   2613 ;lcase                     Allocated with name '_atoh_lcase_65536_132'
                                   2614 ;n                         Allocated with name '_atoh_n_65537_133'
                                   2615 ;------------------------------------------------------------
                                   2616 ;	lcdCommands.c:406: unsigned char atoh(char *ap)
                                   2617 ;	-----------------------------------------
                                   2618 ;	 function atoh
                                   2619 ;	-----------------------------------------
      000ABD                       2620 _atoh:
      000ABD AF F0            [24] 2621 	mov	r7,b
      000ABF AE 83            [24] 2622 	mov	r6,dph
      000AC1 E5 82            [12] 2623 	mov	a,dpl
      000AC3 90r00r1C         [24] 2624 	mov	dptr,#_atoh_ap_65536_131
      000AC6 F0               [24] 2625 	movx	@dptr,a
      000AC7 EE               [12] 2626 	mov	a,r6
      000AC8 A3               [24] 2627 	inc	dptr
      000AC9 F0               [24] 2628 	movx	@dptr,a
      000ACA EF               [12] 2629 	mov	a,r7
      000ACB A3               [24] 2630 	inc	dptr
      000ACC F0               [24] 2631 	movx	@dptr,a
                                   2632 ;	lcdCommands.c:411: p = ap;
      000ACD 90r00r1C         [24] 2633 	mov	dptr,#_atoh_ap_65536_131
      000AD0 E0               [24] 2634 	movx	a,@dptr
      000AD1 FD               [12] 2635 	mov	r5,a
      000AD2 A3               [24] 2636 	inc	dptr
      000AD3 E0               [24] 2637 	movx	a,@dptr
      000AD4 FE               [12] 2638 	mov	r6,a
      000AD5 A3               [24] 2639 	inc	dptr
      000AD6 E0               [24] 2640 	movx	a,@dptr
      000AD7 FF               [12] 2641 	mov	r7,a
                                   2642 ;	lcdCommands.c:412: unsigned char n = 0;
      000AD8 90r00r24         [24] 2643 	mov	dptr,#_atoh_n_65537_133
      000ADB E4               [12] 2644 	clr	a
      000ADC F0               [24] 2645 	movx	@dptr,a
                                   2646 ;	lcdCommands.c:413: while(*p == ' ' || *p == '	')
      000ADD                       2647 00102$:
      000ADD 8D 82            [24] 2648 	mov	dpl,r5
      000ADF 8E 83            [24] 2649 	mov	dph,r6
      000AE1 8F F0            [24] 2650 	mov	b,r7
      000AE3 12r00r00         [24] 2651 	lcall	__gptrget
      000AE6 FC               [12] 2652 	mov	r4,a
      000AE7 BC 20 02         [24] 2653 	cjne	r4,#0x20,00178$
      000AEA 80 03            [24] 2654 	sjmp	00103$
      000AEC                       2655 00178$:
      000AEC BC 09 07         [24] 2656 	cjne	r4,#0x09,00141$
      000AEF                       2657 00103$:
                                   2658 ;	lcdCommands.c:414: p++;
      000AEF 0D               [12] 2659 	inc	r5
      000AF0 BD 00 EA         [24] 2660 	cjne	r5,#0x00,00102$
      000AF3 0E               [12] 2661 	inc	r6
      000AF4 80 E7            [24] 2662 	sjmp	00102$
      000AF6                       2663 00141$:
      000AF6 90r00r1F         [24] 2664 	mov	dptr,#_atoh_p_65536_132
      000AF9 ED               [12] 2665 	mov	a,r5
      000AFA F0               [24] 2666 	movx	@dptr,a
      000AFB EE               [12] 2667 	mov	a,r6
      000AFC A3               [24] 2668 	inc	dptr
      000AFD F0               [24] 2669 	movx	@dptr,a
      000AFE EF               [12] 2670 	mov	a,r7
      000AFF A3               [24] 2671 	inc	dptr
      000B00 F0               [24] 2672 	movx	@dptr,a
                                   2673 ;	lcdCommands.c:416: if(*p == '0' && ((*(p+1) == 'x') || (*(p+1) == 'X')))
      000B01 BC 30 29         [24] 2674 	cjne	r4,#0x30,00118$
      000B04 74 01            [12] 2675 	mov	a,#0x01
      000B06 2D               [12] 2676 	add	a,r5
      000B07 FA               [12] 2677 	mov	r2,a
      000B08 E4               [12] 2678 	clr	a
      000B09 3E               [12] 2679 	addc	a,r6
      000B0A FB               [12] 2680 	mov	r3,a
      000B0B 8F 04            [24] 2681 	mov	ar4,r7
      000B0D 8A 82            [24] 2682 	mov	dpl,r2
      000B0F 8B 83            [24] 2683 	mov	dph,r3
      000B11 8C F0            [24] 2684 	mov	b,r4
      000B13 12r00r00         [24] 2685 	lcall	__gptrget
      000B16 FC               [12] 2686 	mov	r4,a
      000B17 BC 78 02         [24] 2687 	cjne	r4,#0x78,00184$
      000B1A 80 03            [24] 2688 	sjmp	00105$
      000B1C                       2689 00184$:
      000B1C BC 58 0E         [24] 2690 	cjne	r4,#0x58,00118$
      000B1F                       2691 00105$:
                                   2692 ;	lcdCommands.c:417: p+=2;
      000B1F 90r00r1F         [24] 2693 	mov	dptr,#_atoh_p_65536_132
      000B22 74 02            [12] 2694 	mov	a,#0x02
      000B24 2D               [12] 2695 	add	a,r5
      000B25 F0               [24] 2696 	movx	@dptr,a
      000B26 E4               [12] 2697 	clr	a
      000B27 3E               [12] 2698 	addc	a,r6
      000B28 A3               [24] 2699 	inc	dptr
      000B29 F0               [24] 2700 	movx	@dptr,a
      000B2A EF               [12] 2701 	mov	a,r7
      000B2B A3               [24] 2702 	inc	dptr
      000B2C F0               [24] 2703 	movx	@dptr,a
                                   2704 ;	lcdCommands.c:419: while ((digit = (*p >= '0' && *p <= '9')) ||
      000B2D                       2705 00118$:
      000B2D 90r00r1F         [24] 2706 	mov	dptr,#_atoh_p_65536_132
      000B30 E0               [24] 2707 	movx	a,@dptr
      000B31 FD               [12] 2708 	mov	r5,a
      000B32 A3               [24] 2709 	inc	dptr
      000B33 E0               [24] 2710 	movx	a,@dptr
      000B34 FE               [12] 2711 	mov	r6,a
      000B35 A3               [24] 2712 	inc	dptr
      000B36 E0               [24] 2713 	movx	a,@dptr
      000B37 FF               [12] 2714 	mov	r7,a
      000B38 8D 82            [24] 2715 	mov	dpl,r5
      000B3A 8E 83            [24] 2716 	mov	dph,r6
      000B3C 8F F0            [24] 2717 	mov	b,r7
      000B3E 12r00r00         [24] 2718 	lcall	__gptrget
      000B41 FF               [12] 2719 	mov	r7,a
      000B42 BF 30 00         [24] 2720 	cjne	r7,#0x30,00187$
      000B45                       2721 00187$:
      000B45 40 05            [24] 2722 	jc	00123$
      000B47 EF               [12] 2723 	mov	a,r7
      000B48 24 C6            [12] 2724 	add	a,#0xff - 0x39
      000B4A 50 04            [24] 2725 	jnc	00124$
      000B4C                       2726 00123$:
      000B4C 7F 00            [12] 2727 	mov	r7,#0x00
      000B4E 80 02            [24] 2728 	sjmp	00125$
      000B50                       2729 00124$:
      000B50 7F 01            [12] 2730 	mov	r7,#0x01
      000B52                       2731 00125$:
      000B52 EF               [12] 2732 	mov	a,r7
      000B53 FD               [12] 2733 	mov	r5,a
      000B54 33               [12] 2734 	rlc	a
      000B55 95 E0            [12] 2735 	subb	a,acc
      000B57 FE               [12] 2736 	mov	r6,a
      000B58 EF               [12] 2737 	mov	a,r7
      000B59 70 5C            [24] 2738 	jnz	00119$
                                   2739 ;	lcdCommands.c:420: (lcase = (*p >= 'a' && *p <= 'f')) ||
      000B5B 90r00r1F         [24] 2740 	mov	dptr,#_atoh_p_65536_132
      000B5E E0               [24] 2741 	movx	a,@dptr
      000B5F FB               [12] 2742 	mov	r3,a
      000B60 A3               [24] 2743 	inc	dptr
      000B61 E0               [24] 2744 	movx	a,@dptr
      000B62 FC               [12] 2745 	mov	r4,a
      000B63 A3               [24] 2746 	inc	dptr
      000B64 E0               [24] 2747 	movx	a,@dptr
      000B65 FF               [12] 2748 	mov	r7,a
      000B66 8B 82            [24] 2749 	mov	dpl,r3
      000B68 8C 83            [24] 2750 	mov	dph,r4
      000B6A 8F F0            [24] 2751 	mov	b,r7
      000B6C 12r00r00         [24] 2752 	lcall	__gptrget
      000B6F FF               [12] 2753 	mov	r7,a
      000B70 BF 61 00         [24] 2754 	cjne	r7,#0x61,00191$
      000B73                       2755 00191$:
      000B73 40 05            [24] 2756 	jc	00126$
      000B75 EF               [12] 2757 	mov	a,r7
      000B76 24 99            [12] 2758 	add	a,#0xff - 0x66
      000B78 50 04            [24] 2759 	jnc	00127$
      000B7A                       2760 00126$:
      000B7A 7F 00            [12] 2761 	mov	r7,#0x00
      000B7C 80 02            [24] 2762 	sjmp	00128$
      000B7E                       2763 00127$:
      000B7E 7F 01            [12] 2764 	mov	r7,#0x01
      000B80                       2765 00128$:
      000B80 EF               [12] 2766 	mov	a,r7
      000B81 FC               [12] 2767 	mov	r4,a
      000B82 33               [12] 2768 	rlc	a
      000B83 95 E0            [12] 2769 	subb	a,acc
      000B85 FF               [12] 2770 	mov	r7,a
      000B86 90r00r22         [24] 2771 	mov	dptr,#_atoh_lcase_65536_132
      000B89 EC               [12] 2772 	mov	a,r4
      000B8A F0               [24] 2773 	movx	@dptr,a
      000B8B EF               [12] 2774 	mov	a,r7
      000B8C A3               [24] 2775 	inc	dptr
      000B8D F0               [24] 2776 	movx	@dptr,a
      000B8E EC               [12] 2777 	mov	a,r4
      000B8F 4F               [12] 2778 	orl	a,r7
      000B90 70 25            [24] 2779 	jnz	00119$
                                   2780 ;	lcdCommands.c:421: (*p >= 'A' && *p <= 'F')) {
      000B92 90r00r1F         [24] 2781 	mov	dptr,#_atoh_p_65536_132
      000B95 E0               [24] 2782 	movx	a,@dptr
      000B96 FB               [12] 2783 	mov	r3,a
      000B97 A3               [24] 2784 	inc	dptr
      000B98 E0               [24] 2785 	movx	a,@dptr
      000B99 FC               [12] 2786 	mov	r4,a
      000B9A A3               [24] 2787 	inc	dptr
      000B9B E0               [24] 2788 	movx	a,@dptr
      000B9C FF               [12] 2789 	mov	r7,a
      000B9D 8B 82            [24] 2790 	mov	dpl,r3
      000B9F 8C 83            [24] 2791 	mov	dph,r4
      000BA1 8F F0            [24] 2792 	mov	b,r7
      000BA3 12r00r00         [24] 2793 	lcall	__gptrget
      000BA6 FF               [12] 2794 	mov	r7,a
      000BA7 BF 41 00         [24] 2795 	cjne	r7,#0x41,00195$
      000BAA                       2796 00195$:
      000BAA 50 03            [24] 2797 	jnc	00196$
      000BAC 02r0Cr62         [24] 2798 	ljmp	00120$
      000BAF                       2799 00196$:
      000BAF EF               [12] 2800 	mov	a,r7
      000BB0 24 B9            [12] 2801 	add	a,#0xff - 0x46
      000BB2 50 03            [24] 2802 	jnc	00197$
      000BB4 02r0Cr62         [24] 2803 	ljmp	00120$
      000BB7                       2804 00197$:
      000BB7                       2805 00119$:
                                   2806 ;	lcdCommands.c:422: n *= 16;
      000BB7 90r00r24         [24] 2807 	mov	dptr,#_atoh_n_65537_133
      000BBA E0               [24] 2808 	movx	a,@dptr
      000BBB C4               [12] 2809 	swap	a
      000BBC 54 F0            [12] 2810 	anl	a,#0xf0
      000BBE F0               [24] 2811 	movx	@dptr,a
                                   2812 ;	lcdCommands.c:423: if (digit)	n += *p++ - '0';
      000BBF ED               [12] 2813 	mov	a,r5
      000BC0 4E               [12] 2814 	orl	a,r6
      000BC1 60 31            [24] 2815 	jz	00113$
      000BC3 90r00r1F         [24] 2816 	mov	dptr,#_atoh_p_65536_132
      000BC6 E0               [24] 2817 	movx	a,@dptr
      000BC7 FD               [12] 2818 	mov	r5,a
      000BC8 A3               [24] 2819 	inc	dptr
      000BC9 E0               [24] 2820 	movx	a,@dptr
      000BCA FE               [12] 2821 	mov	r6,a
      000BCB A3               [24] 2822 	inc	dptr
      000BCC E0               [24] 2823 	movx	a,@dptr
      000BCD FF               [12] 2824 	mov	r7,a
      000BCE 8D 82            [24] 2825 	mov	dpl,r5
      000BD0 8E 83            [24] 2826 	mov	dph,r6
      000BD2 8F F0            [24] 2827 	mov	b,r7
      000BD4 12r00r00         [24] 2828 	lcall	__gptrget
      000BD7 FC               [12] 2829 	mov	r4,a
      000BD8 90r00r1F         [24] 2830 	mov	dptr,#_atoh_p_65536_132
      000BDB 74 01            [12] 2831 	mov	a,#0x01
      000BDD 2D               [12] 2832 	add	a,r5
      000BDE F0               [24] 2833 	movx	@dptr,a
      000BDF E4               [12] 2834 	clr	a
      000BE0 3E               [12] 2835 	addc	a,r6
      000BE1 A3               [24] 2836 	inc	dptr
      000BE2 F0               [24] 2837 	movx	@dptr,a
      000BE3 EF               [12] 2838 	mov	a,r7
      000BE4 A3               [24] 2839 	inc	dptr
      000BE5 F0               [24] 2840 	movx	@dptr,a
      000BE6 EC               [12] 2841 	mov	a,r4
      000BE7 24 D0            [12] 2842 	add	a,#0xd0
      000BE9 FC               [12] 2843 	mov	r4,a
      000BEA 90r00r24         [24] 2844 	mov	dptr,#_atoh_n_65537_133
      000BED E0               [24] 2845 	movx	a,@dptr
      000BEE FF               [12] 2846 	mov	r7,a
      000BEF 2C               [12] 2847 	add	a,r4
      000BF0 F0               [24] 2848 	movx	@dptr,a
      000BF1 02r0Br2D         [24] 2849 	ljmp	00118$
      000BF4                       2850 00113$:
                                   2851 ;	lcdCommands.c:424: else if (lcase)	n += 10 + (*p++ - 'a');
      000BF4 90r00r22         [24] 2852 	mov	dptr,#_atoh_lcase_65536_132
      000BF7 E0               [24] 2853 	movx	a,@dptr
      000BF8 F5 F0            [12] 2854 	mov	b,a
      000BFA A3               [24] 2855 	inc	dptr
      000BFB E0               [24] 2856 	movx	a,@dptr
      000BFC 45 F0            [12] 2857 	orl	a,b
      000BFE 60 31            [24] 2858 	jz	00110$
      000C00 90r00r1F         [24] 2859 	mov	dptr,#_atoh_p_65536_132
      000C03 E0               [24] 2860 	movx	a,@dptr
      000C04 FD               [12] 2861 	mov	r5,a
      000C05 A3               [24] 2862 	inc	dptr
      000C06 E0               [24] 2863 	movx	a,@dptr
      000C07 FE               [12] 2864 	mov	r6,a
      000C08 A3               [24] 2865 	inc	dptr
      000C09 E0               [24] 2866 	movx	a,@dptr
      000C0A FF               [12] 2867 	mov	r7,a
      000C0B 8D 82            [24] 2868 	mov	dpl,r5
      000C0D 8E 83            [24] 2869 	mov	dph,r6
      000C0F 8F F0            [24] 2870 	mov	b,r7
      000C11 12r00r00         [24] 2871 	lcall	__gptrget
      000C14 FC               [12] 2872 	mov	r4,a
      000C15 90r00r1F         [24] 2873 	mov	dptr,#_atoh_p_65536_132
      000C18 74 01            [12] 2874 	mov	a,#0x01
      000C1A 2D               [12] 2875 	add	a,r5
      000C1B F0               [24] 2876 	movx	@dptr,a
      000C1C E4               [12] 2877 	clr	a
      000C1D 3E               [12] 2878 	addc	a,r6
      000C1E A3               [24] 2879 	inc	dptr
      000C1F F0               [24] 2880 	movx	@dptr,a
      000C20 EF               [12] 2881 	mov	a,r7
      000C21 A3               [24] 2882 	inc	dptr
      000C22 F0               [24] 2883 	movx	@dptr,a
      000C23 74 A9            [12] 2884 	mov	a,#0xa9
      000C25 2C               [12] 2885 	add	a,r4
      000C26 FC               [12] 2886 	mov	r4,a
      000C27 90r00r24         [24] 2887 	mov	dptr,#_atoh_n_65537_133
      000C2A E0               [24] 2888 	movx	a,@dptr
      000C2B FF               [12] 2889 	mov	r7,a
      000C2C 2C               [12] 2890 	add	a,r4
      000C2D F0               [24] 2891 	movx	@dptr,a
      000C2E 02r0Br2D         [24] 2892 	ljmp	00118$
      000C31                       2893 00110$:
                                   2894 ;	lcdCommands.c:425: else		n += 10 + (*p++ - 'A');
      000C31 90r00r1F         [24] 2895 	mov	dptr,#_atoh_p_65536_132
      000C34 E0               [24] 2896 	movx	a,@dptr
      000C35 FD               [12] 2897 	mov	r5,a
      000C36 A3               [24] 2898 	inc	dptr
      000C37 E0               [24] 2899 	movx	a,@dptr
      000C38 FE               [12] 2900 	mov	r6,a
      000C39 A3               [24] 2901 	inc	dptr
      000C3A E0               [24] 2902 	movx	a,@dptr
      000C3B FF               [12] 2903 	mov	r7,a
      000C3C 8D 82            [24] 2904 	mov	dpl,r5
      000C3E 8E 83            [24] 2905 	mov	dph,r6
      000C40 8F F0            [24] 2906 	mov	b,r7
      000C42 12r00r00         [24] 2907 	lcall	__gptrget
      000C45 FC               [12] 2908 	mov	r4,a
      000C46 90r00r1F         [24] 2909 	mov	dptr,#_atoh_p_65536_132
      000C49 74 01            [12] 2910 	mov	a,#0x01
      000C4B 2D               [12] 2911 	add	a,r5
      000C4C F0               [24] 2912 	movx	@dptr,a
      000C4D E4               [12] 2913 	clr	a
      000C4E 3E               [12] 2914 	addc	a,r6
      000C4F A3               [24] 2915 	inc	dptr
      000C50 F0               [24] 2916 	movx	@dptr,a
      000C51 EF               [12] 2917 	mov	a,r7
      000C52 A3               [24] 2918 	inc	dptr
      000C53 F0               [24] 2919 	movx	@dptr,a
      000C54 74 C9            [12] 2920 	mov	a,#0xc9
      000C56 2C               [12] 2921 	add	a,r4
      000C57 FC               [12] 2922 	mov	r4,a
      000C58 90r00r24         [24] 2923 	mov	dptr,#_atoh_n_65537_133
      000C5B E0               [24] 2924 	movx	a,@dptr
      000C5C FF               [12] 2925 	mov	r7,a
      000C5D 2C               [12] 2926 	add	a,r4
      000C5E F0               [24] 2927 	movx	@dptr,a
      000C5F 02r0Br2D         [24] 2928 	ljmp	00118$
      000C62                       2929 00120$:
                                   2930 ;	lcdCommands.c:427: return(n);
      000C62 90r00r24         [24] 2931 	mov	dptr,#_atoh_n_65537_133
      000C65 E0               [24] 2932 	movx	a,@dptr
                                   2933 ;	lcdCommands.c:428: }
      000C66 F5 82            [12] 2934 	mov	dpl,a
      000C68 22               [24] 2935 	ret
                                   2936 ;------------------------------------------------------------
                                   2937 ;Allocation info for local variables in function 'printMenu'
                                   2938 ;------------------------------------------------------------
                                   2939 ;i                         Allocated with name '_printMenu_i_65536_135'
                                   2940 ;------------------------------------------------------------
                                   2941 ;	lcdCommands.c:430: void printMenu()
                                   2942 ;	-----------------------------------------
                                   2943 ;	 function printMenu
                                   2944 ;	-----------------------------------------
      000C69                       2945 _printMenu:
                                   2946 ;	lcdCommands.c:433: printf("%s",uiLines);
      000C69 74r00            [12] 2947 	mov	a,#_uiLines
      000C6B C0 E0            [24] 2948 	push	acc
      000C6D 74s00            [12] 2949 	mov	a,#(_uiLines >> 8)
      000C6F C0 E0            [24] 2950 	push	acc
      000C71 74 80            [12] 2951 	mov	a,#0x80
      000C73 C0 E0            [24] 2952 	push	acc
      000C75 74r62            [12] 2953 	mov	a,#___str_13
      000C77 C0 E0            [24] 2954 	push	acc
      000C79 74s03            [12] 2955 	mov	a,#(___str_13 >> 8)
      000C7B C0 E0            [24] 2956 	push	acc
      000C7D 74 80            [12] 2957 	mov	a,#0x80
      000C7F C0 E0            [24] 2958 	push	acc
      000C81 12r00r00         [24] 2959 	lcall	_printf
      000C84 E5 81            [12] 2960 	mov	a,sp
      000C86 24 FA            [12] 2961 	add	a,#0xfa
      000C88 F5 81            [12] 2962 	mov	sp,a
                                   2963 ;	lcdCommands.c:434: printf("\n\r");
      000C8A 74rA1            [12] 2964 	mov	a,#___str_6
      000C8C C0 E0            [24] 2965 	push	acc
      000C8E 74s02            [12] 2966 	mov	a,#(___str_6 >> 8)
      000C90 C0 E0            [24] 2967 	push	acc
      000C92 74 80            [12] 2968 	mov	a,#0x80
      000C94 C0 E0            [24] 2969 	push	acc
      000C96 12r00r00         [24] 2970 	lcall	_printf
      000C99 15 81            [12] 2971 	dec	sp
      000C9B 15 81            [12] 2972 	dec	sp
      000C9D 15 81            [12] 2973 	dec	sp
                                   2974 ;	lcdCommands.c:435: for ( i = 0; i < 10; i++)
      000C9F 7E 00            [12] 2975 	mov	r6,#0x00
      000CA1 7F 00            [12] 2976 	mov	r7,#0x00
      000CA3                       2977 00102$:
                                   2978 ;	lcdCommands.c:437: printf("%s",messages[i]);
      000CA3 90r00r00         [24] 2979 	mov	dptr,#__mulint_PARM_2
      000CA6 EE               [12] 2980 	mov	a,r6
      000CA7 F0               [24] 2981 	movx	@dptr,a
      000CA8 EF               [12] 2982 	mov	a,r7
      000CA9 A3               [24] 2983 	inc	dptr
      000CAA F0               [24] 2984 	movx	@dptr,a
      000CAB 90 00 28         [24] 2985 	mov	dptr,#0x0028
      000CAE C0 07            [24] 2986 	push	ar7
      000CB0 C0 06            [24] 2987 	push	ar6
      000CB2 12r00r00         [24] 2988 	lcall	__mulint
      000CB5 AC 82            [24] 2989 	mov	r4,dpl
      000CB7 AD 83            [24] 2990 	mov	r5,dph
      000CB9 EC               [12] 2991 	mov	a,r4
      000CBA 24r3C            [12] 2992 	add	a,#_messages
      000CBC FC               [12] 2993 	mov	r4,a
      000CBD ED               [12] 2994 	mov	a,r5
      000CBE 34s00            [12] 2995 	addc	a,#(_messages >> 8)
      000CC0 FD               [12] 2996 	mov	r5,a
      000CC1 7B 80            [12] 2997 	mov	r3,#0x80
      000CC3 C0 04            [24] 2998 	push	ar4
      000CC5 C0 05            [24] 2999 	push	ar5
      000CC7 C0 03            [24] 3000 	push	ar3
      000CC9 74r62            [12] 3001 	mov	a,#___str_13
      000CCB C0 E0            [24] 3002 	push	acc
      000CCD 74s03            [12] 3003 	mov	a,#(___str_13 >> 8)
      000CCF C0 E0            [24] 3004 	push	acc
      000CD1 EB               [12] 3005 	mov	a,r3
      000CD2 C0 E0            [24] 3006 	push	acc
      000CD4 12r00r00         [24] 3007 	lcall	_printf
      000CD7 E5 81            [12] 3008 	mov	a,sp
      000CD9 24 FA            [12] 3009 	add	a,#0xfa
      000CDB F5 81            [12] 3010 	mov	sp,a
                                   3011 ;	lcdCommands.c:438: printf_tiny("\n\r");
      000CDD 74rA1            [12] 3012 	mov	a,#___str_6
      000CDF C0 E0            [24] 3013 	push	acc
      000CE1 74s02            [12] 3014 	mov	a,#(___str_6 >> 8)
      000CE3 C0 E0            [24] 3015 	push	acc
      000CE5 12r00r00         [24] 3016 	lcall	_printf_tiny
      000CE8 15 81            [12] 3017 	dec	sp
      000CEA 15 81            [12] 3018 	dec	sp
      000CEC D0 06            [24] 3019 	pop	ar6
      000CEE D0 07            [24] 3020 	pop	ar7
                                   3021 ;	lcdCommands.c:435: for ( i = 0; i < 10; i++)
      000CF0 0E               [12] 3022 	inc	r6
      000CF1 BE 00 01         [24] 3023 	cjne	r6,#0x00,00115$
      000CF4 0F               [12] 3024 	inc	r7
      000CF5                       3025 00115$:
      000CF5 C3               [12] 3026 	clr	c
      000CF6 EE               [12] 3027 	mov	a,r6
      000CF7 94 0A            [12] 3028 	subb	a,#0x0a
      000CF9 EF               [12] 3029 	mov	a,r7
      000CFA 64 80            [12] 3030 	xrl	a,#0x80
      000CFC 94 80            [12] 3031 	subb	a,#0x80
      000CFE 40 A3            [24] 3032 	jc	00102$
                                   3033 ;	lcdCommands.c:440: printf("%s",uiLines);
      000D00 74r00            [12] 3034 	mov	a,#_uiLines
      000D02 C0 E0            [24] 3035 	push	acc
      000D04 74s00            [12] 3036 	mov	a,#(_uiLines >> 8)
      000D06 C0 E0            [24] 3037 	push	acc
      000D08 74 80            [12] 3038 	mov	a,#0x80
      000D0A C0 E0            [24] 3039 	push	acc
      000D0C 74r62            [12] 3040 	mov	a,#___str_13
      000D0E C0 E0            [24] 3041 	push	acc
      000D10 74s03            [12] 3042 	mov	a,#(___str_13 >> 8)
      000D12 C0 E0            [24] 3043 	push	acc
      000D14 74 80            [12] 3044 	mov	a,#0x80
      000D16 C0 E0            [24] 3045 	push	acc
      000D18 12r00r00         [24] 3046 	lcall	_printf
      000D1B E5 81            [12] 3047 	mov	a,sp
      000D1D 24 FA            [12] 3048 	add	a,#0xfa
      000D1F F5 81            [12] 3049 	mov	sp,a
                                   3050 ;	lcdCommands.c:441: printf("\n\r");
      000D21 74rA1            [12] 3051 	mov	a,#___str_6
      000D23 C0 E0            [24] 3052 	push	acc
      000D25 74s02            [12] 3053 	mov	a,#(___str_6 >> 8)
      000D27 C0 E0            [24] 3054 	push	acc
      000D29 74 80            [12] 3055 	mov	a,#0x80
      000D2B C0 E0            [24] 3056 	push	acc
      000D2D 12r00r00         [24] 3057 	lcall	_printf
      000D30 15 81            [12] 3058 	dec	sp
      000D32 15 81            [12] 3059 	dec	sp
      000D34 15 81            [12] 3060 	dec	sp
                                   3061 ;	lcdCommands.c:443: }
      000D36 22               [24] 3062 	ret
                                   3063 	.area CSEG    (CODE)
                                   3064 	.area CONST   (CODE)
      000000                       3065 _uiLines:
      000000 0A                    3066 	.db 0x0a
      000001 0D                    3067 	.db 0x0d
      000002 2D 2D 2D 2D 2D 2D 2D  3068 	.ascii "-------------------------------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
      000033 0A                    3069 	.db 0x0a
      000034 0D                    3070 	.db 0x0d
      000035 00                    3071 	.db 0x00
      000036 00                    3072 	.db 0x00
      000037 00                    3073 	.db 0x00
      000038 00                    3074 	.db 0x00
      000039 00                    3075 	.db 0x00
      00003A 00                    3076 	.db 0x00
      00003B 00                    3077 	.db 0x00
      00003C                       3078 _messages:
      00003C 20 45 6E 74 65 72 20  3079 	.ascii " Enter w to write a character "
             77 20 74 6F 20 77 72
             69 74 65 20 61 20 63
             68 61 72 61 63 74 65
             72 20
      00005A 00                    3080 	.db 0x00
      00005B 00                    3081 	.db 0x00
      00005C 00                    3082 	.db 0x00
      00005D 00                    3083 	.db 0x00
      00005E 00                    3084 	.db 0x00
      00005F 00                    3085 	.db 0x00
      000060 00                    3086 	.db 0x00
      000061 00                    3087 	.db 0x00
      000062 00                    3088 	.db 0x00
      000063 00                    3089 	.db 0x00
      000064 20 45 6E 74 65 72 20  3090 	.ascii " Enter s to write a string"
             73 20 74 6F 20 77 72
             69 74 65 20 61 20 73
             74 72 69 6E 67
      00007E 00                    3091 	.db 0x00
      00007F 00                    3092 	.db 0x00
      000080 00                    3093 	.db 0x00
      000081 00                    3094 	.db 0x00
      000082 00                    3095 	.db 0x00
      000083 00                    3096 	.db 0x00
      000084 00                    3097 	.db 0x00
      000085 00                    3098 	.db 0x00
      000086 00                    3099 	.db 0x00
      000087 00                    3100 	.db 0x00
      000088 00                    3101 	.db 0x00
      000089 00                    3102 	.db 0x00
      00008A 00                    3103 	.db 0x00
      00008B 00                    3104 	.db 0x00
      00008C 20 45 6E 74 65 72 20  3105 	.ascii " Enter p to play pacman "
             70 20 74 6F 20 70 6C
             61 79 20 70 61 63 6D
             61 6E 20
      0000A4 00                    3106 	.db 0x00
      0000A5 00                    3107 	.db 0x00
      0000A6 00                    3108 	.db 0x00
      0000A7 00                    3109 	.db 0x00
      0000A8 00                    3110 	.db 0x00
      0000A9 00                    3111 	.db 0x00
      0000AA 00                    3112 	.db 0x00
      0000AB 00                    3113 	.db 0x00
      0000AC 00                    3114 	.db 0x00
      0000AD 00                    3115 	.db 0x00
      0000AE 00                    3116 	.db 0x00
      0000AF 00                    3117 	.db 0x00
      0000B0 00                    3118 	.db 0x00
      0000B1 00                    3119 	.db 0x00
      0000B2 00                    3120 	.db 0x00
      0000B3 00                    3121 	.db 0x00
      0000B4 20 45 6E 74 65 72 20  3122 	.ascii " Enter d to perform RAM dump "
             64 20 74 6F 20 70 65
             72 66 6F 72 6D 20 52
             41 4D 20 64 75 6D 70
             20
      0000D1 00                    3123 	.db 0x00
      0000D2 00                    3124 	.db 0x00
      0000D3 00                    3125 	.db 0x00
      0000D4 00                    3126 	.db 0x00
      0000D5 00                    3127 	.db 0x00
      0000D6 00                    3128 	.db 0x00
      0000D7 00                    3129 	.db 0x00
      0000D8 00                    3130 	.db 0x00
      0000D9 00                    3131 	.db 0x00
      0000DA 00                    3132 	.db 0x00
      0000DB 00                    3133 	.db 0x00
      0000DC 20 45 6E 74 65 72 20  3134 	.ascii " Enter g for custom character"
             67 20 66 6F 72 20 63
             75 73 74 6F 6D 20 63
             68 61 72 61 63 74 65
             72
      0000F9 00                    3135 	.db 0x00
      0000FA 00                    3136 	.db 0x00
      0000FB 00                    3137 	.db 0x00
      0000FC 00                    3138 	.db 0x00
      0000FD 00                    3139 	.db 0x00
      0000FE 00                    3140 	.db 0x00
      0000FF 00                    3141 	.db 0x00
      000100 00                    3142 	.db 0x00
      000101 00                    3143 	.db 0x00
      000102 00                    3144 	.db 0x00
      000103 00                    3145 	.db 0x00
      000104 20 45 6E 74 65 72 20  3146 	.ascii " Enter x to reset timer"
             78 20 74 6F 20 72 65
             73 65 74 20 74 69 6D
             65 72
      00011B 00                    3147 	.db 0x00
      00011C 00                    3148 	.db 0x00
      00011D 00                    3149 	.db 0x00
      00011E 00                    3150 	.db 0x00
      00011F 00                    3151 	.db 0x00
      000120 00                    3152 	.db 0x00
      000121 00                    3153 	.db 0x00
      000122 00                    3154 	.db 0x00
      000123 00                    3155 	.db 0x00
      000124 00                    3156 	.db 0x00
      000125 00                    3157 	.db 0x00
      000126 00                    3158 	.db 0x00
      000127 00                    3159 	.db 0x00
      000128 00                    3160 	.db 0x00
      000129 00                    3161 	.db 0x00
      00012A 00                    3162 	.db 0x00
      00012B 00                    3163 	.db 0x00
      00012C 20 45 6E 74 65 72 20  3164 	.ascii " Enter y to pause timer"
             79 20 74 6F 20 70 61
             75 73 65 20 74 69 6D
             65 72
      000143 00                    3165 	.db 0x00
      000144 00                    3166 	.db 0x00
      000145 00                    3167 	.db 0x00
      000146 00                    3168 	.db 0x00
      000147 00                    3169 	.db 0x00
      000148 00                    3170 	.db 0x00
      000149 00                    3171 	.db 0x00
      00014A 00                    3172 	.db 0x00
      00014B 00                    3173 	.db 0x00
      00014C 00                    3174 	.db 0x00
      00014D 00                    3175 	.db 0x00
      00014E 00                    3176 	.db 0x00
      00014F 00                    3177 	.db 0x00
      000150 00                    3178 	.db 0x00
      000151 00                    3179 	.db 0x00
      000152 00                    3180 	.db 0x00
      000153 00                    3181 	.db 0x00
      000154 20 45 6E 74 65 72 20  3182 	.ascii " Enter z to resume timer"
             7A 20 74 6F 20 72 65
             73 75 6D 65 20 74 69
             6D 65 72
      00016C 00                    3183 	.db 0x00
      00016D 00                    3184 	.db 0x00
      00016E 00                    3185 	.db 0x00
      00016F 00                    3186 	.db 0x00
      000170 00                    3187 	.db 0x00
      000171 00                    3188 	.db 0x00
      000172 00                    3189 	.db 0x00
      000173 00                    3190 	.db 0x00
      000174 00                    3191 	.db 0x00
      000175 00                    3192 	.db 0x00
      000176 00                    3193 	.db 0x00
      000177 00                    3194 	.db 0x00
      000178 00                    3195 	.db 0x00
      000179 00                    3196 	.db 0x00
      00017A 00                    3197 	.db 0x00
      00017B 00                    3198 	.db 0x00
      00017C 20 45 6E 74 65 72 20  3199 	.ascii " Enter c to clear screen"
             63 20 74 6F 20 63 6C
             65 61 72 20 73 63 72
             65 65 6E
      000194 00                    3200 	.db 0x00
      000195 00                    3201 	.db 0x00
      000196 00                    3202 	.db 0x00
      000197 00                    3203 	.db 0x00
      000198 00                    3204 	.db 0x00
      000199 00                    3205 	.db 0x00
      00019A 00                    3206 	.db 0x00
      00019B 00                    3207 	.db 0x00
      00019C 00                    3208 	.db 0x00
      00019D 00                    3209 	.db 0x00
      00019E 00                    3210 	.db 0x00
      00019F 00                    3211 	.db 0x00
      0001A0 00                    3212 	.db 0x00
      0001A1 00                    3213 	.db 0x00
      0001A2 00                    3214 	.db 0x00
      0001A3 00                    3215 	.db 0x00
      0001A4 20 45 6E 74 65 72 20  3216 	.ascii " Enter m for main menu "
             6D 20 66 6F 72 20 6D
             61 69 6E 20 6D 65 6E
             75 20
      0001BB 00                    3217 	.db 0x00
      0001BC 00                    3218 	.db 0x00
      0001BD 00                    3219 	.db 0x00
      0001BE 00                    3220 	.db 0x00
      0001BF 00                    3221 	.db 0x00
      0001C0 00                    3222 	.db 0x00
      0001C1 00                    3223 	.db 0x00
      0001C2 00                    3224 	.db 0x00
      0001C3 00                    3225 	.db 0x00
      0001C4 00                    3226 	.db 0x00
      0001C5 00                    3227 	.db 0x00
      0001C6 00                    3228 	.db 0x00
      0001C7 00                    3229 	.db 0x00
      0001C8 00                    3230 	.db 0x00
      0001C9 00                    3231 	.db 0x00
      0001CA 00                    3232 	.db 0x00
      0001CB 00                    3233 	.db 0x00
      0001CC 00                    3234 	.db 0x00
      0001CD 00                    3235 	.db 0x00
      0001CE 00                    3236 	.db 0x00
      0001CF 00                    3237 	.db 0x00
      0001D0 00                    3238 	.db 0x00
      0001D1 00                    3239 	.db 0x00
      0001D2 00                    3240 	.db 0x00
      0001D3 00                    3241 	.db 0x00
      0001D4 00                    3242 	.db 0x00
      0001D5 00                    3243 	.db 0x00
      0001D6 00                    3244 	.db 0x00
      0001D7 00                    3245 	.db 0x00
      0001D8 00                    3246 	.db 0x00
      0001D9 00                    3247 	.db 0x00
      0001DA 00                    3248 	.db 0x00
      0001DB 00                    3249 	.db 0x00
      0001DC 00                    3250 	.db 0x00
      0001DD 00                    3251 	.db 0x00
      0001DE 00                    3252 	.db 0x00
      0001DF 00                    3253 	.db 0x00
      0001E0 00                    3254 	.db 0x00
      0001E1 00                    3255 	.db 0x00
      0001E2 00                    3256 	.db 0x00
      0001E3 00                    3257 	.db 0x00
      0001E4 00                    3258 	.db 0x00
      0001E5 00                    3259 	.db 0x00
      0001E6 00                    3260 	.db 0x00
      0001E7 00                    3261 	.db 0x00
      0001E8 00                    3262 	.db 0x00
      0001E9 00                    3263 	.db 0x00
      0001EA 00                    3264 	.db 0x00
      0001EB 00                    3265 	.db 0x00
      0001EC 00                    3266 	.db 0x00
      0001ED 00                    3267 	.db 0x00
      0001EE 00                    3268 	.db 0x00
      0001EF 00                    3269 	.db 0x00
      0001F0 00                    3270 	.db 0x00
      0001F1 00                    3271 	.db 0x00
      0001F2 00                    3272 	.db 0x00
      0001F3 00                    3273 	.db 0x00
      0001F4                       3274 _lookUpTable:
      0001F4 00                    3275 	.db #0x00	; 0
      0001F5 01                    3276 	.db #0x01	; 1
      0001F6 02                    3277 	.db #0x02	; 2
      0001F7 03                    3278 	.db #0x03	; 3
      0001F8 04                    3279 	.db #0x04	; 4
      0001F9 05                    3280 	.db #0x05	; 5
      0001FA 06                    3281 	.db #0x06	; 6
      0001FB 07                    3282 	.db #0x07	; 7
      0001FC 08                    3283 	.db #0x08	; 8
      0001FD 09                    3284 	.db #0x09	; 9
      0001FE 0A                    3285 	.db #0x0a	; 10
      0001FF 0B                    3286 	.db #0x0b	; 11
      000200 0C                    3287 	.db #0x0c	; 12
      000201 0D                    3288 	.db #0x0d	; 13
      000202 0E                    3289 	.db #0x0e	; 14
      000203 0F                    3290 	.db #0x0f	; 15
      000204 40                    3291 	.db #0x40	; 64
      000205 41                    3292 	.db #0x41	; 65	'A'
      000206 42                    3293 	.db #0x42	; 66	'B'
      000207 43                    3294 	.db #0x43	; 67	'C'
      000208 44                    3295 	.db #0x44	; 68	'D'
      000209 45                    3296 	.db #0x45	; 69	'E'
      00020A 46                    3297 	.db #0x46	; 70	'F'
      00020B 47                    3298 	.db #0x47	; 71	'G'
      00020C 48                    3299 	.db #0x48	; 72	'H'
      00020D 49                    3300 	.db #0x49	; 73	'I'
      00020E 4A                    3301 	.db #0x4a	; 74	'J'
      00020F 4B                    3302 	.db #0x4b	; 75	'K'
      000210 4C                    3303 	.db #0x4c	; 76	'L'
      000211 4D                    3304 	.db #0x4d	; 77	'M'
      000212 4E                    3305 	.db #0x4e	; 78	'N'
      000213 4F                    3306 	.db #0x4f	; 79	'O'
      000214 10                    3307 	.db #0x10	; 16
      000215 11                    3308 	.db #0x11	; 17
      000216 12                    3309 	.db #0x12	; 18
      000217 13                    3310 	.db #0x13	; 19
      000218 14                    3311 	.db #0x14	; 20
      000219 15                    3312 	.db #0x15	; 21
      00021A 16                    3313 	.db #0x16	; 22
      00021B 17                    3314 	.db #0x17	; 23
      00021C 18                    3315 	.db #0x18	; 24
      00021D 19                    3316 	.db #0x19	; 25
      00021E 1A                    3317 	.db #0x1a	; 26
      00021F 1B                    3318 	.db #0x1b	; 27
      000220 1C                    3319 	.db #0x1c	; 28
      000221 1D                    3320 	.db #0x1d	; 29
      000222 1E                    3321 	.db #0x1e	; 30
      000223 1F                    3322 	.db #0x1f	; 31
      000224 50                    3323 	.db #0x50	; 80	'P'
      000225 51                    3324 	.db #0x51	; 81	'Q'
      000226 52                    3325 	.db #0x52	; 82	'R'
      000227 53                    3326 	.db #0x53	; 83	'S'
      000228 54                    3327 	.db #0x54	; 84	'T'
      000229 55                    3328 	.db #0x55	; 85	'U'
      00022A 56                    3329 	.db #0x56	; 86	'V'
      00022B 57                    3330 	.db #0x57	; 87	'W'
      00022C 58                    3331 	.db #0x58	; 88	'X'
      00022D 59                    3332 	.db #0x59	; 89	'Y'
      00022E 5A                    3333 	.db #0x5a	; 90	'Z'
      00022F 5B                    3334 	.db #0x5b	; 91
      000230 5C                    3335 	.db #0x5c	; 92
      000231 5D                    3336 	.db #0x5d	; 93
      000232 5E                    3337 	.db #0x5e	; 94
      000233 5F                    3338 	.db #0x5f	; 95
                                   3339 	.area CONST   (CODE)
      000234                       3340 ___str_0:
      000234 25 78 20 25 78        3341 	.ascii "%x %x"
      000239 0A                    3342 	.db 0x0a
      00023A 0D                    3343 	.db 0x0d
      00023B 00                    3344 	.db 0x00
                                   3345 	.area CSEG    (CODE)
                                   3346 	.area CONST   (CODE)
      00023C                       3347 ___str_1:
      00023C 0A                    3348 	.db 0x0a
      00023D 0D                    3349 	.db 0x0d
      00023E 45 6E 74 65 72 20 76  3350 	.ascii "Enter value for Row %d"
             61 6C 75 65 20 66 6F
             72 20 52 6F 77 20 25
             64
      000254 0A                    3351 	.db 0x0a
      000255 0D                    3352 	.db 0x0d
      000256 00                    3353 	.db 0x00
                                   3354 	.area CSEG    (CODE)
                                   3355 	.area CONST   (CODE)
      000257                       3356 ___str_2:
      000257 0A                    3357 	.db 0x0a
      000258 0D                    3358 	.db 0x0d
      000259 50 6C 65 61 73 65 20  3359 	.ascii "Please Input a maximum of 48 characters"
             49 6E 70 75 74 20 61
             20 6D 61 78 69 6D 75
             6D 20 6F 66 20 34 38
             20 63 68 61 72 61 63
             74 65 72 73
      000280 0A                    3360 	.db 0x0a
      000281 0D                    3361 	.db 0x0d
      000282 00                    3362 	.db 0x00
                                   3363 	.area CSEG    (CODE)
                                   3364 	.area CONST   (CODE)
      000283                       3365 ___str_3:
      000283 0A                    3366 	.db 0x0a
      000284 0D                    3367 	.db 0x0d
      000285 44 44 52 41 4D 20 43  3368 	.ascii "DDRAM Contents"
             6F 6E 74 65 6E 74 73
      000293 0A                    3369 	.db 0x0a
      000294 0D                    3370 	.db 0x0d
      000295 00                    3371 	.db 0x00
                                   3372 	.area CSEG    (CODE)
                                   3373 	.area CONST   (CODE)
      000296                       3374 ___str_4:
      000296 25 32 78 3A 20        3375 	.ascii "%2x: "
      00029B 00                    3376 	.db 0x00
                                   3377 	.area CSEG    (CODE)
                                   3378 	.area CONST   (CODE)
      00029C                       3379 ___str_5:
      00029C 25 32 78 20           3380 	.ascii "%2x "
      0002A0 00                    3381 	.db 0x00
                                   3382 	.area CSEG    (CODE)
                                   3383 	.area CONST   (CODE)
      0002A1                       3384 ___str_6:
      0002A1 0A                    3385 	.db 0x0a
      0002A2 0D                    3386 	.db 0x0d
      0002A3 00                    3387 	.db 0x00
                                   3388 	.area CSEG    (CODE)
                                   3389 	.area CONST   (CODE)
      0002A4                       3390 ___str_7:
      0002A4 0A                    3391 	.db 0x0a
      0002A5 0D                    3392 	.db 0x0d
      0002A6 43 47 52 41 4D 20 43  3393 	.ascii "CGRAM Contents"
             6F 6E 74 65 6E 74 73
      0002B4 0A                    3394 	.db 0x0a
      0002B5 0D                    3395 	.db 0x0d
      0002B6 00                    3396 	.db 0x00
                                   3397 	.area CSEG    (CODE)
                                   3398 	.area CONST   (CODE)
      0002B7                       3399 ___str_8:
      0002B7 0A                    3400 	.db 0x0a
      0002B8 0D                    3401 	.db 0x0d
      0002B9 43 68 61 72 61 63 74  3402 	.ascii "Character %d"
             65 72 20 25 64
      0002C5 0A                    3403 	.db 0x0a
      0002C6 0D                    3404 	.db 0x0d
      0002C7 00                    3405 	.db 0x00
                                   3406 	.area CSEG    (CODE)
                                   3407 	.area CONST   (CODE)
      0002C8                       3408 ___str_9:
      0002C8 52 6F 77 20 25 32 78  3409 	.ascii "Row %2x: "
             3A 20
      0002D1 00                    3410 	.db 0x00
                                   3411 	.area CSEG    (CODE)
                                   3412 	.area CONST   (CODE)
      0002D2                       3413 ___str_10:
      0002D2 57 45 4C 43 4F 4D 45  3414 	.ascii "WELCOME 2 PACMANPRESS G TO START"
             20 32 20 50 41 43 4D
             41 4E 50 52 45 53 53
             20 47 20 54 4F 20 53
             54 41 52 54
      0002F2 00                    3415 	.db 0x00
                                   3416 	.area CSEG    (CODE)
                                   3417 	.area CONST   (CODE)
      0002F3                       3418 ___str_11:
      0002F3 0A                    3419 	.db 0x0a
      0002F4 0D                    3420 	.db 0x0d
      0002F5 45 6E 74 65 72 20 77  3421 	.ascii "Enter w to go up, s to go down, a to go left and d to go rig"
             20 74 6F 20 67 6F 20
             75 70 2C 20 73 20 74
             6F 20 67 6F 20 64 6F
             77 6E 2C 20 61 20 74
             6F 20 67 6F 20 6C 65
             66 74 20 61 6E 64 20
             64 20 74 6F 20 67 6F
             20 72 69 67
      000331 68 74 20 61 6E 64 20  3422 	.ascii "ht and q to quit"
             71 20 74 6F 20 71 75
             69 74
      000341 0A                    3423 	.db 0x0a
      000342 0D                    3424 	.db 0x0d
      000343 00                    3425 	.db 0x00
                                   3426 	.area CSEG    (CODE)
                                   3427 	.area CONST   (CODE)
      000344                       3428 ___str_12:
      000344 47 41 4D 45 20 4F 56  3429 	.ascii "GAME OVER! PRESS p to restart"
             45 52 21 20 50 52 45
             53 53 20 70 20 74 6F
             20 72 65 73 74 61 72
             74
      000361 00                    3430 	.db 0x00
                                   3431 	.area CSEG    (CODE)
                                   3432 	.area CONST   (CODE)
      000362                       3433 ___str_13:
      000362 25 73                 3434 	.ascii "%s"
      000364 00                    3435 	.db 0x00
                                   3436 	.area CSEG    (CODE)
                                   3437 	.area XINIT   (CODE)
                                   3438 	.area CABS    (ABS,CODE)
