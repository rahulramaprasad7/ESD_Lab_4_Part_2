                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module lcdCommands
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _lookUpTable
                                     12 	.globl _messages
                                     13 	.globl _uiLines
                                     14 	.globl _memset
                                     15 	.globl _printf_tiny
                                     16 	.globl _putchar
                                     17 	.globl _getchar
                                     18 	.globl _printf
                                     19 	.globl _P5_7
                                     20 	.globl _P5_6
                                     21 	.globl _P5_5
                                     22 	.globl _P5_4
                                     23 	.globl _P5_3
                                     24 	.globl _P5_2
                                     25 	.globl _P5_1
                                     26 	.globl _P5_0
                                     27 	.globl _P4_7
                                     28 	.globl _P4_6
                                     29 	.globl _P4_5
                                     30 	.globl _P4_4
                                     31 	.globl _P4_3
                                     32 	.globl _P4_2
                                     33 	.globl _P4_1
                                     34 	.globl _P4_0
                                     35 	.globl _PX0L
                                     36 	.globl _PT0L
                                     37 	.globl _PX1L
                                     38 	.globl _PT1L
                                     39 	.globl _PSL
                                     40 	.globl _PT2L
                                     41 	.globl _PPCL
                                     42 	.globl _EC
                                     43 	.globl _CCF0
                                     44 	.globl _CCF1
                                     45 	.globl _CCF2
                                     46 	.globl _CCF3
                                     47 	.globl _CCF4
                                     48 	.globl _CR
                                     49 	.globl _CF
                                     50 	.globl _TF2
                                     51 	.globl _EXF2
                                     52 	.globl _RCLK
                                     53 	.globl _TCLK
                                     54 	.globl _EXEN2
                                     55 	.globl _TR2
                                     56 	.globl _C_T2
                                     57 	.globl _CP_RL2
                                     58 	.globl _T2CON_7
                                     59 	.globl _T2CON_6
                                     60 	.globl _T2CON_5
                                     61 	.globl _T2CON_4
                                     62 	.globl _T2CON_3
                                     63 	.globl _T2CON_2
                                     64 	.globl _T2CON_1
                                     65 	.globl _T2CON_0
                                     66 	.globl _PT2
                                     67 	.globl _ET2
                                     68 	.globl _CY
                                     69 	.globl _AC
                                     70 	.globl _F0
                                     71 	.globl _RS1
                                     72 	.globl _RS0
                                     73 	.globl _OV
                                     74 	.globl _F1
                                     75 	.globl _P
                                     76 	.globl _PS
                                     77 	.globl _PT1
                                     78 	.globl _PX1
                                     79 	.globl _PT0
                                     80 	.globl _PX0
                                     81 	.globl _RD
                                     82 	.globl _WR
                                     83 	.globl _T1
                                     84 	.globl _T0
                                     85 	.globl _INT1
                                     86 	.globl _INT0
                                     87 	.globl _TXD
                                     88 	.globl _RXD
                                     89 	.globl _P3_7
                                     90 	.globl _P3_6
                                     91 	.globl _P3_5
                                     92 	.globl _P3_4
                                     93 	.globl _P3_3
                                     94 	.globl _P3_2
                                     95 	.globl _P3_1
                                     96 	.globl _P3_0
                                     97 	.globl _EA
                                     98 	.globl _ES
                                     99 	.globl _ET1
                                    100 	.globl _EX1
                                    101 	.globl _ET0
                                    102 	.globl _EX0
                                    103 	.globl _P2_7
                                    104 	.globl _P2_6
                                    105 	.globl _P2_5
                                    106 	.globl _P2_4
                                    107 	.globl _P2_3
                                    108 	.globl _P2_2
                                    109 	.globl _P2_1
                                    110 	.globl _P2_0
                                    111 	.globl _SM0
                                    112 	.globl _SM1
                                    113 	.globl _SM2
                                    114 	.globl _REN
                                    115 	.globl _TB8
                                    116 	.globl _RB8
                                    117 	.globl _TI
                                    118 	.globl _RI
                                    119 	.globl _P1_7
                                    120 	.globl _P1_6
                                    121 	.globl _P1_5
                                    122 	.globl _P1_4
                                    123 	.globl _P1_3
                                    124 	.globl _P1_2
                                    125 	.globl _P1_1
                                    126 	.globl _P1_0
                                    127 	.globl _TF1
                                    128 	.globl _TR1
                                    129 	.globl _TF0
                                    130 	.globl _TR0
                                    131 	.globl _IE1
                                    132 	.globl _IT1
                                    133 	.globl _IE0
                                    134 	.globl _IT0
                                    135 	.globl _P0_7
                                    136 	.globl _P0_6
                                    137 	.globl _P0_5
                                    138 	.globl _P0_4
                                    139 	.globl _P0_3
                                    140 	.globl _P0_2
                                    141 	.globl _P0_1
                                    142 	.globl _P0_0
                                    143 	.globl _EECON
                                    144 	.globl _KBF
                                    145 	.globl _KBE
                                    146 	.globl _KBLS
                                    147 	.globl _BRL
                                    148 	.globl _BDRCON
                                    149 	.globl _T2MOD
                                    150 	.globl _SPDAT
                                    151 	.globl _SPSTA
                                    152 	.globl _SPCON
                                    153 	.globl _SADEN
                                    154 	.globl _SADDR
                                    155 	.globl _WDTPRG
                                    156 	.globl _WDTRST
                                    157 	.globl _P5
                                    158 	.globl _P4
                                    159 	.globl _IPH1
                                    160 	.globl _IPL1
                                    161 	.globl _IPH0
                                    162 	.globl _IPL0
                                    163 	.globl _IEN1
                                    164 	.globl _IEN0
                                    165 	.globl _CMOD
                                    166 	.globl _CL
                                    167 	.globl _CH
                                    168 	.globl _CCON
                                    169 	.globl _CCAPM4
                                    170 	.globl _CCAPM3
                                    171 	.globl _CCAPM2
                                    172 	.globl _CCAPM1
                                    173 	.globl _CCAPM0
                                    174 	.globl _CCAP4L
                                    175 	.globl _CCAP3L
                                    176 	.globl _CCAP2L
                                    177 	.globl _CCAP1L
                                    178 	.globl _CCAP0L
                                    179 	.globl _CCAP4H
                                    180 	.globl _CCAP3H
                                    181 	.globl _CCAP2H
                                    182 	.globl _CCAP1H
                                    183 	.globl _CCAP0H
                                    184 	.globl _CKCON1
                                    185 	.globl _CKCON0
                                    186 	.globl _CKRL
                                    187 	.globl _AUXR1
                                    188 	.globl _AUXR
                                    189 	.globl _TH2
                                    190 	.globl _TL2
                                    191 	.globl _RCAP2H
                                    192 	.globl _RCAP2L
                                    193 	.globl _T2CON
                                    194 	.globl _B
                                    195 	.globl _ACC
                                    196 	.globl _PSW
                                    197 	.globl _IP
                                    198 	.globl _P3
                                    199 	.globl _IE
                                    200 	.globl _P2
                                    201 	.globl _SBUF
                                    202 	.globl _SCON
                                    203 	.globl _P1
                                    204 	.globl _TH1
                                    205 	.globl _TH0
                                    206 	.globl _TL1
                                    207 	.globl _TL0
                                    208 	.globl _TMOD
                                    209 	.globl _TCON
                                    210 	.globl _PCON
                                    211 	.globl _DPH
                                    212 	.globl _DPL
                                    213 	.globl _SP
                                    214 	.globl _P0
                                    215 	.globl _goToXY_PARM_2
                                    216 	.globl _readCharacter
                                    217 	.globl _writeCharacter
                                    218 	.globl _busyPoll
                                    219 	.globl _lcdGeneral
                                    220 	.globl _delay
                                    221 	.globl _timerInit
                                    222 	.globl _busyWait
                                    223 	.globl _lcdInit
                                    224 	.globl _lcdPutCh
                                    225 	.globl _lcdClear
                                    226 	.globl _goToAddr
                                    227 	.globl _goToXY
                                    228 	.globl _customCharacter
                                    229 	.globl _readLCD
                                    230 	.globl _putsLCD
                                    231 	.globl _gets
                                    232 	.globl _ramDump
                                    233 	.globl _gamePacman
                                    234 	.globl _makePacmanRight
                                    235 	.globl _makePacmanLeft
                                    236 	.globl _printBinary
                                    237 	.globl _atoh
                                    238 	.globl _printMenu
                                    239 ;--------------------------------------------------------
                                    240 ; special function registers
                                    241 ;--------------------------------------------------------
                                    242 	.area RSEG    (ABS,DATA)
      000000                        243 	.org 0x0000
                           000080   244 _P0	=	0x0080
                           000081   245 _SP	=	0x0081
                           000082   246 _DPL	=	0x0082
                           000083   247 _DPH	=	0x0083
                           000087   248 _PCON	=	0x0087
                           000088   249 _TCON	=	0x0088
                           000089   250 _TMOD	=	0x0089
                           00008A   251 _TL0	=	0x008a
                           00008B   252 _TL1	=	0x008b
                           00008C   253 _TH0	=	0x008c
                           00008D   254 _TH1	=	0x008d
                           000090   255 _P1	=	0x0090
                           000098   256 _SCON	=	0x0098
                           000099   257 _SBUF	=	0x0099
                           0000A0   258 _P2	=	0x00a0
                           0000A8   259 _IE	=	0x00a8
                           0000B0   260 _P3	=	0x00b0
                           0000B8   261 _IP	=	0x00b8
                           0000D0   262 _PSW	=	0x00d0
                           0000E0   263 _ACC	=	0x00e0
                           0000F0   264 _B	=	0x00f0
                           0000C8   265 _T2CON	=	0x00c8
                           0000CA   266 _RCAP2L	=	0x00ca
                           0000CB   267 _RCAP2H	=	0x00cb
                           0000CC   268 _TL2	=	0x00cc
                           0000CD   269 _TH2	=	0x00cd
                           00008E   270 _AUXR	=	0x008e
                           0000A2   271 _AUXR1	=	0x00a2
                           000097   272 _CKRL	=	0x0097
                           00008F   273 _CKCON0	=	0x008f
                           0000AF   274 _CKCON1	=	0x00af
                           0000FA   275 _CCAP0H	=	0x00fa
                           0000FB   276 _CCAP1H	=	0x00fb
                           0000FC   277 _CCAP2H	=	0x00fc
                           0000FD   278 _CCAP3H	=	0x00fd
                           0000FE   279 _CCAP4H	=	0x00fe
                           0000EA   280 _CCAP0L	=	0x00ea
                           0000EB   281 _CCAP1L	=	0x00eb
                           0000EC   282 _CCAP2L	=	0x00ec
                           0000ED   283 _CCAP3L	=	0x00ed
                           0000EE   284 _CCAP4L	=	0x00ee
                           0000DA   285 _CCAPM0	=	0x00da
                           0000DB   286 _CCAPM1	=	0x00db
                           0000DC   287 _CCAPM2	=	0x00dc
                           0000DD   288 _CCAPM3	=	0x00dd
                           0000DE   289 _CCAPM4	=	0x00de
                           0000D8   290 _CCON	=	0x00d8
                           0000F9   291 _CH	=	0x00f9
                           0000E9   292 _CL	=	0x00e9
                           0000D9   293 _CMOD	=	0x00d9
                           0000A8   294 _IEN0	=	0x00a8
                           0000B1   295 _IEN1	=	0x00b1
                           0000B8   296 _IPL0	=	0x00b8
                           0000B7   297 _IPH0	=	0x00b7
                           0000B2   298 _IPL1	=	0x00b2
                           0000B3   299 _IPH1	=	0x00b3
                           0000C0   300 _P4	=	0x00c0
                           0000E8   301 _P5	=	0x00e8
                           0000A6   302 _WDTRST	=	0x00a6
                           0000A7   303 _WDTPRG	=	0x00a7
                           0000A9   304 _SADDR	=	0x00a9
                           0000B9   305 _SADEN	=	0x00b9
                           0000C3   306 _SPCON	=	0x00c3
                           0000C4   307 _SPSTA	=	0x00c4
                           0000C5   308 _SPDAT	=	0x00c5
                           0000C9   309 _T2MOD	=	0x00c9
                           00009B   310 _BDRCON	=	0x009b
                           00009A   311 _BRL	=	0x009a
                           00009C   312 _KBLS	=	0x009c
                           00009D   313 _KBE	=	0x009d
                           00009E   314 _KBF	=	0x009e
                           0000D2   315 _EECON	=	0x00d2
                                    316 ;--------------------------------------------------------
                                    317 ; special function bits
                                    318 ;--------------------------------------------------------
                                    319 	.area RSEG    (ABS,DATA)
      000000                        320 	.org 0x0000
                           000080   321 _P0_0	=	0x0080
                           000081   322 _P0_1	=	0x0081
                           000082   323 _P0_2	=	0x0082
                           000083   324 _P0_3	=	0x0083
                           000084   325 _P0_4	=	0x0084
                           000085   326 _P0_5	=	0x0085
                           000086   327 _P0_6	=	0x0086
                           000087   328 _P0_7	=	0x0087
                           000088   329 _IT0	=	0x0088
                           000089   330 _IE0	=	0x0089
                           00008A   331 _IT1	=	0x008a
                           00008B   332 _IE1	=	0x008b
                           00008C   333 _TR0	=	0x008c
                           00008D   334 _TF0	=	0x008d
                           00008E   335 _TR1	=	0x008e
                           00008F   336 _TF1	=	0x008f
                           000090   337 _P1_0	=	0x0090
                           000091   338 _P1_1	=	0x0091
                           000092   339 _P1_2	=	0x0092
                           000093   340 _P1_3	=	0x0093
                           000094   341 _P1_4	=	0x0094
                           000095   342 _P1_5	=	0x0095
                           000096   343 _P1_6	=	0x0096
                           000097   344 _P1_7	=	0x0097
                           000098   345 _RI	=	0x0098
                           000099   346 _TI	=	0x0099
                           00009A   347 _RB8	=	0x009a
                           00009B   348 _TB8	=	0x009b
                           00009C   349 _REN	=	0x009c
                           00009D   350 _SM2	=	0x009d
                           00009E   351 _SM1	=	0x009e
                           00009F   352 _SM0	=	0x009f
                           0000A0   353 _P2_0	=	0x00a0
                           0000A1   354 _P2_1	=	0x00a1
                           0000A2   355 _P2_2	=	0x00a2
                           0000A3   356 _P2_3	=	0x00a3
                           0000A4   357 _P2_4	=	0x00a4
                           0000A5   358 _P2_5	=	0x00a5
                           0000A6   359 _P2_6	=	0x00a6
                           0000A7   360 _P2_7	=	0x00a7
                           0000A8   361 _EX0	=	0x00a8
                           0000A9   362 _ET0	=	0x00a9
                           0000AA   363 _EX1	=	0x00aa
                           0000AB   364 _ET1	=	0x00ab
                           0000AC   365 _ES	=	0x00ac
                           0000AF   366 _EA	=	0x00af
                           0000B0   367 _P3_0	=	0x00b0
                           0000B1   368 _P3_1	=	0x00b1
                           0000B2   369 _P3_2	=	0x00b2
                           0000B3   370 _P3_3	=	0x00b3
                           0000B4   371 _P3_4	=	0x00b4
                           0000B5   372 _P3_5	=	0x00b5
                           0000B6   373 _P3_6	=	0x00b6
                           0000B7   374 _P3_7	=	0x00b7
                           0000B0   375 _RXD	=	0x00b0
                           0000B1   376 _TXD	=	0x00b1
                           0000B2   377 _INT0	=	0x00b2
                           0000B3   378 _INT1	=	0x00b3
                           0000B4   379 _T0	=	0x00b4
                           0000B5   380 _T1	=	0x00b5
                           0000B6   381 _WR	=	0x00b6
                           0000B7   382 _RD	=	0x00b7
                           0000B8   383 _PX0	=	0x00b8
                           0000B9   384 _PT0	=	0x00b9
                           0000BA   385 _PX1	=	0x00ba
                           0000BB   386 _PT1	=	0x00bb
                           0000BC   387 _PS	=	0x00bc
                           0000D0   388 _P	=	0x00d0
                           0000D1   389 _F1	=	0x00d1
                           0000D2   390 _OV	=	0x00d2
                           0000D3   391 _RS0	=	0x00d3
                           0000D4   392 _RS1	=	0x00d4
                           0000D5   393 _F0	=	0x00d5
                           0000D6   394 _AC	=	0x00d6
                           0000D7   395 _CY	=	0x00d7
                           0000AD   396 _ET2	=	0x00ad
                           0000BD   397 _PT2	=	0x00bd
                           0000C8   398 _T2CON_0	=	0x00c8
                           0000C9   399 _T2CON_1	=	0x00c9
                           0000CA   400 _T2CON_2	=	0x00ca
                           0000CB   401 _T2CON_3	=	0x00cb
                           0000CC   402 _T2CON_4	=	0x00cc
                           0000CD   403 _T2CON_5	=	0x00cd
                           0000CE   404 _T2CON_6	=	0x00ce
                           0000CF   405 _T2CON_7	=	0x00cf
                           0000C8   406 _CP_RL2	=	0x00c8
                           0000C9   407 _C_T2	=	0x00c9
                           0000CA   408 _TR2	=	0x00ca
                           0000CB   409 _EXEN2	=	0x00cb
                           0000CC   410 _TCLK	=	0x00cc
                           0000CD   411 _RCLK	=	0x00cd
                           0000CE   412 _EXF2	=	0x00ce
                           0000CF   413 _TF2	=	0x00cf
                           0000DF   414 _CF	=	0x00df
                           0000DE   415 _CR	=	0x00de
                           0000DC   416 _CCF4	=	0x00dc
                           0000DB   417 _CCF3	=	0x00db
                           0000DA   418 _CCF2	=	0x00da
                           0000D9   419 _CCF1	=	0x00d9
                           0000D8   420 _CCF0	=	0x00d8
                           0000AE   421 _EC	=	0x00ae
                           0000BE   422 _PPCL	=	0x00be
                           0000BD   423 _PT2L	=	0x00bd
                           0000BC   424 _PSL	=	0x00bc
                           0000BB   425 _PT1L	=	0x00bb
                           0000BA   426 _PX1L	=	0x00ba
                           0000B9   427 _PT0L	=	0x00b9
                           0000B8   428 _PX0L	=	0x00b8
                           0000C0   429 _P4_0	=	0x00c0
                           0000C1   430 _P4_1	=	0x00c1
                           0000C2   431 _P4_2	=	0x00c2
                           0000C3   432 _P4_3	=	0x00c3
                           0000C4   433 _P4_4	=	0x00c4
                           0000C5   434 _P4_5	=	0x00c5
                           0000C6   435 _P4_6	=	0x00c6
                           0000C7   436 _P4_7	=	0x00c7
                           0000E8   437 _P5_0	=	0x00e8
                           0000E9   438 _P5_1	=	0x00e9
                           0000EA   439 _P5_2	=	0x00ea
                           0000EB   440 _P5_3	=	0x00eb
                           0000EC   441 _P5_4	=	0x00ec
                           0000ED   442 _P5_5	=	0x00ed
                           0000EE   443 _P5_6	=	0x00ee
                           0000EF   444 _P5_7	=	0x00ef
                                    445 ;--------------------------------------------------------
                                    446 ; overlayable register banks
                                    447 ;--------------------------------------------------------
                                    448 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        449 	.ds 8
                                    450 ;--------------------------------------------------------
                                    451 ; internal ram data
                                    452 ;--------------------------------------------------------
                                    453 	.area DSEG    (DATA)
      000000                        454 _putsLCD_sloc0_1_0:
      000000                        455 	.ds 2
      000002                        456 _putsLCD_sloc1_1_0:
      000002                        457 	.ds 3
                                    458 ;--------------------------------------------------------
                                    459 ; overlayable items in internal ram 
                                    460 ;--------------------------------------------------------
                                    461 ;--------------------------------------------------------
                                    462 ; indirectly addressable internal ram data
                                    463 ;--------------------------------------------------------
                                    464 	.area ISEG    (DATA)
                                    465 ;--------------------------------------------------------
                                    466 ; absolute internal ram data
                                    467 ;--------------------------------------------------------
                                    468 	.area IABS    (ABS,DATA)
                                    469 	.area IABS    (ABS,DATA)
                                    470 ;--------------------------------------------------------
                                    471 ; bit data
                                    472 ;--------------------------------------------------------
                                    473 	.area BSEG    (BIT)
                                    474 ;--------------------------------------------------------
                                    475 ; paged external ram data
                                    476 ;--------------------------------------------------------
                                    477 	.area PSEG    (PAG,XDATA)
                                    478 ;--------------------------------------------------------
                                    479 ; external ram data
                                    480 ;--------------------------------------------------------
                                    481 	.area XSEG    (XDATA)
                           00F000   482 _lcdGeneral	=	0xf000
                           00F200   483 _busyPoll	=	0xf200
                           00F100   484 _writeCharacter	=	0xf100
                           00F300   485 _readCharacter	=	0xf300
      000000                        486 _lcdPutCh_x_65536_76:
      000000                        487 	.ds 1
      000001                        488 _goToAddr_x_65536_79:
      000001                        489 	.ds 1
      000002                        490 _goToXY_PARM_2:
      000002                        491 	.ds 1
      000003                        492 _goToXY_x_65536_81:
      000003                        493 	.ds 1
      000004                        494 _customCharacter_x_65536_83:
      000004                        495 	.ds 8
                           00F000   496 _customCharacter_temp8_196609_86	=	0xf000
      00000C                        497 _putsLCD_y_65536_90:
      00000C                        498 	.ds 3
      00000F                        499 _putsLCD_i_65536_91:
      00000F                        500 	.ds 2
      000011                        501 _gets_s_65536_94:
      000011                        502 	.ds 3
      000014                        503 _gets_count_65536_95:
      000014                        504 	.ds 2
      000016                        505 _ramDump_i_65536_100:
      000016                        506 	.ds 1
      000017                        507 _gamePacman_i_65537_112:
      000017                        508 	.ds 2
      000019                        509 _gamePacman_count_65537_112:
      000019                        510 	.ds 2
      00001B                        511 _printBinary_x_65536_125:
      00001B                        512 	.ds 2
      00001D                        513 _atoh_ap_65536_128:
      00001D                        514 	.ds 3
      000020                        515 _atoh_p_65536_129:
      000020                        516 	.ds 3
      000023                        517 _atoh_lcase_65536_129:
      000023                        518 	.ds 2
      000025                        519 _atoh_n_65537_130:
      000025                        520 	.ds 1
                                    521 ;--------------------------------------------------------
                                    522 ; absolute external ram data
                                    523 ;--------------------------------------------------------
                                    524 	.area XABS    (ABS,XDATA)
                                    525 ;--------------------------------------------------------
                                    526 ; external initialized ram data
                                    527 ;--------------------------------------------------------
                                    528 	.area XISEG   (XDATA)
                                    529 	.area HOME    (CODE)
                                    530 	.area GSINIT0 (CODE)
                                    531 	.area GSINIT1 (CODE)
                                    532 	.area GSINIT2 (CODE)
                                    533 	.area GSINIT3 (CODE)
                                    534 	.area GSINIT4 (CODE)
                                    535 	.area GSINIT5 (CODE)
                                    536 	.area GSINIT  (CODE)
                                    537 	.area GSFINAL (CODE)
                                    538 	.area CSEG    (CODE)
                                    539 ;--------------------------------------------------------
                                    540 ; global & static initialisations
                                    541 ;--------------------------------------------------------
                                    542 	.area HOME    (CODE)
                                    543 	.area GSINIT  (CODE)
                                    544 	.area GSFINAL (CODE)
                                    545 	.area GSINIT  (CODE)
                                    546 ;--------------------------------------------------------
                                    547 ; Home
                                    548 ;--------------------------------------------------------
                                    549 	.area HOME    (CODE)
                                    550 	.area HOME    (CODE)
                                    551 ;--------------------------------------------------------
                                    552 ; code
                                    553 ;--------------------------------------------------------
                                    554 	.area CSEG    (CODE)
                                    555 ;------------------------------------------------------------
                                    556 ;Allocation info for local variables in function 'delay'
                                    557 ;------------------------------------------------------------
                                    558 ;i                         Allocated with name '_delay_i_65536_71'
                                    559 ;------------------------------------------------------------
                                    560 ;	lcdCommands.c:9: void delay()
                                    561 ;	-----------------------------------------
                                    562 ;	 function delay
                                    563 ;	-----------------------------------------
      000000                        564 _delay:
                           000007   565 	ar7 = 0x07
                           000006   566 	ar6 = 0x06
                           000005   567 	ar5 = 0x05
                           000004   568 	ar4 = 0x04
                           000003   569 	ar3 = 0x03
                           000002   570 	ar2 = 0x02
                           000001   571 	ar1 = 0x01
                           000000   572 	ar0 = 0x00
                                    573 ;	lcdCommands.c:12: for ( i = 0 ; i < 1000; i++);
      000000 7E E8            [12]  574 	mov	r6,#0xe8
      000002 7F 03            [12]  575 	mov	r7,#0x03
      000004                        576 00104$:
      000004 1E               [12]  577 	dec	r6
      000005 BE FF 01         [24]  578 	cjne	r6,#0xff,00113$
      000008 1F               [12]  579 	dec	r7
      000009                        580 00113$:
      000009 EE               [12]  581 	mov	a,r6
      00000A 4F               [12]  582 	orl	a,r7
      00000B 70 F7            [24]  583 	jnz	00104$
                                    584 ;	lcdCommands.c:13: }
      00000D 22               [24]  585 	ret
                                    586 ;------------------------------------------------------------
                                    587 ;Allocation info for local variables in function 'timerInit'
                                    588 ;------------------------------------------------------------
                                    589 ;	lcdCommands.c:15: void timerInit()
                                    590 ;	-----------------------------------------
                                    591 ;	 function timerInit
                                    592 ;	-----------------------------------------
      00000E                        593 _timerInit:
                                    594 ;	lcdCommands.c:17: TMOD |= 0x01;
      00000E 43 89 01         [24]  595 	orl	_TMOD,#0x01
                                    596 ;	lcdCommands.c:18: TH0 = 0x4B;
      000011 75 8C 4B         [24]  597 	mov	_TH0,#0x4b
                                    598 ;	lcdCommands.c:19: TL0 = 0xFC;
      000014 75 8A FC         [24]  599 	mov	_TL0,#0xfc
                                    600 ;	lcdCommands.c:20: TR0 = 1;           //turn ON Timer zero
                                    601 ;	assignBit
      000017 D2 8C            [12]  602 	setb	_TR0
                                    603 ;	lcdCommands.c:21: EA = 1;            //Enable Global Interrupt bit
                                    604 ;	assignBit
      000019 D2 AF            [12]  605 	setb	_EA
                                    606 ;	lcdCommands.c:22: ET0 = 1;           //Enable TImer0 Interrupt
                                    607 ;	assignBit
      00001B D2 A9            [12]  608 	setb	_ET0
                                    609 ;	lcdCommands.c:23: }
      00001D 22               [24]  610 	ret
                                    611 ;------------------------------------------------------------
                                    612 ;Allocation info for local variables in function 'busyWait'
                                    613 ;------------------------------------------------------------
                                    614 ;	lcdCommands.c:25: void busyWait()
                                    615 ;	-----------------------------------------
                                    616 ;	 function busyWait
                                    617 ;	-----------------------------------------
      00001E                        618 _busyWait:
                                    619 ;	lcdCommands.c:27: while (busyPoll & 0x80);
      00001E                        620 00101$:
      00001E 90 F2 00         [24]  621 	mov	dptr,#_busyPoll
      000021 E0               [24]  622 	movx	a,@dptr
      000022 FE               [12]  623 	mov	r6,a
      000023 A3               [24]  624 	inc	dptr
      000024 E0               [24]  625 	movx	a,@dptr
      000025 EE               [12]  626 	mov	a,r6
      000026 20 E7 F5         [24]  627 	jb	acc.7,00101$
                                    628 ;	lcdCommands.c:28: }
      000029 22               [24]  629 	ret
                                    630 ;------------------------------------------------------------
                                    631 ;Allocation info for local variables in function 'lcdInit'
                                    632 ;------------------------------------------------------------
                                    633 ;	lcdCommands.c:30: void lcdInit()
                                    634 ;	-----------------------------------------
                                    635 ;	 function lcdInit
                                    636 ;	-----------------------------------------
      00002A                        637 _lcdInit:
                                    638 ;	lcdCommands.c:32: delay();
      00002A 12r00r00         [24]  639 	lcall	_delay
                                    640 ;	lcdCommands.c:33: lcdGeneral = 0x30;
      00002D 90 F0 00         [24]  641 	mov	dptr,#_lcdGeneral
      000030 74 30            [12]  642 	mov	a,#0x30
      000032 F0               [24]  643 	movx	@dptr,a
      000033 E4               [12]  644 	clr	a
      000034 A3               [24]  645 	inc	dptr
      000035 F0               [24]  646 	movx	@dptr,a
                                    647 ;	lcdCommands.c:34: delay();
      000036 12r00r00         [24]  648 	lcall	_delay
                                    649 ;	lcdCommands.c:35: lcdGeneral = 0x30;
      000039 90 F0 00         [24]  650 	mov	dptr,#_lcdGeneral
      00003C 74 30            [12]  651 	mov	a,#0x30
      00003E F0               [24]  652 	movx	@dptr,a
      00003F E4               [12]  653 	clr	a
      000040 A3               [24]  654 	inc	dptr
      000041 F0               [24]  655 	movx	@dptr,a
                                    656 ;	lcdCommands.c:36: delay();
      000042 12r00r00         [24]  657 	lcall	_delay
                                    658 ;	lcdCommands.c:37: lcdGeneral = 0x30;
      000045 90 F0 00         [24]  659 	mov	dptr,#_lcdGeneral
      000048 74 30            [12]  660 	mov	a,#0x30
      00004A F0               [24]  661 	movx	@dptr,a
      00004B E4               [12]  662 	clr	a
      00004C A3               [24]  663 	inc	dptr
      00004D F0               [24]  664 	movx	@dptr,a
                                    665 ;	lcdCommands.c:38: busyWait();
      00004E 12r00r1E         [24]  666 	lcall	_busyWait
                                    667 ;	lcdCommands.c:39: lcdGeneral = 0x38;
      000051 90 F0 00         [24]  668 	mov	dptr,#_lcdGeneral
      000054 74 38            [12]  669 	mov	a,#0x38
      000056 F0               [24]  670 	movx	@dptr,a
      000057 E4               [12]  671 	clr	a
      000058 A3               [24]  672 	inc	dptr
      000059 F0               [24]  673 	movx	@dptr,a
                                    674 ;	lcdCommands.c:40: busyWait();
      00005A 12r00r1E         [24]  675 	lcall	_busyWait
                                    676 ;	lcdCommands.c:41: lcdGeneral = 0x08;
      00005D 90 F0 00         [24]  677 	mov	dptr,#_lcdGeneral
      000060 74 08            [12]  678 	mov	a,#0x08
      000062 F0               [24]  679 	movx	@dptr,a
      000063 E4               [12]  680 	clr	a
      000064 A3               [24]  681 	inc	dptr
      000065 F0               [24]  682 	movx	@dptr,a
                                    683 ;	lcdCommands.c:42: busyWait();
      000066 12r00r1E         [24]  684 	lcall	_busyWait
                                    685 ;	lcdCommands.c:43: lcdGeneral = 0x0C;
      000069 90 F0 00         [24]  686 	mov	dptr,#_lcdGeneral
      00006C 74 0C            [12]  687 	mov	a,#0x0c
      00006E F0               [24]  688 	movx	@dptr,a
      00006F E4               [12]  689 	clr	a
      000070 A3               [24]  690 	inc	dptr
      000071 F0               [24]  691 	movx	@dptr,a
                                    692 ;	lcdCommands.c:44: busyWait();
      000072 12r00r1E         [24]  693 	lcall	_busyWait
                                    694 ;	lcdCommands.c:45: lcdGeneral = 0x06;
      000075 90 F0 00         [24]  695 	mov	dptr,#_lcdGeneral
      000078 74 06            [12]  696 	mov	a,#0x06
      00007A F0               [24]  697 	movx	@dptr,a
      00007B E4               [12]  698 	clr	a
      00007C A3               [24]  699 	inc	dptr
      00007D F0               [24]  700 	movx	@dptr,a
                                    701 ;	lcdCommands.c:46: busyWait();
      00007E 12r00r1E         [24]  702 	lcall	_busyWait
                                    703 ;	lcdCommands.c:47: lcdGeneral = 0x01;
      000081 90 F0 00         [24]  704 	mov	dptr,#_lcdGeneral
      000084 74 01            [12]  705 	mov	a,#0x01
      000086 F0               [24]  706 	movx	@dptr,a
      000087 E4               [12]  707 	clr	a
      000088 A3               [24]  708 	inc	dptr
      000089 F0               [24]  709 	movx	@dptr,a
                                    710 ;	lcdCommands.c:48: }
      00008A 22               [24]  711 	ret
                                    712 ;------------------------------------------------------------
                                    713 ;Allocation info for local variables in function 'lcdPutCh'
                                    714 ;------------------------------------------------------------
                                    715 ;x                         Allocated with name '_lcdPutCh_x_65536_76'
                                    716 ;------------------------------------------------------------
                                    717 ;	lcdCommands.c:50: void lcdPutCh(uint8_t x)
                                    718 ;	-----------------------------------------
                                    719 ;	 function lcdPutCh
                                    720 ;	-----------------------------------------
      00008B                        721 _lcdPutCh:
      00008B E5 82            [12]  722 	mov	a,dpl
      00008D 90r00r00         [24]  723 	mov	dptr,#_lcdPutCh_x_65536_76
      000090 F0               [24]  724 	movx	@dptr,a
                                    725 ;	lcdCommands.c:52: busyWait();
      000091 12r00r1E         [24]  726 	lcall	_busyWait
                                    727 ;	lcdCommands.c:53: writeCharacter = x;
      000094 90r00r00         [24]  728 	mov	dptr,#_lcdPutCh_x_65536_76
      000097 E0               [24]  729 	movx	a,@dptr
      000098 90 F1 00         [24]  730 	mov	dptr,#_writeCharacter
      00009B F0               [24]  731 	movx	@dptr,a
      00009C E4               [12]  732 	clr	a
      00009D A3               [24]  733 	inc	dptr
      00009E F0               [24]  734 	movx	@dptr,a
                                    735 ;	lcdCommands.c:54: }
      00009F 22               [24]  736 	ret
                                    737 ;------------------------------------------------------------
                                    738 ;Allocation info for local variables in function 'lcdClear'
                                    739 ;------------------------------------------------------------
                                    740 ;	lcdCommands.c:56: void lcdClear()
                                    741 ;	-----------------------------------------
                                    742 ;	 function lcdClear
                                    743 ;	-----------------------------------------
      0000A0                        744 _lcdClear:
                                    745 ;	lcdCommands.c:58: busyWait();
      0000A0 12r00r1E         [24]  746 	lcall	_busyWait
                                    747 ;	lcdCommands.c:59: lcdGeneral = 0x01;
      0000A3 90 F0 00         [24]  748 	mov	dptr,#_lcdGeneral
      0000A6 74 01            [12]  749 	mov	a,#0x01
      0000A8 F0               [24]  750 	movx	@dptr,a
      0000A9 E4               [12]  751 	clr	a
      0000AA A3               [24]  752 	inc	dptr
      0000AB F0               [24]  753 	movx	@dptr,a
                                    754 ;	lcdCommands.c:60: }
      0000AC 22               [24]  755 	ret
                                    756 ;------------------------------------------------------------
                                    757 ;Allocation info for local variables in function 'goToAddr'
                                    758 ;------------------------------------------------------------
                                    759 ;x                         Allocated with name '_goToAddr_x_65536_79'
                                    760 ;------------------------------------------------------------
                                    761 ;	lcdCommands.c:62: void goToAddr(uint8_t x)
                                    762 ;	-----------------------------------------
                                    763 ;	 function goToAddr
                                    764 ;	-----------------------------------------
      0000AD                        765 _goToAddr:
      0000AD E5 82            [12]  766 	mov	a,dpl
      0000AF 90r00r01         [24]  767 	mov	dptr,#_goToAddr_x_65536_79
      0000B2 F0               [24]  768 	movx	@dptr,a
                                    769 ;	lcdCommands.c:64: busyWait();
      0000B3 12r00r1E         [24]  770 	lcall	_busyWait
                                    771 ;	lcdCommands.c:65: lcdGeneral = 0x80 | x;
      0000B6 90r00r01         [24]  772 	mov	dptr,#_goToAddr_x_65536_79
      0000B9 E0               [24]  773 	movx	a,@dptr
      0000BA FF               [12]  774 	mov	r7,a
      0000BB 7E 00            [12]  775 	mov	r6,#0x00
      0000BD 90 F0 00         [24]  776 	mov	dptr,#_lcdGeneral
      0000C0 74 80            [12]  777 	mov	a,#0x80
      0000C2 4F               [12]  778 	orl	a,r7
      0000C3 F0               [24]  779 	movx	@dptr,a
      0000C4 EE               [12]  780 	mov	a,r6
      0000C5 A3               [24]  781 	inc	dptr
      0000C6 F0               [24]  782 	movx	@dptr,a
                                    783 ;	lcdCommands.c:66: }
      0000C7 22               [24]  784 	ret
                                    785 ;------------------------------------------------------------
                                    786 ;Allocation info for local variables in function 'goToXY'
                                    787 ;------------------------------------------------------------
                                    788 ;y                         Allocated with name '_goToXY_PARM_2'
                                    789 ;x                         Allocated with name '_goToXY_x_65536_81'
                                    790 ;------------------------------------------------------------
                                    791 ;	lcdCommands.c:68: void goToXY(uint8_t x, uint8_t y)
                                    792 ;	-----------------------------------------
                                    793 ;	 function goToXY
                                    794 ;	-----------------------------------------
      0000C8                        795 _goToXY:
      0000C8 E5 82            [12]  796 	mov	a,dpl
      0000CA 90r00r03         [24]  797 	mov	dptr,#_goToXY_x_65536_81
      0000CD F0               [24]  798 	movx	@dptr,a
                                    799 ;	lcdCommands.c:70: busyWait();
      0000CE 12r00r1E         [24]  800 	lcall	_busyWait
                                    801 ;	lcdCommands.c:71: goToAddr(lookUpTable[x][y]);
      0000D1 90r00r03         [24]  802 	mov	dptr,#_goToXY_x_65536_81
      0000D4 E0               [24]  803 	movx	a,@dptr
      0000D5 75 F0 10         [24]  804 	mov	b,#0x10
      0000D8 A4               [48]  805 	mul	ab
      0000D9 24rF4            [12]  806 	add	a,#_lookUpTable
      0000DB FE               [12]  807 	mov	r6,a
      0000DC 74s01            [12]  808 	mov	a,#(_lookUpTable >> 8)
      0000DE 35 F0            [12]  809 	addc	a,b
      0000E0 FF               [12]  810 	mov	r7,a
      0000E1 90r00r02         [24]  811 	mov	dptr,#_goToXY_PARM_2
      0000E4 E0               [24]  812 	movx	a,@dptr
      0000E5 2E               [12]  813 	add	a,r6
      0000E6 F5 82            [12]  814 	mov	dpl,a
      0000E8 E4               [12]  815 	clr	a
      0000E9 3F               [12]  816 	addc	a,r7
      0000EA F5 83            [12]  817 	mov	dph,a
      0000EC E4               [12]  818 	clr	a
      0000ED 93               [24]  819 	movc	a,@a+dptr
      0000EE F5 82            [12]  820 	mov	dpl,a
                                    821 ;	lcdCommands.c:72: }
      0000F0 02r00rAD         [24]  822 	ljmp	_goToAddr
                                    823 ;------------------------------------------------------------
                                    824 ;Allocation info for local variables in function 'customCharacter'
                                    825 ;------------------------------------------------------------
                                    826 ;temp                      Allocated with name '_customCharacter_temp_65536_83'
                                    827 ;i                         Allocated with name '_customCharacter_i_65536_83'
                                    828 ;x                         Allocated with name '_customCharacter_x_65536_83'
                                    829 ;temp8                     Allocated with name '_customCharacter_temp8_196609_86'
                                    830 ;------------------------------------------------------------
                                    831 ;	lcdCommands.c:74: void customCharacter()
                                    832 ;	-----------------------------------------
                                    833 ;	 function customCharacter
                                    834 ;	-----------------------------------------
      0000F3                        835 _customCharacter:
                                    836 ;	lcdCommands.c:79: for(i = 0; i < 8; i++)
      0000F3 7F 00            [12]  837 	mov	r7,#0x00
      0000F5                        838 00106$:
                                    839 ;	lcdCommands.c:81: busyWait();
      0000F5 C0 07            [24]  840 	push	ar7
      0000F7 12r00r1E         [24]  841 	lcall	_busyWait
      0000FA D0 07            [24]  842 	pop	ar7
                                    843 ;	lcdCommands.c:83: temp8 = 0x40 | (0x28 + i);
      0000FC 8F 05            [24]  844 	mov	ar5,r7
      0000FE 7E 00            [12]  845 	mov	r6,#0x00
      000100 74 28            [12]  846 	mov	a,#0x28
      000102 2D               [12]  847 	add	a,r5
      000103 FD               [12]  848 	mov	r5,a
      000104 E4               [12]  849 	clr	a
      000105 3E               [12]  850 	addc	a,r6
      000106 FE               [12]  851 	mov	r6,a
      000107 43 05 40         [24]  852 	orl	ar5,#0x40
      00010A 90 F0 00         [24]  853 	mov	dptr,#_customCharacter_temp8_196609_86
      00010D ED               [12]  854 	mov	a,r5
      00010E F0               [24]  855 	movx	@dptr,a
      00010F EE               [12]  856 	mov	a,r6
      000110 A3               [24]  857 	inc	dptr
      000111 F0               [24]  858 	movx	@dptr,a
                                    859 ;	lcdCommands.c:84: printf("%x %x\n\r",temp8, (0x40 | (0x28 + i)));
      000112 90 F0 00         [24]  860 	mov	dptr,#_customCharacter_temp8_196609_86
      000115 E0               [24]  861 	movx	a,@dptr
      000116 FB               [12]  862 	mov	r3,a
      000117 A3               [24]  863 	inc	dptr
      000118 E0               [24]  864 	movx	a,@dptr
      000119 FC               [12]  865 	mov	r4,a
      00011A C0 07            [24]  866 	push	ar7
      00011C C0 05            [24]  867 	push	ar5
      00011E C0 06            [24]  868 	push	ar6
      000120 C0 03            [24]  869 	push	ar3
      000122 C0 04            [24]  870 	push	ar4
      000124 74r34            [12]  871 	mov	a,#___str_0
      000126 C0 E0            [24]  872 	push	acc
      000128 74s02            [12]  873 	mov	a,#(___str_0 >> 8)
      00012A C0 E0            [24]  874 	push	acc
      00012C 74 80            [12]  875 	mov	a,#0x80
      00012E C0 E0            [24]  876 	push	acc
      000130 12r00r00         [24]  877 	lcall	_printf
      000133 E5 81            [12]  878 	mov	a,sp
      000135 24 F9            [12]  879 	add	a,#0xf9
      000137 F5 81            [12]  880 	mov	sp,a
                                    881 ;	lcdCommands.c:85: busyWait();
      000139 12r00r1E         [24]  882 	lcall	_busyWait
      00013C D0 07            [24]  883 	pop	ar7
                                    884 ;	lcdCommands.c:86: do{
      00013E 8F 06            [24]  885 	mov	ar6,r7
      000140                        886 00102$:
                                    887 ;	lcdCommands.c:87: printf_tiny("\n\rEnter value for Row %d\n\r", (i+1));
      000140 8E 04            [24]  888 	mov	ar4,r6
      000142 7D 00            [12]  889 	mov	r5,#0x00
      000144 0C               [12]  890 	inc	r4
      000145 BC 00 01         [24]  891 	cjne	r4,#0x00,00127$
      000148 0D               [12]  892 	inc	r5
      000149                        893 00127$:
      000149 C0 06            [24]  894 	push	ar6
      00014B C0 04            [24]  895 	push	ar4
      00014D C0 05            [24]  896 	push	ar5
      00014F 74r3C            [12]  897 	mov	a,#___str_1
      000151 C0 E0            [24]  898 	push	acc
      000153 74s02            [12]  899 	mov	a,#(___str_1 >> 8)
      000155 C0 E0            [24]  900 	push	acc
      000157 12r00r00         [24]  901 	lcall	_printf_tiny
      00015A E5 81            [12]  902 	mov	a,sp
      00015C 24 FC            [12]  903 	add	a,#0xfc
      00015E F5 81            [12]  904 	mov	sp,a
                                    905 ;	lcdCommands.c:88: gets(x);
      000160 90r00r04         [24]  906 	mov	dptr,#_customCharacter_x_65536_83
      000163 75 F0 00         [24]  907 	mov	b,#0x00
      000166 12r03r08         [24]  908 	lcall	_gets
                                    909 ;	lcdCommands.c:90: temp = atoh(x);
      000169 90r00r04         [24]  910 	mov	dptr,#_customCharacter_x_65536_83
      00016C 75 F0 00         [24]  911 	mov	b,#0x00
      00016F 12r0ArD9         [24]  912 	lcall	_atoh
      000172 AD 82            [24]  913 	mov	r5,dpl
      000174 D0 06            [24]  914 	pop	ar6
                                    915 ;	lcdCommands.c:91: }while(temp < 0 || temp > 0x1F);
      000176 ED               [12]  916 	mov	a,r5
      000177 24 E0            [12]  917 	add	a,#0xff - 0x1f
      000179 40 C5            [24]  918 	jc	00102$
                                    919 ;	lcdCommands.c:93: writeCharacter = temp;
      00017B 90 F1 00         [24]  920 	mov	dptr,#_writeCharacter
      00017E ED               [12]  921 	mov	a,r5
      00017F F0               [24]  922 	movx	@dptr,a
      000180 E4               [12]  923 	clr	a
      000181 A3               [24]  924 	inc	dptr
      000182 F0               [24]  925 	movx	@dptr,a
                                    926 ;	lcdCommands.c:94: busyWait();
      000183 C0 06            [24]  927 	push	ar6
      000185 12r00r1E         [24]  928 	lcall	_busyWait
                                    929 ;	lcdCommands.c:95: memset(x,'\0',8 * sizeof(char));
      000188 90r00r00         [24]  930 	mov	dptr,#_memset_PARM_2
      00018B E4               [12]  931 	clr	a
      00018C F0               [24]  932 	movx	@dptr,a
      00018D 90r00r00         [24]  933 	mov	dptr,#_memset_PARM_3
      000190 74 08            [12]  934 	mov	a,#0x08
      000192 F0               [24]  935 	movx	@dptr,a
      000193 E4               [12]  936 	clr	a
      000194 A3               [24]  937 	inc	dptr
      000195 F0               [24]  938 	movx	@dptr,a
      000196 90r00r04         [24]  939 	mov	dptr,#_customCharacter_x_65536_83
      000199 75 F0 00         [24]  940 	mov	b,#0x00
      00019C 12r00r00         [24]  941 	lcall	_memset
      00019F D0 06            [24]  942 	pop	ar6
                                    943 ;	lcdCommands.c:79: for(i = 0; i < 8; i++)
      0001A1 EE               [12]  944 	mov	a,r6
      0001A2 04               [12]  945 	inc	a
      0001A3 FF               [12]  946 	mov	r7,a
      0001A4 BF 08 00         [24]  947 	cjne	r7,#0x08,00129$
      0001A7                        948 00129$:
      0001A7 50 03            [24]  949 	jnc	00130$
      0001A9 02r00rF5         [24]  950 	ljmp	00106$
      0001AC                        951 00130$:
                                    952 ;	lcdCommands.c:97: lcdGeneral = 0x80 | 0x11;
      0001AC 90 F0 00         [24]  953 	mov	dptr,#_lcdGeneral
      0001AF 74 91            [12]  954 	mov	a,#0x91
      0001B1 F0               [24]  955 	movx	@dptr,a
      0001B2 E4               [12]  956 	clr	a
      0001B3 A3               [24]  957 	inc	dptr
      0001B4 F0               [24]  958 	movx	@dptr,a
                                    959 ;	lcdCommands.c:98: busyWait();
      0001B5 12r00r1E         [24]  960 	lcall	_busyWait
                                    961 ;	lcdCommands.c:99: writeCharacter = 0x05;
      0001B8 90 F1 00         [24]  962 	mov	dptr,#_writeCharacter
      0001BB 74 05            [12]  963 	mov	a,#0x05
      0001BD F0               [24]  964 	movx	@dptr,a
      0001BE E4               [12]  965 	clr	a
      0001BF A3               [24]  966 	inc	dptr
      0001C0 F0               [24]  967 	movx	@dptr,a
                                    968 ;	lcdCommands.c:100: }
      0001C1 22               [24]  969 	ret
                                    970 ;------------------------------------------------------------
                                    971 ;Allocation info for local variables in function 'readLCD'
                                    972 ;------------------------------------------------------------
                                    973 ;temp1                     Allocated with name '_readLCD_temp1_65537_89'
                                    974 ;------------------------------------------------------------
                                    975 ;	lcdCommands.c:102: uint8_t readLCD()
                                    976 ;	-----------------------------------------
                                    977 ;	 function readLCD
                                    978 ;	-----------------------------------------
      0001C2                        979 _readLCD:
                                    980 ;	lcdCommands.c:104: busyWait();
      0001C2 12r00r1E         [24]  981 	lcall	_busyWait
                                    982 ;	lcdCommands.c:105: uint8_t temp1 = readCharacter;
      0001C5 90 F3 00         [24]  983 	mov	dptr,#_readCharacter
      0001C8 E0               [24]  984 	movx	a,@dptr
      0001C9 FE               [12]  985 	mov	r6,a
      0001CA A3               [24]  986 	inc	dptr
      0001CB E0               [24]  987 	movx	a,@dptr
                                    988 ;	lcdCommands.c:106: return temp1;
      0001CC 8E 82            [24]  989 	mov	dpl,r6
                                    990 ;	lcdCommands.c:107: }
      0001CE 22               [24]  991 	ret
                                    992 ;------------------------------------------------------------
                                    993 ;Allocation info for local variables in function 'putsLCD'
                                    994 ;------------------------------------------------------------
                                    995 ;sloc0                     Allocated with name '_putsLCD_sloc0_1_0'
                                    996 ;sloc1                     Allocated with name '_putsLCD_sloc1_1_0'
                                    997 ;y                         Allocated with name '_putsLCD_y_65536_90'
                                    998 ;i                         Allocated with name '_putsLCD_i_65536_91'
                                    999 ;j                         Allocated with name '_putsLCD_j_65536_91'
                                   1000 ;k                         Allocated with name '_putsLCD_k_65536_91'
                                   1001 ;------------------------------------------------------------
                                   1002 ;	lcdCommands.c:109: void putsLCD(char* y)
                                   1003 ;	-----------------------------------------
                                   1004 ;	 function putsLCD
                                   1005 ;	-----------------------------------------
      0001CF                       1006 _putsLCD:
      0001CF AF F0            [24] 1007 	mov	r7,b
      0001D1 AE 83            [24] 1008 	mov	r6,dph
      0001D3 E5 82            [12] 1009 	mov	a,dpl
      0001D5 90r00r0C         [24] 1010 	mov	dptr,#_putsLCD_y_65536_90
      0001D8 F0               [24] 1011 	movx	@dptr,a
      0001D9 EE               [12] 1012 	mov	a,r6
      0001DA A3               [24] 1013 	inc	dptr
      0001DB F0               [24] 1014 	movx	@dptr,a
      0001DC EF               [12] 1015 	mov	a,r7
      0001DD A3               [24] 1016 	inc	dptr
      0001DE F0               [24] 1017 	movx	@dptr,a
                                   1018 ;	lcdCommands.c:111: int i = 0,j = 0, k =0;
      0001DF 90r00r0F         [24] 1019 	mov	dptr,#_putsLCD_i_65536_91
      0001E2 E4               [12] 1020 	clr	a
      0001E3 F0               [24] 1021 	movx	@dptr,a
      0001E4 A3               [24] 1022 	inc	dptr
      0001E5 F0               [24] 1023 	movx	@dptr,a
                                   1024 ;	lcdCommands.c:112: while(y[i + (j * 16)] != '\0')
      0001E6 90r00r0C         [24] 1025 	mov	dptr,#_putsLCD_y_65536_90
      0001E9 E0               [24] 1026 	movx	a,@dptr
      0001EA F5*02            [12] 1027 	mov	_putsLCD_sloc1_1_0,a
      0001EC A3               [24] 1028 	inc	dptr
      0001ED E0               [24] 1029 	movx	a,@dptr
      0001EE F5*03            [12] 1030 	mov	(_putsLCD_sloc1_1_0 + 1),a
      0001F0 A3               [24] 1031 	inc	dptr
      0001F1 E0               [24] 1032 	movx	a,@dptr
      0001F2 F5*04            [12] 1033 	mov	(_putsLCD_sloc1_1_0 + 2),a
      0001F4 AA*02            [24] 1034 	mov	r2,_putsLCD_sloc1_1_0
      0001F6 AB*03            [24] 1035 	mov	r3,(_putsLCD_sloc1_1_0 + 1)
      0001F8 AC*04            [24] 1036 	mov	r4,(_putsLCD_sloc1_1_0 + 2)
      0001FA 78 00            [12] 1037 	mov	r0,#0x00
      0001FC 79 00            [12] 1038 	mov	r1,#0x00
      0001FE                       1039 00103$:
      0001FE 88 06            [24] 1040 	mov	ar6,r0
      000200 E9               [12] 1041 	mov	a,r1
      000201 C4               [12] 1042 	swap	a
      000202 54 F0            [12] 1043 	anl	a,#0xf0
      000204 CE               [12] 1044 	xch	a,r6
      000205 C4               [12] 1045 	swap	a
      000206 CE               [12] 1046 	xch	a,r6
      000207 6E               [12] 1047 	xrl	a,r6
      000208 CE               [12] 1048 	xch	a,r6
      000209 54 F0            [12] 1049 	anl	a,#0xf0
      00020B CE               [12] 1050 	xch	a,r6
      00020C 6E               [12] 1051 	xrl	a,r6
      00020D FF               [12] 1052 	mov	r7,a
      00020E 90r00r0F         [24] 1053 	mov	dptr,#_putsLCD_i_65536_91
      000211 E0               [24] 1054 	movx	a,@dptr
      000212 F5*00            [12] 1055 	mov	_putsLCD_sloc0_1_0,a
      000214 A3               [24] 1056 	inc	dptr
      000215 E0               [24] 1057 	movx	a,@dptr
      000216 F5*01            [12] 1058 	mov	(_putsLCD_sloc0_1_0 + 1),a
      000218 EE               [12] 1059 	mov	a,r6
      000219 25*00            [12] 1060 	add	a,_putsLCD_sloc0_1_0
      00021B FE               [12] 1061 	mov	r6,a
      00021C EF               [12] 1062 	mov	a,r7
      00021D 35*01            [12] 1063 	addc	a,(_putsLCD_sloc0_1_0 + 1)
      00021F FF               [12] 1064 	mov	r7,a
      000220 EE               [12] 1065 	mov	a,r6
      000221 2A               [12] 1066 	add	a,r2
      000222 FE               [12] 1067 	mov	r6,a
      000223 EF               [12] 1068 	mov	a,r7
      000224 3B               [12] 1069 	addc	a,r3
      000225 FF               [12] 1070 	mov	r7,a
      000226 8C 05            [24] 1071 	mov	ar5,r4
      000228 8E 82            [24] 1072 	mov	dpl,r6
      00022A 8F 83            [24] 1073 	mov	dph,r7
      00022C 8D F0            [24] 1074 	mov	b,r5
      00022E 12r00r00         [24] 1075 	lcall	__gptrget
      000231 70 01            [24] 1076 	jnz	00121$
      000233 22               [24] 1077 	ret
      000234                       1078 00121$:
                                   1079 ;	lcdCommands.c:114: busyWait();
      000234 C0 04            [24] 1080 	push	ar4
      000236 C0 03            [24] 1081 	push	ar3
      000238 C0 02            [24] 1082 	push	ar2
      00023A C0 01            [24] 1083 	push	ar1
      00023C C0 00            [24] 1084 	push	ar0
      00023E 12r00r1E         [24] 1085 	lcall	_busyWait
      000241 D0 00            [24] 1086 	pop	ar0
      000243 D0 01            [24] 1087 	pop	ar1
      000245 D0 02            [24] 1088 	pop	ar2
      000247 D0 03            [24] 1089 	pop	ar3
      000249 D0 04            [24] 1090 	pop	ar4
                                   1091 ;	lcdCommands.c:115: if( i > 15)
      00024B C3               [12] 1092 	clr	c
      00024C 74 0F            [12] 1093 	mov	a,#0x0f
      00024E 95*00            [12] 1094 	subb	a,_putsLCD_sloc0_1_0
      000250 74 80            [12] 1095 	mov	a,#(0x00 ^ 0x80)
      000252 85*01 F0         [24] 1096 	mov	b,(_putsLCD_sloc0_1_0 + 1)
      000255 63 F0 80         [24] 1097 	xrl	b,#0x80
      000258 95 F0            [12] 1098 	subb	a,b
      00025A 50 0C            [24] 1099 	jnc	00102$
                                   1100 ;	lcdCommands.c:117: j++;
      00025C 08               [12] 1101 	inc	r0
      00025D B8 00 01         [24] 1102 	cjne	r0,#0x00,00123$
      000260 09               [12] 1103 	inc	r1
      000261                       1104 00123$:
                                   1105 ;	lcdCommands.c:118: i = 0;
      000261 90r00r0F         [24] 1106 	mov	dptr,#_putsLCD_i_65536_91
      000264 E4               [12] 1107 	clr	a
      000265 F0               [24] 1108 	movx	@dptr,a
      000266 A3               [24] 1109 	inc	dptr
      000267 F0               [24] 1110 	movx	@dptr,a
      000268                       1111 00102$:
                                   1112 ;	lcdCommands.c:121: goToAddr(lookUpTable[j][i]);
      000268 C0 02            [24] 1113 	push	ar2
      00026A C0 03            [24] 1114 	push	ar3
      00026C C0 04            [24] 1115 	push	ar4
      00026E 88 03            [24] 1116 	mov	ar3,r0
      000270 E9               [12] 1117 	mov	a,r1
      000271 C4               [12] 1118 	swap	a
      000272 54 F0            [12] 1119 	anl	a,#0xf0
      000274 CB               [12] 1120 	xch	a,r3
      000275 C4               [12] 1121 	swap	a
      000276 CB               [12] 1122 	xch	a,r3
      000277 6B               [12] 1123 	xrl	a,r3
      000278 CB               [12] 1124 	xch	a,r3
      000279 54 F0            [12] 1125 	anl	a,#0xf0
      00027B CB               [12] 1126 	xch	a,r3
      00027C 6B               [12] 1127 	xrl	a,r3
      00027D FC               [12] 1128 	mov	r4,a
      00027E EB               [12] 1129 	mov	a,r3
      00027F 24rF4            [12] 1130 	add	a,#_lookUpTable
      000281 FA               [12] 1131 	mov	r2,a
      000282 EC               [12] 1132 	mov	a,r4
      000283 34s01            [12] 1133 	addc	a,#(_lookUpTable >> 8)
      000285 FF               [12] 1134 	mov	r7,a
      000286 90r00r0F         [24] 1135 	mov	dptr,#_putsLCD_i_65536_91
      000289 E0               [24] 1136 	movx	a,@dptr
      00028A FD               [12] 1137 	mov	r5,a
      00028B A3               [24] 1138 	inc	dptr
      00028C E0               [24] 1139 	movx	a,@dptr
      00028D FE               [12] 1140 	mov	r6,a
      00028E ED               [12] 1141 	mov	a,r5
      00028F 2A               [12] 1142 	add	a,r2
      000290 F5 82            [12] 1143 	mov	dpl,a
      000292 EE               [12] 1144 	mov	a,r6
      000293 3F               [12] 1145 	addc	a,r7
      000294 F5 83            [12] 1146 	mov	dph,a
      000296 E4               [12] 1147 	clr	a
      000297 93               [24] 1148 	movc	a,@a+dptr
      000298 F5 82            [12] 1149 	mov	dpl,a
      00029A C0 06            [24] 1150 	push	ar6
      00029C C0 05            [24] 1151 	push	ar5
      00029E C0 04            [24] 1152 	push	ar4
      0002A0 C0 03            [24] 1153 	push	ar3
      0002A2 C0 02            [24] 1154 	push	ar2
      0002A4 C0 01            [24] 1155 	push	ar1
      0002A6 C0 00            [24] 1156 	push	ar0
      0002A8 12r00rAD         [24] 1157 	lcall	_goToAddr
      0002AB D0 00            [24] 1158 	pop	ar0
      0002AD D0 01            [24] 1159 	pop	ar1
      0002AF D0 02            [24] 1160 	pop	ar2
      0002B1 D0 03            [24] 1161 	pop	ar3
      0002B3 D0 04            [24] 1162 	pop	ar4
      0002B5 D0 05            [24] 1163 	pop	ar5
      0002B7 D0 06            [24] 1164 	pop	ar6
                                   1165 ;	lcdCommands.c:122: lcdPutCh(y[i + (j * 16)]);
      0002B9 EB               [12] 1166 	mov	a,r3
      0002BA 2D               [12] 1167 	add	a,r5
      0002BB FB               [12] 1168 	mov	r3,a
      0002BC EC               [12] 1169 	mov	a,r4
      0002BD 3E               [12] 1170 	addc	a,r6
      0002BE FC               [12] 1171 	mov	r4,a
      0002BF EB               [12] 1172 	mov	a,r3
      0002C0 25*02            [12] 1173 	add	a,_putsLCD_sloc1_1_0
      0002C2 FB               [12] 1174 	mov	r3,a
      0002C3 EC               [12] 1175 	mov	a,r4
      0002C4 35*03            [12] 1176 	addc	a,(_putsLCD_sloc1_1_0 + 1)
      0002C6 FC               [12] 1177 	mov	r4,a
      0002C7 AF*04            [24] 1178 	mov	r7,(_putsLCD_sloc1_1_0 + 2)
      0002C9 8B 82            [24] 1179 	mov	dpl,r3
      0002CB 8C 83            [24] 1180 	mov	dph,r4
      0002CD 8F F0            [24] 1181 	mov	b,r7
      0002CF 12r00r00         [24] 1182 	lcall	__gptrget
      0002D2 FB               [12] 1183 	mov	r3,a
      0002D3 F5 82            [12] 1184 	mov	dpl,a
      0002D5 C0 06            [24] 1185 	push	ar6
      0002D7 C0 05            [24] 1186 	push	ar5
      0002D9 C0 04            [24] 1187 	push	ar4
      0002DB C0 03            [24] 1188 	push	ar3
      0002DD C0 02            [24] 1189 	push	ar2
      0002DF C0 01            [24] 1190 	push	ar1
      0002E1 C0 00            [24] 1191 	push	ar0
      0002E3 12r00r8B         [24] 1192 	lcall	_lcdPutCh
      0002E6 D0 00            [24] 1193 	pop	ar0
      0002E8 D0 01            [24] 1194 	pop	ar1
      0002EA D0 02            [24] 1195 	pop	ar2
      0002EC D0 03            [24] 1196 	pop	ar3
      0002EE D0 04            [24] 1197 	pop	ar4
      0002F0 D0 05            [24] 1198 	pop	ar5
      0002F2 D0 06            [24] 1199 	pop	ar6
                                   1200 ;	lcdCommands.c:123: i++;
      0002F4 90r00r0F         [24] 1201 	mov	dptr,#_putsLCD_i_65536_91
      0002F7 74 01            [12] 1202 	mov	a,#0x01
      0002F9 2D               [12] 1203 	add	a,r5
      0002FA F0               [24] 1204 	movx	@dptr,a
      0002FB E4               [12] 1205 	clr	a
      0002FC 3E               [12] 1206 	addc	a,r6
      0002FD A3               [24] 1207 	inc	dptr
      0002FE F0               [24] 1208 	movx	@dptr,a
      0002FF D0 04            [24] 1209 	pop	ar4
      000301 D0 03            [24] 1210 	pop	ar3
      000303 D0 02            [24] 1211 	pop	ar2
                                   1212 ;	lcdCommands.c:125: }
      000305 02r01rFE         [24] 1213 	ljmp	00103$
                                   1214 ;------------------------------------------------------------
                                   1215 ;Allocation info for local variables in function 'gets'
                                   1216 ;------------------------------------------------------------
                                   1217 ;s                         Allocated with name '_gets_s_65536_94'
                                   1218 ;c                         Allocated with name '_gets_c_65536_95'
                                   1219 ;count                     Allocated with name '_gets_count_65536_95'
                                   1220 ;------------------------------------------------------------
                                   1221 ;	lcdCommands.c:127: char *gets (char *s)
                                   1222 ;	-----------------------------------------
                                   1223 ;	 function gets
                                   1224 ;	-----------------------------------------
      000308                       1225 _gets:
      000308 AF F0            [24] 1226 	mov	r7,b
      00030A AE 83            [24] 1227 	mov	r6,dph
      00030C E5 82            [12] 1228 	mov	a,dpl
      00030E 90r00r11         [24] 1229 	mov	dptr,#_gets_s_65536_94
      000311 F0               [24] 1230 	movx	@dptr,a
      000312 EE               [12] 1231 	mov	a,r6
      000313 A3               [24] 1232 	inc	dptr
      000314 F0               [24] 1233 	movx	@dptr,a
      000315 EF               [12] 1234 	mov	a,r7
      000316 A3               [24] 1235 	inc	dptr
      000317 F0               [24] 1236 	movx	@dptr,a
                                   1237 ;	lcdCommands.c:130: unsigned int count = 0;
      000318 90r00r14         [24] 1238 	mov	dptr,#_gets_count_65536_95
      00031B E4               [12] 1239 	clr	a
      00031C F0               [24] 1240 	movx	@dptr,a
      00031D A3               [24] 1241 	inc	dptr
      00031E F0               [24] 1242 	movx	@dptr,a
                                   1243 ;	lcdCommands.c:132: while (1)
      00031F                       1244 00111$:
                                   1245 ;	lcdCommands.c:134: c = getchar ();
      00031F 12r00r00         [24] 1246 	lcall	_getchar
      000322 AE 82            [24] 1247 	mov	r6,dpl
      000324 AF 83            [24] 1248 	mov	r7,dph
                                   1249 ;	lcdCommands.c:135: switch(c)
      000326 BE 08 02         [24] 1250 	cjne	r6,#0x08,00139$
      000329 80 0D            [24] 1251 	sjmp	00101$
      00032B                       1252 00139$:
      00032B BE 0A 02         [24] 1253 	cjne	r6,#0x0a,00140$
      00032E 80 62            [24] 1254 	sjmp	00105$
      000330                       1255 00140$:
      000330 BE 0D 02         [24] 1256 	cjne	r6,#0x0d,00141$
      000333 80 5D            [24] 1257 	sjmp	00105$
      000335                       1258 00141$:
      000335 02r03rBA         [24] 1259 	ljmp	00106$
                                   1260 ;	lcdCommands.c:137: case '\b': /* backspace */
      000338                       1261 00101$:
                                   1262 ;	lcdCommands.c:138: if (count)
      000338 90r00r14         [24] 1263 	mov	dptr,#_gets_count_65536_95
      00033B E0               [24] 1264 	movx	a,@dptr
      00033C FD               [12] 1265 	mov	r5,a
      00033D A3               [24] 1266 	inc	dptr
      00033E E0               [24] 1267 	movx	a,@dptr
      00033F FF               [12] 1268 	mov	r7,a
      000340 90r00r14         [24] 1269 	mov	dptr,#_gets_count_65536_95
      000343 E0               [24] 1270 	movx	a,@dptr
      000344 F5 F0            [12] 1271 	mov	b,a
      000346 A3               [24] 1272 	inc	dptr
      000347 E0               [24] 1273 	movx	a,@dptr
      000348 45 F0            [12] 1274 	orl	a,b
      00034A 70 03            [24] 1275 	jnz	00142$
      00034C 02r03rF2         [24] 1276 	ljmp	00107$
      00034F                       1277 00142$:
                                   1278 ;	lcdCommands.c:140: putchar ('\b');
      00034F 90 00 08         [24] 1279 	mov	dptr,#0x0008
      000352 C0 07            [24] 1280 	push	ar7
      000354 C0 05            [24] 1281 	push	ar5
      000356 12r00r00         [24] 1282 	lcall	_putchar
                                   1283 ;	lcdCommands.c:141: putchar (' ');
      000359 90 00 20         [24] 1284 	mov	dptr,#0x0020
      00035C 12r00r00         [24] 1285 	lcall	_putchar
                                   1286 ;	lcdCommands.c:142: putchar ('\b');
      00035F 90 00 08         [24] 1287 	mov	dptr,#0x0008
      000362 12r00r00         [24] 1288 	lcall	_putchar
      000365 D0 05            [24] 1289 	pop	ar5
      000367 D0 07            [24] 1290 	pop	ar7
                                   1291 ;	lcdCommands.c:143: --s;
      000369 90r00r11         [24] 1292 	mov	dptr,#_gets_s_65536_94
      00036C E0               [24] 1293 	movx	a,@dptr
      00036D 24 FF            [12] 1294 	add	a,#0xff
      00036F FA               [12] 1295 	mov	r2,a
      000370 A3               [24] 1296 	inc	dptr
      000371 E0               [24] 1297 	movx	a,@dptr
      000372 34 FF            [12] 1298 	addc	a,#0xff
      000374 FB               [12] 1299 	mov	r3,a
      000375 A3               [24] 1300 	inc	dptr
      000376 E0               [24] 1301 	movx	a,@dptr
      000377 FC               [12] 1302 	mov	r4,a
      000378 90r00r11         [24] 1303 	mov	dptr,#_gets_s_65536_94
      00037B EA               [12] 1304 	mov	a,r2
      00037C F0               [24] 1305 	movx	@dptr,a
      00037D EB               [12] 1306 	mov	a,r3
      00037E A3               [24] 1307 	inc	dptr
      00037F F0               [24] 1308 	movx	@dptr,a
      000380 EC               [12] 1309 	mov	a,r4
      000381 A3               [24] 1310 	inc	dptr
      000382 F0               [24] 1311 	movx	@dptr,a
                                   1312 ;	lcdCommands.c:144: --count;
      000383 1D               [12] 1313 	dec	r5
      000384 BD FF 01         [24] 1314 	cjne	r5,#0xff,00143$
      000387 1F               [12] 1315 	dec	r7
      000388                       1316 00143$:
      000388 90r00r14         [24] 1317 	mov	dptr,#_gets_count_65536_95
      00038B ED               [12] 1318 	mov	a,r5
      00038C F0               [24] 1319 	movx	@dptr,a
      00038D EF               [12] 1320 	mov	a,r7
      00038E A3               [24] 1321 	inc	dptr
      00038F F0               [24] 1322 	movx	@dptr,a
                                   1323 ;	lcdCommands.c:146: break;
                                   1324 ;	lcdCommands.c:149: case '\r': /* CR or LF */
      000390 80 60            [24] 1325 	sjmp	00107$
      000392                       1326 00105$:
                                   1327 ;	lcdCommands.c:150: putchar ('\r');
      000392 90 00 0D         [24] 1328 	mov	dptr,#0x000d
      000395 12r00r00         [24] 1329 	lcall	_putchar
                                   1330 ;	lcdCommands.c:151: putchar ('\n');
      000398 90 00 0A         [24] 1331 	mov	dptr,#0x000a
      00039B 12r00r00         [24] 1332 	lcall	_putchar
                                   1333 ;	lcdCommands.c:152: *s = 0;
      00039E 90r00r11         [24] 1334 	mov	dptr,#_gets_s_65536_94
      0003A1 E0               [24] 1335 	movx	a,@dptr
      0003A2 FC               [12] 1336 	mov	r4,a
      0003A3 A3               [24] 1337 	inc	dptr
      0003A4 E0               [24] 1338 	movx	a,@dptr
      0003A5 FD               [12] 1339 	mov	r5,a
      0003A6 A3               [24] 1340 	inc	dptr
      0003A7 E0               [24] 1341 	movx	a,@dptr
      0003A8 FF               [12] 1342 	mov	r7,a
      0003A9 8C 82            [24] 1343 	mov	dpl,r4
      0003AB 8D 83            [24] 1344 	mov	dph,r5
      0003AD 8F F0            [24] 1345 	mov	b,r7
      0003AF E4               [12] 1346 	clr	a
      0003B0 12r00r00         [24] 1347 	lcall	__gptrput
                                   1348 ;	lcdCommands.c:153: return s;
      0003B3 8C 82            [24] 1349 	mov	dpl,r4
      0003B5 8D 83            [24] 1350 	mov	dph,r5
      0003B7 8F F0            [24] 1351 	mov	b,r7
                                   1352 ;	lcdCommands.c:155: default:
      0003B9 22               [24] 1353 	ret
      0003BA                       1354 00106$:
                                   1355 ;	lcdCommands.c:156: *s++ = c;
      0003BA 90r00r11         [24] 1356 	mov	dptr,#_gets_s_65536_94
      0003BD E0               [24] 1357 	movx	a,@dptr
      0003BE FC               [12] 1358 	mov	r4,a
      0003BF A3               [24] 1359 	inc	dptr
      0003C0 E0               [24] 1360 	movx	a,@dptr
      0003C1 FD               [12] 1361 	mov	r5,a
      0003C2 A3               [24] 1362 	inc	dptr
      0003C3 E0               [24] 1363 	movx	a,@dptr
      0003C4 FF               [12] 1364 	mov	r7,a
      0003C5 8C 82            [24] 1365 	mov	dpl,r4
      0003C7 8D 83            [24] 1366 	mov	dph,r5
      0003C9 8F F0            [24] 1367 	mov	b,r7
      0003CB EE               [12] 1368 	mov	a,r6
      0003CC 12r00r00         [24] 1369 	lcall	__gptrput
      0003CF 90r00r11         [24] 1370 	mov	dptr,#_gets_s_65536_94
      0003D2 74 01            [12] 1371 	mov	a,#0x01
      0003D4 2C               [12] 1372 	add	a,r4
      0003D5 F0               [24] 1373 	movx	@dptr,a
      0003D6 E4               [12] 1374 	clr	a
      0003D7 3D               [12] 1375 	addc	a,r5
      0003D8 A3               [24] 1376 	inc	dptr
      0003D9 F0               [24] 1377 	movx	@dptr,a
      0003DA EF               [12] 1378 	mov	a,r7
      0003DB A3               [24] 1379 	inc	dptr
      0003DC F0               [24] 1380 	movx	@dptr,a
                                   1381 ;	lcdCommands.c:157: ++count;
      0003DD 90r00r14         [24] 1382 	mov	dptr,#_gets_count_65536_95
      0003E0 E0               [24] 1383 	movx	a,@dptr
      0003E1 24 01            [12] 1384 	add	a,#0x01
      0003E3 F0               [24] 1385 	movx	@dptr,a
      0003E4 A3               [24] 1386 	inc	dptr
      0003E5 E0               [24] 1387 	movx	a,@dptr
      0003E6 34 00            [12] 1388 	addc	a,#0x00
      0003E8 F0               [24] 1389 	movx	@dptr,a
                                   1390 ;	lcdCommands.c:158: putchar (c);
      0003E9 7F 00            [12] 1391 	mov	r7,#0x00
      0003EB 8E 82            [24] 1392 	mov	dpl,r6
      0003ED 8F 83            [24] 1393 	mov	dph,r7
      0003EF 12r00r00         [24] 1394 	lcall	_putchar
                                   1395 ;	lcdCommands.c:160: }
      0003F2                       1396 00107$:
                                   1397 ;	lcdCommands.c:161: if (count == 48)
      0003F2 90r00r14         [24] 1398 	mov	dptr,#_gets_count_65536_95
      0003F5 E0               [24] 1399 	movx	a,@dptr
      0003F6 FE               [12] 1400 	mov	r6,a
      0003F7 A3               [24] 1401 	inc	dptr
      0003F8 E0               [24] 1402 	movx	a,@dptr
      0003F9 FF               [12] 1403 	mov	r7,a
      0003FA BE 30 05         [24] 1404 	cjne	r6,#0x30,00144$
      0003FD BF 00 02         [24] 1405 	cjne	r7,#0x00,00144$
      000400 80 03            [24] 1406 	sjmp	00145$
      000402                       1407 00144$:
      000402 02r03r1F         [24] 1408 	ljmp	00111$
      000405                       1409 00145$:
                                   1410 ;	lcdCommands.c:163: printf("\n\rPlease Input a maximum of 48 characters\n\r");
      000405 74r57            [12] 1411 	mov	a,#___str_2
      000407 C0 E0            [24] 1412 	push	acc
      000409 74s02            [12] 1413 	mov	a,#(___str_2 >> 8)
      00040B C0 E0            [24] 1414 	push	acc
      00040D 74 80            [12] 1415 	mov	a,#0x80
      00040F C0 E0            [24] 1416 	push	acc
      000411 12r00r00         [24] 1417 	lcall	_printf
      000414 15 81            [12] 1418 	dec	sp
      000416 15 81            [12] 1419 	dec	sp
      000418 15 81            [12] 1420 	dec	sp
                                   1421 ;	lcdCommands.c:164: break;
                                   1422 ;	lcdCommands.c:167: }
      00041A 22               [24] 1423 	ret
                                   1424 ;------------------------------------------------------------
                                   1425 ;Allocation info for local variables in function 'ramDump'
                                   1426 ;------------------------------------------------------------
                                   1427 ;i                         Allocated with name '_ramDump_i_65536_100'
                                   1428 ;j                         Allocated with name '_ramDump_j_65536_100'
                                   1429 ;x                         Allocated with name '_ramDump_x_196609_103'
                                   1430 ;x                         Allocated with name '_ramDump_x_196609_108'
                                   1431 ;------------------------------------------------------------
                                   1432 ;	lcdCommands.c:169: void ramDump()
                                   1433 ;	-----------------------------------------
                                   1434 ;	 function ramDump
                                   1435 ;	-----------------------------------------
      00041B                       1436 _ramDump:
                                   1437 ;	lcdCommands.c:173: printf_tiny("\n\rDDRAM Contents\n\r");
      00041B 74r83            [12] 1438 	mov	a,#___str_3
      00041D C0 E0            [24] 1439 	push	acc
      00041F 74s02            [12] 1440 	mov	a,#(___str_3 >> 8)
      000421 C0 E0            [24] 1441 	push	acc
      000423 12r00r00         [24] 1442 	lcall	_printf_tiny
      000426 15 81            [12] 1443 	dec	sp
      000428 15 81            [12] 1444 	dec	sp
                                   1445 ;	lcdCommands.c:174: for (i = 0; i < 128; i += 16)      //Print 64 ASCII characters in each line
      00042A 90r00r16         [24] 1446 	mov	dptr,#_ramDump_i_65536_100
      00042D E4               [12] 1447 	clr	a
      00042E F0               [24] 1448 	movx	@dptr,a
      00042F                       1449 00109$:
                                   1450 ;	lcdCommands.c:176: lcdGeneral = 0x80 | i;
      00042F 90r00r16         [24] 1451 	mov	dptr,#_ramDump_i_65536_100
      000432 E0               [24] 1452 	movx	a,@dptr
      000433 FF               [12] 1453 	mov	r7,a
      000434 FD               [12] 1454 	mov	r5,a
      000435 7E 00            [12] 1455 	mov	r6,#0x00
      000437 90 F0 00         [24] 1456 	mov	dptr,#_lcdGeneral
      00043A 74 80            [12] 1457 	mov	a,#0x80
      00043C 4D               [12] 1458 	orl	a,r5
      00043D F0               [24] 1459 	movx	@dptr,a
      00043E EE               [12] 1460 	mov	a,r6
      00043F A3               [24] 1461 	inc	dptr
      000440 F0               [24] 1462 	movx	@dptr,a
                                   1463 ;	lcdCommands.c:177: uint8_t x = readLCD();
      000441 C0 07            [24] 1464 	push	ar7
      000443 C0 06            [24] 1465 	push	ar6
      000445 C0 05            [24] 1466 	push	ar5
      000447 12r01rC2         [24] 1467 	lcall	_readLCD
      00044A AC 82            [24] 1468 	mov	r4,dpl
      00044C D0 05            [24] 1469 	pop	ar5
      00044E D0 06            [24] 1470 	pop	ar6
                                   1471 ;	lcdCommands.c:178: printf("%2x: ",i);
      000450 C0 06            [24] 1472 	push	ar6
      000452 C0 05            [24] 1473 	push	ar5
      000454 C0 04            [24] 1474 	push	ar4
      000456 C0 05            [24] 1475 	push	ar5
      000458 C0 06            [24] 1476 	push	ar6
      00045A 74r96            [12] 1477 	mov	a,#___str_4
      00045C C0 E0            [24] 1478 	push	acc
      00045E 74s02            [12] 1479 	mov	a,#(___str_4 >> 8)
      000460 C0 E0            [24] 1480 	push	acc
      000462 74 80            [12] 1481 	mov	a,#0x80
      000464 C0 E0            [24] 1482 	push	acc
      000466 12r00r00         [24] 1483 	lcall	_printf
      000469 E5 81            [12] 1484 	mov	a,sp
      00046B 24 FB            [12] 1485 	add	a,#0xfb
      00046D F5 81            [12] 1486 	mov	sp,a
      00046F D0 04            [24] 1487 	pop	ar4
      000471 D0 05            [24] 1488 	pop	ar5
      000473 D0 06            [24] 1489 	pop	ar6
      000475 D0 07            [24] 1490 	pop	ar7
                                   1491 ;	lcdCommands.c:179: for (j = i; j < (i+16) && j < 128; j++)    //Print the contents of buffer in ASCII
      000477                       1492 00107$:
      000477 8F 02            [24] 1493 	mov	ar2,r7
      000479 7B 00            [12] 1494 	mov	r3,#0x00
      00047B 74 10            [12] 1495 	mov	a,#0x10
      00047D 2A               [12] 1496 	add	a,r2
      00047E FA               [12] 1497 	mov	r2,a
      00047F E4               [12] 1498 	clr	a
      000480 3B               [12] 1499 	addc	a,r3
      000481 FB               [12] 1500 	mov	r3,a
      000482 C3               [12] 1501 	clr	c
      000483 ED               [12] 1502 	mov	a,r5
      000484 9A               [12] 1503 	subb	a,r2
      000485 EE               [12] 1504 	mov	a,r6
      000486 64 80            [12] 1505 	xrl	a,#0x80
      000488 8B F0            [24] 1506 	mov	b,r3
      00048A 63 F0 80         [24] 1507 	xrl	b,#0x80
      00048D 95 F0            [12] 1508 	subb	a,b
      00048F 50 3F            [24] 1509 	jnc	00101$
      000491 C3               [12] 1510 	clr	c
      000492 ED               [12] 1511 	mov	a,r5
      000493 94 80            [12] 1512 	subb	a,#0x80
      000495 EE               [12] 1513 	mov	a,r6
      000496 64 80            [12] 1514 	xrl	a,#0x80
      000498 94 80            [12] 1515 	subb	a,#0x80
      00049A 50 34            [24] 1516 	jnc	00101$
                                   1517 ;	lcdCommands.c:181: printf("%2x ", x);
      00049C 8C 02            [24] 1518 	mov	ar2,r4
      00049E 7B 00            [12] 1519 	mov	r3,#0x00
      0004A0 C0 07            [24] 1520 	push	ar7
      0004A2 C0 06            [24] 1521 	push	ar6
      0004A4 C0 05            [24] 1522 	push	ar5
      0004A6 C0 04            [24] 1523 	push	ar4
      0004A8 C0 02            [24] 1524 	push	ar2
      0004AA C0 03            [24] 1525 	push	ar3
      0004AC 74r9C            [12] 1526 	mov	a,#___str_5
      0004AE C0 E0            [24] 1527 	push	acc
      0004B0 74s02            [12] 1528 	mov	a,#(___str_5 >> 8)
      0004B2 C0 E0            [24] 1529 	push	acc
      0004B4 74 80            [12] 1530 	mov	a,#0x80
      0004B6 C0 E0            [24] 1531 	push	acc
      0004B8 12r00r00         [24] 1532 	lcall	_printf
      0004BB E5 81            [12] 1533 	mov	a,sp
      0004BD 24 FB            [12] 1534 	add	a,#0xfb
      0004BF F5 81            [12] 1535 	mov	sp,a
      0004C1 D0 04            [24] 1536 	pop	ar4
      0004C3 D0 05            [24] 1537 	pop	ar5
      0004C5 D0 06            [24] 1538 	pop	ar6
      0004C7 D0 07            [24] 1539 	pop	ar7
                                   1540 ;	lcdCommands.c:179: for (j = i; j < (i+16) && j < 128; j++)    //Print the contents of buffer in ASCII
      0004C9 0D               [12] 1541 	inc	r5
      0004CA BD 00 AA         [24] 1542 	cjne	r5,#0x00,00107$
      0004CD 0E               [12] 1543 	inc	r6
      0004CE 80 A7            [24] 1544 	sjmp	00107$
      0004D0                       1545 00101$:
                                   1546 ;	lcdCommands.c:183: printf_tiny("\n\r");
      0004D0 74rA1            [12] 1547 	mov	a,#___str_6
      0004D2 C0 E0            [24] 1548 	push	acc
      0004D4 74s02            [12] 1549 	mov	a,#(___str_6 >> 8)
      0004D6 C0 E0            [24] 1550 	push	acc
      0004D8 12r00r00         [24] 1551 	lcall	_printf_tiny
      0004DB 15 81            [12] 1552 	dec	sp
      0004DD 15 81            [12] 1553 	dec	sp
                                   1554 ;	lcdCommands.c:174: for (i = 0; i < 128; i += 16)      //Print 64 ASCII characters in each line
      0004DF 90r00r16         [24] 1555 	mov	dptr,#_ramDump_i_65536_100
      0004E2 E0               [24] 1556 	movx	a,@dptr
      0004E3 24 10            [12] 1557 	add	a,#0x10
      0004E5 F0               [24] 1558 	movx	@dptr,a
      0004E6 E0               [24] 1559 	movx	a,@dptr
      0004E7 FF               [12] 1560 	mov	r7,a
      0004E8 BF 80 00         [24] 1561 	cjne	r7,#0x80,00160$
      0004EB                       1562 00160$:
      0004EB 50 03            [24] 1563 	jnc	00161$
      0004ED 02r04r2F         [24] 1564 	ljmp	00109$
      0004F0                       1565 00161$:
                                   1566 ;	lcdCommands.c:185: printf_tiny("\n\rCGRAM Contents\n\r");
      0004F0 74rA4            [12] 1567 	mov	a,#___str_7
      0004F2 C0 E0            [24] 1568 	push	acc
      0004F4 74s02            [12] 1569 	mov	a,#(___str_7 >> 8)
      0004F6 C0 E0            [24] 1570 	push	acc
      0004F8 12r00r00         [24] 1571 	lcall	_printf_tiny
      0004FB 15 81            [12] 1572 	dec	sp
      0004FD 15 81            [12] 1573 	dec	sp
                                   1574 ;	lcdCommands.c:186: for (i = 0; i < 64; i += 16)      //Print 64 ASCII characters in each line
      0004FF 90r00r16         [24] 1575 	mov	dptr,#_ramDump_i_65536_100
      000502 E4               [12] 1576 	clr	a
      000503 F0               [24] 1577 	movx	@dptr,a
      000504                       1578 00115$:
                                   1579 ;	lcdCommands.c:188: lcdGeneral = 0x40 | i;
      000504 90r00r16         [24] 1580 	mov	dptr,#_ramDump_i_65536_100
      000507 E0               [24] 1581 	movx	a,@dptr
      000508 FF               [12] 1582 	mov	r7,a
      000509 FD               [12] 1583 	mov	r5,a
      00050A 7E 00            [12] 1584 	mov	r6,#0x00
      00050C 90 F0 00         [24] 1585 	mov	dptr,#_lcdGeneral
      00050F 74 40            [12] 1586 	mov	a,#0x40
      000511 4D               [12] 1587 	orl	a,r5
      000512 F0               [24] 1588 	movx	@dptr,a
      000513 EE               [12] 1589 	mov	a,r6
      000514 A3               [24] 1590 	inc	dptr
      000515 F0               [24] 1591 	movx	@dptr,a
                                   1592 ;	lcdCommands.c:189: uint8_t x = readLCD();
      000516 C0 07            [24] 1593 	push	ar7
      000518 C0 06            [24] 1594 	push	ar6
      00051A C0 05            [24] 1595 	push	ar5
      00051C 12r01rC2         [24] 1596 	lcall	_readLCD
      00051F AC 82            [24] 1597 	mov	r4,dpl
      000521 D0 05            [24] 1598 	pop	ar5
      000523 D0 06            [24] 1599 	pop	ar6
                                   1600 ;	lcdCommands.c:190: printf("%2x: ",i);
      000525 C0 06            [24] 1601 	push	ar6
      000527 C0 05            [24] 1602 	push	ar5
      000529 C0 04            [24] 1603 	push	ar4
      00052B C0 05            [24] 1604 	push	ar5
      00052D C0 06            [24] 1605 	push	ar6
      00052F 74r96            [12] 1606 	mov	a,#___str_4
      000531 C0 E0            [24] 1607 	push	acc
      000533 74s02            [12] 1608 	mov	a,#(___str_4 >> 8)
      000535 C0 E0            [24] 1609 	push	acc
      000537 74 80            [12] 1610 	mov	a,#0x80
      000539 C0 E0            [24] 1611 	push	acc
      00053B 12r00r00         [24] 1612 	lcall	_printf
      00053E E5 81            [12] 1613 	mov	a,sp
      000540 24 FB            [12] 1614 	add	a,#0xfb
      000542 F5 81            [12] 1615 	mov	sp,a
      000544 D0 04            [24] 1616 	pop	ar4
      000546 D0 05            [24] 1617 	pop	ar5
      000548 D0 06            [24] 1618 	pop	ar6
      00054A D0 07            [24] 1619 	pop	ar7
                                   1620 ;	lcdCommands.c:191: for (j = i; j < (i+16) && j < 64; j++)    //Print the contents of buffer in ASCII
      00054C                       1621 00113$:
      00054C 8F 02            [24] 1622 	mov	ar2,r7
      00054E 7B 00            [12] 1623 	mov	r3,#0x00
      000550 74 10            [12] 1624 	mov	a,#0x10
      000552 2A               [12] 1625 	add	a,r2
      000553 FA               [12] 1626 	mov	r2,a
      000554 E4               [12] 1627 	clr	a
      000555 3B               [12] 1628 	addc	a,r3
      000556 FB               [12] 1629 	mov	r3,a
      000557 C3               [12] 1630 	clr	c
      000558 ED               [12] 1631 	mov	a,r5
      000559 9A               [12] 1632 	subb	a,r2
      00055A EE               [12] 1633 	mov	a,r6
      00055B 64 80            [12] 1634 	xrl	a,#0x80
      00055D 8B F0            [24] 1635 	mov	b,r3
      00055F 63 F0 80         [24] 1636 	xrl	b,#0x80
      000562 95 F0            [12] 1637 	subb	a,b
      000564 50 3F            [24] 1638 	jnc	00103$
      000566 C3               [12] 1639 	clr	c
      000567 ED               [12] 1640 	mov	a,r5
      000568 94 40            [12] 1641 	subb	a,#0x40
      00056A EE               [12] 1642 	mov	a,r6
      00056B 64 80            [12] 1643 	xrl	a,#0x80
      00056D 94 80            [12] 1644 	subb	a,#0x80
      00056F 50 34            [24] 1645 	jnc	00103$
                                   1646 ;	lcdCommands.c:193: printf("%2x ", x);
      000571 8C 02            [24] 1647 	mov	ar2,r4
      000573 7B 00            [12] 1648 	mov	r3,#0x00
      000575 C0 07            [24] 1649 	push	ar7
      000577 C0 06            [24] 1650 	push	ar6
      000579 C0 05            [24] 1651 	push	ar5
      00057B C0 04            [24] 1652 	push	ar4
      00057D C0 02            [24] 1653 	push	ar2
      00057F C0 03            [24] 1654 	push	ar3
      000581 74r9C            [12] 1655 	mov	a,#___str_5
      000583 C0 E0            [24] 1656 	push	acc
      000585 74s02            [12] 1657 	mov	a,#(___str_5 >> 8)
      000587 C0 E0            [24] 1658 	push	acc
      000589 74 80            [12] 1659 	mov	a,#0x80
      00058B C0 E0            [24] 1660 	push	acc
      00058D 12r00r00         [24] 1661 	lcall	_printf
      000590 E5 81            [12] 1662 	mov	a,sp
      000592 24 FB            [12] 1663 	add	a,#0xfb
      000594 F5 81            [12] 1664 	mov	sp,a
      000596 D0 04            [24] 1665 	pop	ar4
      000598 D0 05            [24] 1666 	pop	ar5
      00059A D0 06            [24] 1667 	pop	ar6
      00059C D0 07            [24] 1668 	pop	ar7
                                   1669 ;	lcdCommands.c:191: for (j = i; j < (i+16) && j < 64; j++)    //Print the contents of buffer in ASCII
      00059E 0D               [12] 1670 	inc	r5
      00059F BD 00 AA         [24] 1671 	cjne	r5,#0x00,00113$
      0005A2 0E               [12] 1672 	inc	r6
      0005A3 80 A7            [24] 1673 	sjmp	00113$
      0005A5                       1674 00103$:
                                   1675 ;	lcdCommands.c:195: printf_tiny("\n\r");
      0005A5 74rA1            [12] 1676 	mov	a,#___str_6
      0005A7 C0 E0            [24] 1677 	push	acc
      0005A9 74s02            [12] 1678 	mov	a,#(___str_6 >> 8)
      0005AB C0 E0            [24] 1679 	push	acc
      0005AD 12r00r00         [24] 1680 	lcall	_printf_tiny
      0005B0 15 81            [12] 1681 	dec	sp
      0005B2 15 81            [12] 1682 	dec	sp
                                   1683 ;	lcdCommands.c:186: for (i = 0; i < 64; i += 16)      //Print 64 ASCII characters in each line
      0005B4 90r00r16         [24] 1684 	mov	dptr,#_ramDump_i_65536_100
      0005B7 E0               [24] 1685 	movx	a,@dptr
      0005B8 24 10            [12] 1686 	add	a,#0x10
      0005BA F0               [24] 1687 	movx	@dptr,a
      0005BB E0               [24] 1688 	movx	a,@dptr
      0005BC FF               [12] 1689 	mov	r7,a
      0005BD BF 40 00         [24] 1690 	cjne	r7,#0x40,00165$
      0005C0                       1691 00165$:
      0005C0 50 03            [24] 1692 	jnc	00166$
      0005C2 02r05r04         [24] 1693 	ljmp	00115$
      0005C5                       1694 00166$:
                                   1695 ;	lcdCommands.c:197: }
      0005C5 22               [24] 1696 	ret
                                   1697 ;------------------------------------------------------------
                                   1698 ;Allocation info for local variables in function 'gamePacman'
                                   1699 ;------------------------------------------------------------
                                   1700 ;ch                        Allocated with name '_gamePacman_ch_65537_112'
                                   1701 ;i                         Allocated with name '_gamePacman_i_65537_112'
                                   1702 ;count                     Allocated with name '_gamePacman_count_65537_112'
                                   1703 ;checkEnter                Allocated with name '_gamePacman_checkEnter_196610_116'
                                   1704 ;checkEnter1               Allocated with name '_gamePacman_checkEnter1_196610_120'
                                   1705 ;------------------------------------------------------------
                                   1706 ;	lcdCommands.c:199: void gamePacman()
                                   1707 ;	-----------------------------------------
                                   1708 ;	 function gamePacman
                                   1709 ;	-----------------------------------------
      0005C6                       1710 _gamePacman:
                                   1711 ;	lcdCommands.c:201: lcdClear();
      0005C6 12r00rA0         [24] 1712 	lcall	_lcdClear
                                   1713 ;	lcdCommands.c:203: int i = 1;
      0005C9 90r00r17         [24] 1714 	mov	dptr,#_gamePacman_i_65537_112
      0005CC 74 01            [12] 1715 	mov	a,#0x01
      0005CE F0               [24] 1716 	movx	@dptr,a
      0005CF E4               [12] 1717 	clr	a
      0005D0 A3               [24] 1718 	inc	dptr
      0005D1 F0               [24] 1719 	movx	@dptr,a
                                   1720 ;	lcdCommands.c:204: int count = 0;
      0005D2 90r00r19         [24] 1721 	mov	dptr,#_gamePacman_count_65537_112
      0005D5 F0               [24] 1722 	movx	@dptr,a
      0005D6 A3               [24] 1723 	inc	dptr
      0005D7 F0               [24] 1724 	movx	@dptr,a
                                   1725 ;	lcdCommands.c:205: makePacmanRight();
      0005D8 12r08rDF         [24] 1726 	lcall	_makePacmanRight
                                   1727 ;	lcdCommands.c:206: makePacmanLeft();
      0005DB 12r09rC5         [24] 1728 	lcall	_makePacmanLeft
                                   1729 ;	lcdCommands.c:207: goToAddr(lookUpTable[0][4]);
      0005DE 90r01rF8         [24] 1730 	mov	dptr,#(_lookUpTable + 0x0004)
      0005E1 E4               [12] 1731 	clr	a
      0005E2 93               [24] 1732 	movc	a,@a+dptr
      0005E3 F5 82            [12] 1733 	mov	dpl,a
      0005E5 12r00rAD         [24] 1734 	lcall	_goToAddr
                                   1735 ;	lcdCommands.c:208: lcdPutCh('*');
      0005E8 75 82 2A         [24] 1736 	mov	dpl,#0x2a
      0005EB 12r00r8B         [24] 1737 	lcall	_lcdPutCh
                                   1738 ;	lcdCommands.c:209: goToAddr(lookUpTable[0][5]);
      0005EE 90r01rF9         [24] 1739 	mov	dptr,#(_lookUpTable + 0x0005)
      0005F1 E4               [12] 1740 	clr	a
      0005F2 93               [24] 1741 	movc	a,@a+dptr
      0005F3 F5 82            [12] 1742 	mov	dpl,a
      0005F5 12r00rAD         [24] 1743 	lcall	_goToAddr
                                   1744 ;	lcdCommands.c:210: lcdPutCh('*');
      0005F8 75 82 2A         [24] 1745 	mov	dpl,#0x2a
      0005FB 12r00r8B         [24] 1746 	lcall	_lcdPutCh
                                   1747 ;	lcdCommands.c:211: goToAddr(lookUpTable[0][8]);
      0005FE 90r01rFC         [24] 1748 	mov	dptr,#(_lookUpTable + 0x0008)
      000601 E4               [12] 1749 	clr	a
      000602 93               [24] 1750 	movc	a,@a+dptr
      000603 F5 82            [12] 1751 	mov	dpl,a
      000605 12r00rAD         [24] 1752 	lcall	_goToAddr
                                   1753 ;	lcdCommands.c:212: lcdPutCh('*');
      000608 75 82 2A         [24] 1754 	mov	dpl,#0x2a
      00060B 12r00r8B         [24] 1755 	lcall	_lcdPutCh
                                   1756 ;	lcdCommands.c:213: goToAddr(lookUpTable[0][9]);
      00060E 90r01rFD         [24] 1757 	mov	dptr,#(_lookUpTable + 0x0009)
      000611 E4               [12] 1758 	clr	a
      000612 93               [24] 1759 	movc	a,@a+dptr
      000613 F5 82            [12] 1760 	mov	dpl,a
      000615 12r00rAD         [24] 1761 	lcall	_goToAddr
                                   1762 ;	lcdCommands.c:214: lcdPutCh('*');
      000618 75 82 2A         [24] 1763 	mov	dpl,#0x2a
      00061B 12r00r8B         [24] 1764 	lcall	_lcdPutCh
                                   1765 ;	lcdCommands.c:215: goToAddr(lookUpTable[0][12]);
      00061E 90r02r00         [24] 1766 	mov	dptr,#(_lookUpTable + 0x000c)
      000621 E4               [12] 1767 	clr	a
      000622 93               [24] 1768 	movc	a,@a+dptr
      000623 F5 82            [12] 1769 	mov	dpl,a
      000625 12r00rAD         [24] 1770 	lcall	_goToAddr
                                   1771 ;	lcdCommands.c:216: lcdPutCh('*');
      000628 75 82 2A         [24] 1772 	mov	dpl,#0x2a
      00062B 12r00r8B         [24] 1773 	lcall	_lcdPutCh
                                   1774 ;	lcdCommands.c:217: goToAddr(lookUpTable[0][13]);
      00062E 90r02r01         [24] 1775 	mov	dptr,#(_lookUpTable + 0x000d)
      000631 E4               [12] 1776 	clr	a
      000632 93               [24] 1777 	movc	a,@a+dptr
      000633 F5 82            [12] 1778 	mov	dpl,a
      000635 12r00rAD         [24] 1779 	lcall	_goToAddr
                                   1780 ;	lcdCommands.c:218: lcdPutCh('*');
      000638 75 82 2A         [24] 1781 	mov	dpl,#0x2a
      00063B 12r00r8B         [24] 1782 	lcall	_lcdPutCh
                                   1783 ;	lcdCommands.c:219: goToAddr(lookUpTable[0][14]);
      00063E 90r02r02         [24] 1784 	mov	dptr,#(_lookUpTable + 0x000e)
      000641 E4               [12] 1785 	clr	a
      000642 93               [24] 1786 	movc	a,@a+dptr
      000643 F5 82            [12] 1787 	mov	dpl,a
      000645 12r00rAD         [24] 1788 	lcall	_goToAddr
                                   1789 ;	lcdCommands.c:220: lcdPutCh('*');
      000648 75 82 2A         [24] 1790 	mov	dpl,#0x2a
      00064B 12r00r8B         [24] 1791 	lcall	_lcdPutCh
                                   1792 ;	lcdCommands.c:221: goToAddr(lookUpTable[1][1]);
      00064E 90r02r05         [24] 1793 	mov	dptr,#(_lookUpTable + 0x0011)
      000651 E4               [12] 1794 	clr	a
      000652 93               [24] 1795 	movc	a,@a+dptr
      000653 F5 82            [12] 1796 	mov	dpl,a
      000655 12r00rAD         [24] 1797 	lcall	_goToAddr
                                   1798 ;	lcdCommands.c:222: lcdPutCh('*');
      000658 75 82 2A         [24] 1799 	mov	dpl,#0x2a
      00065B 12r00r8B         [24] 1800 	lcall	_lcdPutCh
                                   1801 ;	lcdCommands.c:223: goToAddr(lookUpTable[1][2]);
      00065E 90r02r06         [24] 1802 	mov	dptr,#(_lookUpTable + 0x0012)
      000661 E4               [12] 1803 	clr	a
      000662 93               [24] 1804 	movc	a,@a+dptr
      000663 F5 82            [12] 1805 	mov	dpl,a
      000665 12r00rAD         [24] 1806 	lcall	_goToAddr
                                   1807 ;	lcdCommands.c:224: lcdPutCh('*');
      000668 75 82 2A         [24] 1808 	mov	dpl,#0x2a
      00066B 12r00r8B         [24] 1809 	lcall	_lcdPutCh
                                   1810 ;	lcdCommands.c:225: goToAddr(lookUpTable[1][3]);
      00066E 90r02r07         [24] 1811 	mov	dptr,#(_lookUpTable + 0x0013)
      000671 E4               [12] 1812 	clr	a
      000672 93               [24] 1813 	movc	a,@a+dptr
      000673 F5 82            [12] 1814 	mov	dpl,a
      000675 12r00rAD         [24] 1815 	lcall	_goToAddr
                                   1816 ;	lcdCommands.c:226: lcdPutCh('*');
      000678 75 82 2A         [24] 1817 	mov	dpl,#0x2a
      00067B 12r00r8B         [24] 1818 	lcall	_lcdPutCh
                                   1819 ;	lcdCommands.c:227: goToAddr(lookUpTable[1][12]);
      00067E 90r02r10         [24] 1820 	mov	dptr,#(_lookUpTable + 0x001c)
      000681 E4               [12] 1821 	clr	a
      000682 93               [24] 1822 	movc	a,@a+dptr
      000683 F5 82            [12] 1823 	mov	dpl,a
      000685 12r00rAD         [24] 1824 	lcall	_goToAddr
                                   1825 ;	lcdCommands.c:228: lcdPutCh('*');
      000688 75 82 2A         [24] 1826 	mov	dpl,#0x2a
      00068B 12r00r8B         [24] 1827 	lcall	_lcdPutCh
                                   1828 ;	lcdCommands.c:229: goToAddr(lookUpTable[1][13]);
      00068E 90r02r11         [24] 1829 	mov	dptr,#(_lookUpTable + 0x001d)
      000691 E4               [12] 1830 	clr	a
      000692 93               [24] 1831 	movc	a,@a+dptr
      000693 F5 82            [12] 1832 	mov	dpl,a
      000695 12r00rAD         [24] 1833 	lcall	_goToAddr
                                   1834 ;	lcdCommands.c:230: lcdPutCh('*');
      000698 75 82 2A         [24] 1835 	mov	dpl,#0x2a
      00069B 12r00r8B         [24] 1836 	lcall	_lcdPutCh
                                   1837 ;	lcdCommands.c:231: printf_tiny("\n\rEnter w to go up, s to go down, a to go left and d to go right and q to quit\n\r");
      00069E 74rB7            [12] 1838 	mov	a,#___str_8
      0006A0 C0 E0            [24] 1839 	push	acc
      0006A2 74s02            [12] 1840 	mov	a,#(___str_8 >> 8)
      0006A4 C0 E0            [24] 1841 	push	acc
      0006A6 12r00r00         [24] 1842 	lcall	_printf_tiny
      0006A9 15 81            [12] 1843 	dec	sp
      0006AB 15 81            [12] 1844 	dec	sp
                                   1845 ;	lcdCommands.c:232: do{
      0006AD                       1846 00115$:
                                   1847 ;	lcdCommands.c:233: if(count == 12)
      0006AD 90r00r19         [24] 1848 	mov	dptr,#_gamePacman_count_65537_112
      0006B0 E0               [24] 1849 	movx	a,@dptr
      0006B1 FE               [12] 1850 	mov	r6,a
      0006B2 A3               [24] 1851 	inc	dptr
      0006B3 E0               [24] 1852 	movx	a,@dptr
      0006B4 FF               [12] 1853 	mov	r7,a
      0006B5 BE 0C 12         [24] 1854 	cjne	r6,#0x0c,00102$
      0006B8 BF 00 0F         [24] 1855 	cjne	r7,#0x00,00102$
                                   1856 ;	lcdCommands.c:235: lcdClear();
      0006BB 12r00rA0         [24] 1857 	lcall	_lcdClear
                                   1858 ;	lcdCommands.c:236: putsLCD("GAME OVER! PRESS p to restart");
      0006BE 90r03r08         [24] 1859 	mov	dptr,#___str_9
      0006C1 75 F0 80         [24] 1860 	mov	b,#0x80
      0006C4 12r01rCF         [24] 1861 	lcall	_putsLCD
                                   1862 ;	lcdCommands.c:237: printMenu();
                                   1863 ;	lcdCommands.c:238: break;
      0006C7 02r0Cr85         [24] 1864 	ljmp	_printMenu
      0006CA                       1865 00102$:
                                   1866 ;	lcdCommands.c:240: ch = getchar();
      0006CA C0 07            [24] 1867 	push	ar7
      0006CC C0 06            [24] 1868 	push	ar6
      0006CE 12r00r00         [24] 1869 	lcall	_getchar
      0006D1 AC 82            [24] 1870 	mov	r4,dpl
      0006D3 AD 83            [24] 1871 	mov	r5,dph
      0006D5 D0 06            [24] 1872 	pop	ar6
      0006D7 D0 07            [24] 1873 	pop	ar7
                                   1874 ;	lcdCommands.c:241: if(ch == 'd')
      0006D9 BC 64 02         [24] 1875 	cjne	r4,#0x64,00154$
      0006DC 80 03            [24] 1876 	sjmp	00155$
      0006DE                       1877 00154$:
      0006DE 02r07rC4         [24] 1878 	ljmp	00108$
      0006E1                       1879 00155$:
                                   1880 ;	lcdCommands.c:243: goToAddr(lookUpTable[0][i-1]);
      0006E1 90r00r17         [24] 1881 	mov	dptr,#_gamePacman_i_65537_112
      0006E4 E0               [24] 1882 	movx	a,@dptr
      0006E5 FB               [12] 1883 	mov	r3,a
      0006E6 A3               [24] 1884 	inc	dptr
      0006E7 E0               [24] 1885 	movx	a,@dptr
      0006E8 FD               [12] 1886 	mov	r5,a
      0006E9 8B 02            [24] 1887 	mov	ar2,r3
      0006EB EA               [12] 1888 	mov	a,r2
      0006EC 14               [12] 1889 	dec	a
      0006ED 90r01rF4         [24] 1890 	mov	dptr,#_lookUpTable
      0006F0 93               [24] 1891 	movc	a,@a+dptr
      0006F1 F5 82            [12] 1892 	mov	dpl,a
      0006F3 C0 07            [24] 1893 	push	ar7
      0006F5 C0 06            [24] 1894 	push	ar6
      0006F7 C0 05            [24] 1895 	push	ar5
      0006F9 C0 04            [24] 1896 	push	ar4
      0006FB C0 03            [24] 1897 	push	ar3
      0006FD 12r00rAD         [24] 1898 	lcall	_goToAddr
                                   1899 ;	lcdCommands.c:244: busyWait();
      000700 12r00r1E         [24] 1900 	lcall	_busyWait
                                   1901 ;	lcdCommands.c:245: lcdPutCh(' ');
      000703 75 82 20         [24] 1902 	mov	dpl,#0x20
      000706 12r00r8B         [24] 1903 	lcall	_lcdPutCh
                                   1904 ;	lcdCommands.c:246: busyWait();
      000709 12r00r1E         [24] 1905 	lcall	_busyWait
      00070C D0 03            [24] 1906 	pop	ar3
      00070E D0 04            [24] 1907 	pop	ar4
      000710 D0 05            [24] 1908 	pop	ar5
                                   1909 ;	lcdCommands.c:247: goToAddr(lookUpTable[0][i]);
      000712 EB               [12] 1910 	mov	a,r3
      000713 24rF4            [12] 1911 	add	a,#_lookUpTable
      000715 F5 82            [12] 1912 	mov	dpl,a
      000717 ED               [12] 1913 	mov	a,r5
      000718 34s01            [12] 1914 	addc	a,#(_lookUpTable >> 8)
      00071A F5 83            [12] 1915 	mov	dph,a
      00071C E4               [12] 1916 	clr	a
      00071D 93               [24] 1917 	movc	a,@a+dptr
      00071E F5 82            [12] 1918 	mov	dpl,a
      000720 C0 04            [24] 1919 	push	ar4
      000722 12r00rAD         [24] 1920 	lcall	_goToAddr
                                   1921 ;	lcdCommands.c:248: busyWait();
      000725 12r00r1E         [24] 1922 	lcall	_busyWait
                                   1923 ;	lcdCommands.c:249: char checkEnter = readLCD();
      000728 12r01rC2         [24] 1924 	lcall	_readLCD
      00072B AD 82            [24] 1925 	mov	r5,dpl
      00072D D0 04            [24] 1926 	pop	ar4
      00072F D0 06            [24] 1927 	pop	ar6
      000731 D0 07            [24] 1928 	pop	ar7
                                   1929 ;	lcdCommands.c:250: if(checkEnter == '*')
      000733 BD 2A 15         [24] 1930 	cjne	r5,#0x2a,00104$
                                   1931 ;	lcdCommands.c:252: count++;
      000736 90r00r19         [24] 1932 	mov	dptr,#_gamePacman_count_65537_112
      000739 74 01            [12] 1933 	mov	a,#0x01
      00073B 2E               [12] 1934 	add	a,r6
      00073C F0               [24] 1935 	movx	@dptr,a
      00073D E4               [12] 1936 	clr	a
      00073E 3F               [12] 1937 	addc	a,r7
      00073F A3               [24] 1938 	inc	dptr
      000740 F0               [24] 1939 	movx	@dptr,a
                                   1940 ;	lcdCommands.c:253: putchar(7);
      000741 90 00 07         [24] 1941 	mov	dptr,#0x0007
      000744 C0 04            [24] 1942 	push	ar4
      000746 12r00r00         [24] 1943 	lcall	_putchar
      000749 D0 04            [24] 1944 	pop	ar4
      00074B                       1945 00104$:
                                   1946 ;	lcdCommands.c:255: busyWait();
      00074B C0 04            [24] 1947 	push	ar4
      00074D 12r00r1E         [24] 1948 	lcall	_busyWait
      000750 D0 04            [24] 1949 	pop	ar4
                                   1950 ;	lcdCommands.c:256: lcdGeneral = 0x80 | (lookUpTable[0][i]);
      000752 90r00r17         [24] 1951 	mov	dptr,#_gamePacman_i_65537_112
      000755 E0               [24] 1952 	movx	a,@dptr
      000756 FE               [12] 1953 	mov	r6,a
      000757 A3               [24] 1954 	inc	dptr
      000758 E0               [24] 1955 	movx	a,@dptr
      000759 FF               [12] 1956 	mov	r7,a
      00075A EE               [12] 1957 	mov	a,r6
      00075B 24rF4            [12] 1958 	add	a,#_lookUpTable
      00075D F5 82            [12] 1959 	mov	dpl,a
      00075F EF               [12] 1960 	mov	a,r7
      000760 34s01            [12] 1961 	addc	a,#(_lookUpTable >> 8)
      000762 F5 83            [12] 1962 	mov	dph,a
      000764 E4               [12] 1963 	clr	a
      000765 93               [24] 1964 	movc	a,@a+dptr
      000766 FD               [12] 1965 	mov	r5,a
      000767 7B 00            [12] 1966 	mov	r3,#0x00
      000769 90 F0 00         [24] 1967 	mov	dptr,#_lcdGeneral
      00076C 74 80            [12] 1968 	mov	a,#0x80
      00076E 4D               [12] 1969 	orl	a,r5
      00076F F0               [24] 1970 	movx	@dptr,a
      000770 EB               [12] 1971 	mov	a,r3
      000771 A3               [24] 1972 	inc	dptr
      000772 F0               [24] 1973 	movx	@dptr,a
                                   1974 ;	lcdCommands.c:257: busyWait();
      000773 C0 07            [24] 1975 	push	ar7
      000775 C0 06            [24] 1976 	push	ar6
      000777 C0 04            [24] 1977 	push	ar4
      000779 12r00r1E         [24] 1978 	lcall	_busyWait
                                   1979 ;	lcdCommands.c:258: writeCharacter = 0x00;
      00077C 90 F1 00         [24] 1980 	mov	dptr,#_writeCharacter
      00077F E4               [12] 1981 	clr	a
      000780 F0               [24] 1982 	movx	@dptr,a
      000781 A3               [24] 1983 	inc	dptr
      000782 F0               [24] 1984 	movx	@dptr,a
                                   1985 ;	lcdCommands.c:259: busyWait();
      000783 12r00r1E         [24] 1986 	lcall	_busyWait
      000786 D0 04            [24] 1987 	pop	ar4
      000788 D0 06            [24] 1988 	pop	ar6
      00078A D0 07            [24] 1989 	pop	ar7
                                   1990 ;	lcdCommands.c:260: if(i >= 47)
      00078C C3               [12] 1991 	clr	c
      00078D EE               [12] 1992 	mov	a,r6
      00078E 94 2F            [12] 1993 	subb	a,#0x2f
      000790 EF               [12] 1994 	mov	a,r7
      000791 64 80            [12] 1995 	xrl	a,#0x80
      000793 94 80            [12] 1996 	subb	a,#0x80
      000795 40 21            [24] 1997 	jc	00106$
                                   1998 ;	lcdCommands.c:262: goToAddr(lookUpTable[2][15]);
      000797 90r02r23         [24] 1999 	mov	dptr,#(_lookUpTable + 0x002f)
      00079A E4               [12] 2000 	clr	a
      00079B 93               [24] 2001 	movc	a,@a+dptr
      00079C F5 82            [12] 2002 	mov	dpl,a
      00079E C0 04            [24] 2003 	push	ar4
      0007A0 12r00rAD         [24] 2004 	lcall	_goToAddr
                                   2005 ;	lcdCommands.c:263: busyWait();
      0007A3 12r00r1E         [24] 2006 	lcall	_busyWait
                                   2007 ;	lcdCommands.c:264: lcdPutCh(' ');
      0007A6 75 82 20         [24] 2008 	mov	dpl,#0x20
      0007A9 12r00r8B         [24] 2009 	lcall	_lcdPutCh
                                   2010 ;	lcdCommands.c:265: busyWait();
      0007AC 12r00r1E         [24] 2011 	lcall	_busyWait
      0007AF D0 04            [24] 2012 	pop	ar4
                                   2013 ;	lcdCommands.c:266: i = 0;
      0007B1 90r00r17         [24] 2014 	mov	dptr,#_gamePacman_i_65537_112
      0007B4 E4               [12] 2015 	clr	a
      0007B5 F0               [24] 2016 	movx	@dptr,a
      0007B6 A3               [24] 2017 	inc	dptr
      0007B7 F0               [24] 2018 	movx	@dptr,a
      0007B8                       2019 00106$:
                                   2020 ;	lcdCommands.c:268: i++;
      0007B8 90r00r17         [24] 2021 	mov	dptr,#_gamePacman_i_65537_112
      0007BB E0               [24] 2022 	movx	a,@dptr
      0007BC 24 01            [12] 2023 	add	a,#0x01
      0007BE F0               [24] 2024 	movx	@dptr,a
      0007BF A3               [24] 2025 	inc	dptr
      0007C0 E0               [24] 2026 	movx	a,@dptr
      0007C1 34 00            [12] 2027 	addc	a,#0x00
      0007C3 F0               [24] 2028 	movx	@dptr,a
      0007C4                       2029 00108$:
                                   2030 ;	lcdCommands.c:270: i--;
      0007C4 90r00r17         [24] 2031 	mov	dptr,#_gamePacman_i_65537_112
      0007C7 E0               [24] 2032 	movx	a,@dptr
      0007C8 24 FF            [12] 2033 	add	a,#0xff
      0007CA FE               [12] 2034 	mov	r6,a
      0007CB A3               [24] 2035 	inc	dptr
      0007CC E0               [24] 2036 	movx	a,@dptr
      0007CD 34 FF            [12] 2037 	addc	a,#0xff
      0007CF FF               [12] 2038 	mov	r7,a
      0007D0 90r00r17         [24] 2039 	mov	dptr,#_gamePacman_i_65537_112
      0007D3 EE               [12] 2040 	mov	a,r6
      0007D4 F0               [24] 2041 	movx	@dptr,a
      0007D5 EF               [12] 2042 	mov	a,r7
      0007D6 A3               [24] 2043 	inc	dptr
      0007D7 F0               [24] 2044 	movx	@dptr,a
                                   2045 ;	lcdCommands.c:272: if(ch == 'a')
      0007D8 BC 61 02         [24] 2046 	cjne	r4,#0x61,00159$
      0007DB 80 03            [24] 2047 	sjmp	00160$
      0007DD                       2048 00159$:
      0007DD 02r08rCB         [24] 2049 	ljmp	00114$
      0007E0                       2050 00160$:
                                   2051 ;	lcdCommands.c:274: goToAddr(lookUpTable[0][i+1]);
      0007E0 90r00r17         [24] 2052 	mov	dptr,#_gamePacman_i_65537_112
      0007E3 E0               [24] 2053 	movx	a,@dptr
      0007E4 FE               [12] 2054 	mov	r6,a
      0007E5 A3               [24] 2055 	inc	dptr
      0007E6 E0               [24] 2056 	movx	a,@dptr
      0007E7 FF               [12] 2057 	mov	r7,a
      0007E8 8E 05            [24] 2058 	mov	ar5,r6
      0007EA ED               [12] 2059 	mov	a,r5
      0007EB 04               [12] 2060 	inc	a
      0007EC 90r01rF4         [24] 2061 	mov	dptr,#_lookUpTable
      0007EF 93               [24] 2062 	movc	a,@a+dptr
      0007F0 F5 82            [12] 2063 	mov	dpl,a
      0007F2 C0 07            [24] 2064 	push	ar7
      0007F4 C0 06            [24] 2065 	push	ar6
      0007F6 C0 04            [24] 2066 	push	ar4
      0007F8 12r00rAD         [24] 2067 	lcall	_goToAddr
                                   2068 ;	lcdCommands.c:275: busyWait();
      0007FB 12r00r1E         [24] 2069 	lcall	_busyWait
                                   2070 ;	lcdCommands.c:276: lcdPutCh(' ');
      0007FE 75 82 20         [24] 2071 	mov	dpl,#0x20
      000801 12r00r8B         [24] 2072 	lcall	_lcdPutCh
                                   2073 ;	lcdCommands.c:277: busyWait();
      000804 12r00r1E         [24] 2074 	lcall	_busyWait
      000807 D0 04            [24] 2075 	pop	ar4
      000809 D0 06            [24] 2076 	pop	ar6
      00080B D0 07            [24] 2077 	pop	ar7
                                   2078 ;	lcdCommands.c:278: goToAddr(lookUpTable[0][i]);
      00080D EE               [12] 2079 	mov	a,r6
      00080E 24rF4            [12] 2080 	add	a,#_lookUpTable
      000810 F5 82            [12] 2081 	mov	dpl,a
      000812 EF               [12] 2082 	mov	a,r7
      000813 34s01            [12] 2083 	addc	a,#(_lookUpTable >> 8)
      000815 F5 83            [12] 2084 	mov	dph,a
      000817 E4               [12] 2085 	clr	a
      000818 93               [24] 2086 	movc	a,@a+dptr
      000819 F5 82            [12] 2087 	mov	dpl,a
      00081B C0 04            [24] 2088 	push	ar4
      00081D 12r00rAD         [24] 2089 	lcall	_goToAddr
                                   2090 ;	lcdCommands.c:279: busyWait();
      000820 12r00r1E         [24] 2091 	lcall	_busyWait
                                   2092 ;	lcdCommands.c:280: char checkEnter1 = readLCD();
      000823 12r01rC2         [24] 2093 	lcall	_readLCD
      000826 AF 82            [24] 2094 	mov	r7,dpl
      000828 D0 04            [24] 2095 	pop	ar4
                                   2096 ;	lcdCommands.c:281: if(checkEnter1 == '*')
      00082A BF 2A 16         [24] 2097 	cjne	r7,#0x2a,00110$
                                   2098 ;	lcdCommands.c:283: count++;
      00082D 90r00r19         [24] 2099 	mov	dptr,#_gamePacman_count_65537_112
      000830 E0               [24] 2100 	movx	a,@dptr
      000831 24 01            [12] 2101 	add	a,#0x01
      000833 F0               [24] 2102 	movx	@dptr,a
      000834 A3               [24] 2103 	inc	dptr
      000835 E0               [24] 2104 	movx	a,@dptr
      000836 34 00            [12] 2105 	addc	a,#0x00
      000838 F0               [24] 2106 	movx	@dptr,a
                                   2107 ;	lcdCommands.c:284: putchar(7);
      000839 90 00 07         [24] 2108 	mov	dptr,#0x0007
      00083C C0 04            [24] 2109 	push	ar4
      00083E 12r00r00         [24] 2110 	lcall	_putchar
      000841 D0 04            [24] 2111 	pop	ar4
      000843                       2112 00110$:
                                   2113 ;	lcdCommands.c:286: busyWait();
      000843 C0 04            [24] 2114 	push	ar4
      000845 12r00r1E         [24] 2115 	lcall	_busyWait
      000848 D0 04            [24] 2116 	pop	ar4
                                   2117 ;	lcdCommands.c:287: lcdGeneral = 0x80 | (lookUpTable[0][i]);
      00084A 90r00r17         [24] 2118 	mov	dptr,#_gamePacman_i_65537_112
      00084D E0               [24] 2119 	movx	a,@dptr
      00084E FE               [12] 2120 	mov	r6,a
      00084F A3               [24] 2121 	inc	dptr
      000850 E0               [24] 2122 	movx	a,@dptr
      000851 FF               [12] 2123 	mov	r7,a
      000852 EE               [12] 2124 	mov	a,r6
      000853 24rF4            [12] 2125 	add	a,#_lookUpTable
      000855 F5 82            [12] 2126 	mov	dpl,a
      000857 EF               [12] 2127 	mov	a,r7
      000858 34s01            [12] 2128 	addc	a,#(_lookUpTable >> 8)
      00085A F5 83            [12] 2129 	mov	dph,a
      00085C E4               [12] 2130 	clr	a
      00085D 93               [24] 2131 	movc	a,@a+dptr
      00085E FD               [12] 2132 	mov	r5,a
      00085F 7B 00            [12] 2133 	mov	r3,#0x00
      000861 90 F0 00         [24] 2134 	mov	dptr,#_lcdGeneral
      000864 74 80            [12] 2135 	mov	a,#0x80
      000866 4D               [12] 2136 	orl	a,r5
      000867 F0               [24] 2137 	movx	@dptr,a
      000868 EB               [12] 2138 	mov	a,r3
      000869 A3               [24] 2139 	inc	dptr
      00086A F0               [24] 2140 	movx	@dptr,a
                                   2141 ;	lcdCommands.c:288: busyWait();
      00086B C0 07            [24] 2142 	push	ar7
      00086D C0 06            [24] 2143 	push	ar6
      00086F C0 04            [24] 2144 	push	ar4
      000871 12r00r1E         [24] 2145 	lcall	_busyWait
                                   2146 ;	lcdCommands.c:289: writeCharacter = 0x03;
      000874 90 F1 00         [24] 2147 	mov	dptr,#_writeCharacter
      000877 74 03            [12] 2148 	mov	a,#0x03
      000879 F0               [24] 2149 	movx	@dptr,a
      00087A E4               [12] 2150 	clr	a
      00087B A3               [24] 2151 	inc	dptr
      00087C F0               [24] 2152 	movx	@dptr,a
                                   2153 ;	lcdCommands.c:290: busyWait();
      00087D 12r00r1E         [24] 2154 	lcall	_busyWait
      000880 D0 04            [24] 2155 	pop	ar4
      000882 D0 06            [24] 2156 	pop	ar6
      000884 D0 07            [24] 2157 	pop	ar7
                                   2158 ;	lcdCommands.c:291: if( i <= 0)
      000886 C3               [12] 2159 	clr	c
      000887 E4               [12] 2160 	clr	a
      000888 9E               [12] 2161 	subb	a,r6
      000889 74 80            [12] 2162 	mov	a,#(0x00 ^ 0x80)
      00088B 8F F0            [24] 2163 	mov	b,r7
      00088D 63 F0 80         [24] 2164 	xrl	b,#0x80
      000890 95 F0            [12] 2165 	subb	a,b
      000892 40 23            [24] 2166 	jc	00112$
                                   2167 ;	lcdCommands.c:293: goToAddr(lookUpTable[0][0]);
      000894 90r01rF4         [24] 2168 	mov	dptr,#_lookUpTable
      000897 E4               [12] 2169 	clr	a
      000898 93               [24] 2170 	movc	a,@a+dptr
      000899 F5 82            [12] 2171 	mov	dpl,a
      00089B C0 04            [24] 2172 	push	ar4
      00089D 12r00rAD         [24] 2173 	lcall	_goToAddr
                                   2174 ;	lcdCommands.c:294: busyWait();
      0008A0 12r00r1E         [24] 2175 	lcall	_busyWait
                                   2176 ;	lcdCommands.c:295: lcdPutCh(' ');
      0008A3 75 82 20         [24] 2177 	mov	dpl,#0x20
      0008A6 12r00r8B         [24] 2178 	lcall	_lcdPutCh
                                   2179 ;	lcdCommands.c:296: busyWait();
      0008A9 12r00r1E         [24] 2180 	lcall	_busyWait
      0008AC D0 04            [24] 2181 	pop	ar4
                                   2182 ;	lcdCommands.c:297: i = 47;
      0008AE 90r00r17         [24] 2183 	mov	dptr,#_gamePacman_i_65537_112
      0008B1 74 2F            [12] 2184 	mov	a,#0x2f
      0008B3 F0               [24] 2185 	movx	@dptr,a
      0008B4 E4               [12] 2186 	clr	a
      0008B5 A3               [24] 2187 	inc	dptr
      0008B6 F0               [24] 2188 	movx	@dptr,a
      0008B7                       2189 00112$:
                                   2190 ;	lcdCommands.c:299: i--;
      0008B7 90r00r17         [24] 2191 	mov	dptr,#_gamePacman_i_65537_112
      0008BA E0               [24] 2192 	movx	a,@dptr
      0008BB 24 FF            [12] 2193 	add	a,#0xff
      0008BD FE               [12] 2194 	mov	r6,a
      0008BE A3               [24] 2195 	inc	dptr
      0008BF E0               [24] 2196 	movx	a,@dptr
      0008C0 34 FF            [12] 2197 	addc	a,#0xff
      0008C2 FF               [12] 2198 	mov	r7,a
      0008C3 90r00r17         [24] 2199 	mov	dptr,#_gamePacman_i_65537_112
      0008C6 EE               [12] 2200 	mov	a,r6
      0008C7 F0               [24] 2201 	movx	@dptr,a
      0008C8 EF               [12] 2202 	mov	a,r7
      0008C9 A3               [24] 2203 	inc	dptr
      0008CA F0               [24] 2204 	movx	@dptr,a
      0008CB                       2205 00114$:
                                   2206 ;	lcdCommands.c:301: i++;
      0008CB 90r00r17         [24] 2207 	mov	dptr,#_gamePacman_i_65537_112
      0008CE E0               [24] 2208 	movx	a,@dptr
      0008CF 24 01            [12] 2209 	add	a,#0x01
      0008D1 F0               [24] 2210 	movx	@dptr,a
      0008D2 A3               [24] 2211 	inc	dptr
      0008D3 E0               [24] 2212 	movx	a,@dptr
      0008D4 34 00            [12] 2213 	addc	a,#0x00
      0008D6 F0               [24] 2214 	movx	@dptr,a
                                   2215 ;	lcdCommands.c:302: }while(ch != 'q');
      0008D7 BC 71 01         [24] 2216 	cjne	r4,#0x71,00164$
      0008DA 22               [24] 2217 	ret
      0008DB                       2218 00164$:
      0008DB 02r06rAD         [24] 2219 	ljmp	00115$
                                   2220 ;	lcdCommands.c:303: }
      0008DE 22               [24] 2221 	ret
                                   2222 ;------------------------------------------------------------
                                   2223 ;Allocation info for local variables in function 'makePacmanRight'
                                   2224 ;------------------------------------------------------------
                                   2225 ;	lcdCommands.c:305: void makePacmanRight()
                                   2226 ;	-----------------------------------------
                                   2227 ;	 function makePacmanRight
                                   2228 ;	-----------------------------------------
      0008DF                       2229 _makePacmanRight:
                                   2230 ;	lcdCommands.c:307: busyWait();
      0008DF 12r00r1E         [24] 2231 	lcall	_busyWait
                                   2232 ;	lcdCommands.c:308: lcdGeneral = 0x40 | 0x00;
      0008E2 90 F0 00         [24] 2233 	mov	dptr,#_lcdGeneral
      0008E5 74 40            [12] 2234 	mov	a,#0x40
      0008E7 F0               [24] 2235 	movx	@dptr,a
      0008E8 E4               [12] 2236 	clr	a
      0008E9 A3               [24] 2237 	inc	dptr
      0008EA F0               [24] 2238 	movx	@dptr,a
                                   2239 ;	lcdCommands.c:309: busyWait();
      0008EB 12r00r1E         [24] 2240 	lcall	_busyWait
                                   2241 ;	lcdCommands.c:310: writeCharacter = 0x06;
      0008EE 90 F1 00         [24] 2242 	mov	dptr,#_writeCharacter
      0008F1 74 06            [12] 2243 	mov	a,#0x06
      0008F3 F0               [24] 2244 	movx	@dptr,a
      0008F4 E4               [12] 2245 	clr	a
      0008F5 A3               [24] 2246 	inc	dptr
      0008F6 F0               [24] 2247 	movx	@dptr,a
                                   2248 ;	lcdCommands.c:311: busyWait();
      0008F7 12r00r1E         [24] 2249 	lcall	_busyWait
                                   2250 ;	lcdCommands.c:312: lcdGeneral = 0x40 | 0x01;
      0008FA 90 F0 00         [24] 2251 	mov	dptr,#_lcdGeneral
      0008FD 74 41            [12] 2252 	mov	a,#0x41
      0008FF F0               [24] 2253 	movx	@dptr,a
      000900 E4               [12] 2254 	clr	a
      000901 A3               [24] 2255 	inc	dptr
      000902 F0               [24] 2256 	movx	@dptr,a
                                   2257 ;	lcdCommands.c:313: busyWait();
      000903 12r00r1E         [24] 2258 	lcall	_busyWait
                                   2259 ;	lcdCommands.c:314: writeCharacter = 0x09;
      000906 90 F1 00         [24] 2260 	mov	dptr,#_writeCharacter
      000909 74 09            [12] 2261 	mov	a,#0x09
      00090B F0               [24] 2262 	movx	@dptr,a
      00090C E4               [12] 2263 	clr	a
      00090D A3               [24] 2264 	inc	dptr
      00090E F0               [24] 2265 	movx	@dptr,a
                                   2266 ;	lcdCommands.c:315: busyWait();
      00090F 12r00r1E         [24] 2267 	lcall	_busyWait
                                   2268 ;	lcdCommands.c:316: lcdGeneral = 0x40 | 0x02;
      000912 90 F0 00         [24] 2269 	mov	dptr,#_lcdGeneral
      000915 74 42            [12] 2270 	mov	a,#0x42
      000917 F0               [24] 2271 	movx	@dptr,a
      000918 E4               [12] 2272 	clr	a
      000919 A3               [24] 2273 	inc	dptr
      00091A F0               [24] 2274 	movx	@dptr,a
                                   2275 ;	lcdCommands.c:317: busyWait();
      00091B 12r00r1E         [24] 2276 	lcall	_busyWait
                                   2277 ;	lcdCommands.c:318: writeCharacter = 0x12;
      00091E 90 F1 00         [24] 2278 	mov	dptr,#_writeCharacter
      000921 74 12            [12] 2279 	mov	a,#0x12
      000923 F0               [24] 2280 	movx	@dptr,a
      000924 E4               [12] 2281 	clr	a
      000925 A3               [24] 2282 	inc	dptr
      000926 F0               [24] 2283 	movx	@dptr,a
                                   2284 ;	lcdCommands.c:319: busyWait();
      000927 12r00r1E         [24] 2285 	lcall	_busyWait
                                   2286 ;	lcdCommands.c:320: lcdGeneral = 0x40 | 0x03;
      00092A 90 F0 00         [24] 2287 	mov	dptr,#_lcdGeneral
      00092D 74 43            [12] 2288 	mov	a,#0x43
      00092F F0               [24] 2289 	movx	@dptr,a
      000930 E4               [12] 2290 	clr	a
      000931 A3               [24] 2291 	inc	dptr
      000932 F0               [24] 2292 	movx	@dptr,a
                                   2293 ;	lcdCommands.c:321: busyWait();
      000933 12r00r1E         [24] 2294 	lcall	_busyWait
                                   2295 ;	lcdCommands.c:322: writeCharacter = 0x14;
      000936 90 F1 00         [24] 2296 	mov	dptr,#_writeCharacter
      000939 74 14            [12] 2297 	mov	a,#0x14
      00093B F0               [24] 2298 	movx	@dptr,a
      00093C E4               [12] 2299 	clr	a
      00093D A3               [24] 2300 	inc	dptr
      00093E F0               [24] 2301 	movx	@dptr,a
                                   2302 ;	lcdCommands.c:323: busyWait();
      00093F 12r00r1E         [24] 2303 	lcall	_busyWait
                                   2304 ;	lcdCommands.c:324: lcdGeneral = 0x40 | 0x04;
      000942 90 F0 00         [24] 2305 	mov	dptr,#_lcdGeneral
      000945 74 44            [12] 2306 	mov	a,#0x44
      000947 F0               [24] 2307 	movx	@dptr,a
      000948 E4               [12] 2308 	clr	a
      000949 A3               [24] 2309 	inc	dptr
      00094A F0               [24] 2310 	movx	@dptr,a
                                   2311 ;	lcdCommands.c:325: busyWait();
      00094B 12r00r1E         [24] 2312 	lcall	_busyWait
                                   2313 ;	lcdCommands.c:326: writeCharacter = 0x14;
      00094E 90 F1 00         [24] 2314 	mov	dptr,#_writeCharacter
      000951 74 14            [12] 2315 	mov	a,#0x14
      000953 F0               [24] 2316 	movx	@dptr,a
      000954 E4               [12] 2317 	clr	a
      000955 A3               [24] 2318 	inc	dptr
      000956 F0               [24] 2319 	movx	@dptr,a
                                   2320 ;	lcdCommands.c:327: busyWait();
      000957 12r00r1E         [24] 2321 	lcall	_busyWait
                                   2322 ;	lcdCommands.c:328: lcdGeneral = 0x40 | 0x05;
      00095A 90 F0 00         [24] 2323 	mov	dptr,#_lcdGeneral
      00095D 74 45            [12] 2324 	mov	a,#0x45
      00095F F0               [24] 2325 	movx	@dptr,a
      000960 E4               [12] 2326 	clr	a
      000961 A3               [24] 2327 	inc	dptr
      000962 F0               [24] 2328 	movx	@dptr,a
                                   2329 ;	lcdCommands.c:329: busyWait();
      000963 12r00r1E         [24] 2330 	lcall	_busyWait
                                   2331 ;	lcdCommands.c:330: writeCharacter = 0x12;
      000966 90 F1 00         [24] 2332 	mov	dptr,#_writeCharacter
      000969 74 12            [12] 2333 	mov	a,#0x12
      00096B F0               [24] 2334 	movx	@dptr,a
      00096C E4               [12] 2335 	clr	a
      00096D A3               [24] 2336 	inc	dptr
      00096E F0               [24] 2337 	movx	@dptr,a
                                   2338 ;	lcdCommands.c:331: busyWait();
      00096F 12r00r1E         [24] 2339 	lcall	_busyWait
                                   2340 ;	lcdCommands.c:332: lcdGeneral = 0x40 | 0x06;
      000972 90 F0 00         [24] 2341 	mov	dptr,#_lcdGeneral
      000975 74 46            [12] 2342 	mov	a,#0x46
      000977 F0               [24] 2343 	movx	@dptr,a
      000978 E4               [12] 2344 	clr	a
      000979 A3               [24] 2345 	inc	dptr
      00097A F0               [24] 2346 	movx	@dptr,a
                                   2347 ;	lcdCommands.c:333: busyWait();
      00097B 12r00r1E         [24] 2348 	lcall	_busyWait
                                   2349 ;	lcdCommands.c:334: writeCharacter = 0x09;
      00097E 90 F1 00         [24] 2350 	mov	dptr,#_writeCharacter
      000981 74 09            [12] 2351 	mov	a,#0x09
      000983 F0               [24] 2352 	movx	@dptr,a
      000984 E4               [12] 2353 	clr	a
      000985 A3               [24] 2354 	inc	dptr
      000986 F0               [24] 2355 	movx	@dptr,a
                                   2356 ;	lcdCommands.c:335: busyWait();
      000987 12r00r1E         [24] 2357 	lcall	_busyWait
                                   2358 ;	lcdCommands.c:336: lcdGeneral = 0x40 | 0x07;
      00098A 90 F0 00         [24] 2359 	mov	dptr,#_lcdGeneral
      00098D 74 47            [12] 2360 	mov	a,#0x47
      00098F F0               [24] 2361 	movx	@dptr,a
      000990 E4               [12] 2362 	clr	a
      000991 A3               [24] 2363 	inc	dptr
      000992 F0               [24] 2364 	movx	@dptr,a
                                   2365 ;	lcdCommands.c:337: busyWait();
      000993 12r00r1E         [24] 2366 	lcall	_busyWait
                                   2367 ;	lcdCommands.c:338: writeCharacter = 0x06;
      000996 90 F1 00         [24] 2368 	mov	dptr,#_writeCharacter
      000999 74 06            [12] 2369 	mov	a,#0x06
      00099B F0               [24] 2370 	movx	@dptr,a
      00099C E4               [12] 2371 	clr	a
      00099D A3               [24] 2372 	inc	dptr
      00099E F0               [24] 2373 	movx	@dptr,a
                                   2374 ;	lcdCommands.c:339: busyWait();
      00099F 12r00r1E         [24] 2375 	lcall	_busyWait
                                   2376 ;	lcdCommands.c:340: goToXY(3,1);
      0009A2 90r00r02         [24] 2377 	mov	dptr,#_goToXY_PARM_2
      0009A5 74 01            [12] 2378 	mov	a,#0x01
      0009A7 F0               [24] 2379 	movx	@dptr,a
      0009A8 75 82 03         [24] 2380 	mov	dpl,#0x03
      0009AB 12r00rC8         [24] 2381 	lcall	_goToXY
                                   2382 ;	lcdCommands.c:341: busyWait();
      0009AE 12r00r1E         [24] 2383 	lcall	_busyWait
                                   2384 ;	lcdCommands.c:342: lcdGeneral = 0x80 | 0x00;
      0009B1 90 F0 00         [24] 2385 	mov	dptr,#_lcdGeneral
      0009B4 74 80            [12] 2386 	mov	a,#0x80
      0009B6 F0               [24] 2387 	movx	@dptr,a
      0009B7 E4               [12] 2388 	clr	a
      0009B8 A3               [24] 2389 	inc	dptr
      0009B9 F0               [24] 2390 	movx	@dptr,a
                                   2391 ;	lcdCommands.c:343: busyWait();
      0009BA 12r00r1E         [24] 2392 	lcall	_busyWait
                                   2393 ;	lcdCommands.c:344: writeCharacter = 0x00;
      0009BD 90 F1 00         [24] 2394 	mov	dptr,#_writeCharacter
      0009C0 E4               [12] 2395 	clr	a
      0009C1 F0               [24] 2396 	movx	@dptr,a
      0009C2 A3               [24] 2397 	inc	dptr
      0009C3 F0               [24] 2398 	movx	@dptr,a
                                   2399 ;	lcdCommands.c:345: }
      0009C4 22               [24] 2400 	ret
                                   2401 ;------------------------------------------------------------
                                   2402 ;Allocation info for local variables in function 'makePacmanLeft'
                                   2403 ;------------------------------------------------------------
                                   2404 ;	lcdCommands.c:346: void makePacmanLeft()
                                   2405 ;	-----------------------------------------
                                   2406 ;	 function makePacmanLeft
                                   2407 ;	-----------------------------------------
      0009C5                       2408 _makePacmanLeft:
                                   2409 ;	lcdCommands.c:348: busyWait();
      0009C5 12r00r1E         [24] 2410 	lcall	_busyWait
                                   2411 ;	lcdCommands.c:349: lcdGeneral = 0x40 | 0x18;
      0009C8 90 F0 00         [24] 2412 	mov	dptr,#_lcdGeneral
      0009CB 74 58            [12] 2413 	mov	a,#0x58
      0009CD F0               [24] 2414 	movx	@dptr,a
      0009CE E4               [12] 2415 	clr	a
      0009CF A3               [24] 2416 	inc	dptr
      0009D0 F0               [24] 2417 	movx	@dptr,a
                                   2418 ;	lcdCommands.c:350: busyWait();
      0009D1 12r00r1E         [24] 2419 	lcall	_busyWait
                                   2420 ;	lcdCommands.c:351: writeCharacter = 0x0C;
      0009D4 90 F1 00         [24] 2421 	mov	dptr,#_writeCharacter
      0009D7 74 0C            [12] 2422 	mov	a,#0x0c
      0009D9 F0               [24] 2423 	movx	@dptr,a
      0009DA E4               [12] 2424 	clr	a
      0009DB A3               [24] 2425 	inc	dptr
      0009DC F0               [24] 2426 	movx	@dptr,a
                                   2427 ;	lcdCommands.c:352: busyWait();
      0009DD 12r00r1E         [24] 2428 	lcall	_busyWait
                                   2429 ;	lcdCommands.c:353: lcdGeneral = 0x40 | 0x19;
      0009E0 90 F0 00         [24] 2430 	mov	dptr,#_lcdGeneral
      0009E3 74 59            [12] 2431 	mov	a,#0x59
      0009E5 F0               [24] 2432 	movx	@dptr,a
      0009E6 E4               [12] 2433 	clr	a
      0009E7 A3               [24] 2434 	inc	dptr
      0009E8 F0               [24] 2435 	movx	@dptr,a
                                   2436 ;	lcdCommands.c:354: busyWait();
      0009E9 12r00r1E         [24] 2437 	lcall	_busyWait
                                   2438 ;	lcdCommands.c:355: writeCharacter = 0x12;
      0009EC 90 F1 00         [24] 2439 	mov	dptr,#_writeCharacter
      0009EF 74 12            [12] 2440 	mov	a,#0x12
      0009F1 F0               [24] 2441 	movx	@dptr,a
      0009F2 E4               [12] 2442 	clr	a
      0009F3 A3               [24] 2443 	inc	dptr
      0009F4 F0               [24] 2444 	movx	@dptr,a
                                   2445 ;	lcdCommands.c:356: busyWait();
      0009F5 12r00r1E         [24] 2446 	lcall	_busyWait
                                   2447 ;	lcdCommands.c:357: lcdGeneral = 0x40 | 0x1A;
      0009F8 90 F0 00         [24] 2448 	mov	dptr,#_lcdGeneral
      0009FB 74 5A            [12] 2449 	mov	a,#0x5a
      0009FD F0               [24] 2450 	movx	@dptr,a
      0009FE E4               [12] 2451 	clr	a
      0009FF A3               [24] 2452 	inc	dptr
      000A00 F0               [24] 2453 	movx	@dptr,a
                                   2454 ;	lcdCommands.c:358: busyWait();
      000A01 12r00r1E         [24] 2455 	lcall	_busyWait
                                   2456 ;	lcdCommands.c:359: writeCharacter = 0x09;
      000A04 90 F1 00         [24] 2457 	mov	dptr,#_writeCharacter
      000A07 74 09            [12] 2458 	mov	a,#0x09
      000A09 F0               [24] 2459 	movx	@dptr,a
      000A0A E4               [12] 2460 	clr	a
      000A0B A3               [24] 2461 	inc	dptr
      000A0C F0               [24] 2462 	movx	@dptr,a
                                   2463 ;	lcdCommands.c:360: busyWait();
      000A0D 12r00r1E         [24] 2464 	lcall	_busyWait
                                   2465 ;	lcdCommands.c:361: lcdGeneral = 0x40 | 0x1B;
      000A10 90 F0 00         [24] 2466 	mov	dptr,#_lcdGeneral
      000A13 74 5B            [12] 2467 	mov	a,#0x5b
      000A15 F0               [24] 2468 	movx	@dptr,a
      000A16 E4               [12] 2469 	clr	a
      000A17 A3               [24] 2470 	inc	dptr
      000A18 F0               [24] 2471 	movx	@dptr,a
                                   2472 ;	lcdCommands.c:362: busyWait();
      000A19 12r00r1E         [24] 2473 	lcall	_busyWait
                                   2474 ;	lcdCommands.c:363: writeCharacter = 0x05;
      000A1C 90 F1 00         [24] 2475 	mov	dptr,#_writeCharacter
      000A1F 74 05            [12] 2476 	mov	a,#0x05
      000A21 F0               [24] 2477 	movx	@dptr,a
      000A22 E4               [12] 2478 	clr	a
      000A23 A3               [24] 2479 	inc	dptr
      000A24 F0               [24] 2480 	movx	@dptr,a
                                   2481 ;	lcdCommands.c:364: busyWait();
      000A25 12r00r1E         [24] 2482 	lcall	_busyWait
                                   2483 ;	lcdCommands.c:365: lcdGeneral = 0x40 | 0x1C;
      000A28 90 F0 00         [24] 2484 	mov	dptr,#_lcdGeneral
      000A2B 74 5C            [12] 2485 	mov	a,#0x5c
      000A2D F0               [24] 2486 	movx	@dptr,a
      000A2E E4               [12] 2487 	clr	a
      000A2F A3               [24] 2488 	inc	dptr
      000A30 F0               [24] 2489 	movx	@dptr,a
                                   2490 ;	lcdCommands.c:366: busyWait();
      000A31 12r00r1E         [24] 2491 	lcall	_busyWait
                                   2492 ;	lcdCommands.c:367: writeCharacter = 0x05;
      000A34 90 F1 00         [24] 2493 	mov	dptr,#_writeCharacter
      000A37 74 05            [12] 2494 	mov	a,#0x05
      000A39 F0               [24] 2495 	movx	@dptr,a
      000A3A E4               [12] 2496 	clr	a
      000A3B A3               [24] 2497 	inc	dptr
      000A3C F0               [24] 2498 	movx	@dptr,a
                                   2499 ;	lcdCommands.c:368: busyWait();
      000A3D 12r00r1E         [24] 2500 	lcall	_busyWait
                                   2501 ;	lcdCommands.c:369: lcdGeneral = 0x40 | 0x1D;
      000A40 90 F0 00         [24] 2502 	mov	dptr,#_lcdGeneral
      000A43 74 5D            [12] 2503 	mov	a,#0x5d
      000A45 F0               [24] 2504 	movx	@dptr,a
      000A46 E4               [12] 2505 	clr	a
      000A47 A3               [24] 2506 	inc	dptr
      000A48 F0               [24] 2507 	movx	@dptr,a
                                   2508 ;	lcdCommands.c:370: busyWait();
      000A49 12r00r1E         [24] 2509 	lcall	_busyWait
                                   2510 ;	lcdCommands.c:371: writeCharacter = 0x09;
      000A4C 90 F1 00         [24] 2511 	mov	dptr,#_writeCharacter
      000A4F 74 09            [12] 2512 	mov	a,#0x09
      000A51 F0               [24] 2513 	movx	@dptr,a
      000A52 E4               [12] 2514 	clr	a
      000A53 A3               [24] 2515 	inc	dptr
      000A54 F0               [24] 2516 	movx	@dptr,a
                                   2517 ;	lcdCommands.c:372: busyWait();
      000A55 12r00r1E         [24] 2518 	lcall	_busyWait
                                   2519 ;	lcdCommands.c:373: lcdGeneral = 0x40 | 0x1E;
      000A58 90 F0 00         [24] 2520 	mov	dptr,#_lcdGeneral
      000A5B 74 5E            [12] 2521 	mov	a,#0x5e
      000A5D F0               [24] 2522 	movx	@dptr,a
      000A5E E4               [12] 2523 	clr	a
      000A5F A3               [24] 2524 	inc	dptr
      000A60 F0               [24] 2525 	movx	@dptr,a
                                   2526 ;	lcdCommands.c:374: busyWait();
      000A61 12r00r1E         [24] 2527 	lcall	_busyWait
                                   2528 ;	lcdCommands.c:375: writeCharacter = 0x12;
      000A64 90 F1 00         [24] 2529 	mov	dptr,#_writeCharacter
      000A67 74 12            [12] 2530 	mov	a,#0x12
      000A69 F0               [24] 2531 	movx	@dptr,a
      000A6A E4               [12] 2532 	clr	a
      000A6B A3               [24] 2533 	inc	dptr
      000A6C F0               [24] 2534 	movx	@dptr,a
                                   2535 ;	lcdCommands.c:376: busyWait();
      000A6D 12r00r1E         [24] 2536 	lcall	_busyWait
                                   2537 ;	lcdCommands.c:377: lcdGeneral = 0x40 | 0x1F;
      000A70 90 F0 00         [24] 2538 	mov	dptr,#_lcdGeneral
      000A73 74 5F            [12] 2539 	mov	a,#0x5f
      000A75 F0               [24] 2540 	movx	@dptr,a
      000A76 E4               [12] 2541 	clr	a
      000A77 A3               [24] 2542 	inc	dptr
      000A78 F0               [24] 2543 	movx	@dptr,a
                                   2544 ;	lcdCommands.c:378: busyWait();
      000A79 12r00r1E         [24] 2545 	lcall	_busyWait
                                   2546 ;	lcdCommands.c:379: writeCharacter = 0x0C;
      000A7C 90 F1 00         [24] 2547 	mov	dptr,#_writeCharacter
      000A7F 74 0C            [12] 2548 	mov	a,#0x0c
      000A81 F0               [24] 2549 	movx	@dptr,a
      000A82 E4               [12] 2550 	clr	a
      000A83 A3               [24] 2551 	inc	dptr
      000A84 F0               [24] 2552 	movx	@dptr,a
                                   2553 ;	lcdCommands.c:380: busyWait();
                                   2554 ;	lcdCommands.c:384: }
      000A85 02r00r1E         [24] 2555 	ljmp	_busyWait
                                   2556 ;------------------------------------------------------------
                                   2557 ;Allocation info for local variables in function 'printBinary'
                                   2558 ;------------------------------------------------------------
                                   2559 ;x                         Allocated with name '_printBinary_x_65536_125'
                                   2560 ;temp2                     Allocated with name '_printBinary_temp2_65536_126'
                                   2561 ;------------------------------------------------------------
                                   2562 ;	lcdCommands.c:386: void printBinary(int x)
                                   2563 ;	-----------------------------------------
                                   2564 ;	 function printBinary
                                   2565 ;	-----------------------------------------
      000A88                       2566 _printBinary:
      000A88 AF 83            [24] 2567 	mov	r7,dph
      000A8A E5 82            [12] 2568 	mov	a,dpl
      000A8C 90r00r1B         [24] 2569 	mov	dptr,#_printBinary_x_65536_125
      000A8F F0               [24] 2570 	movx	@dptr,a
      000A90 EF               [12] 2571 	mov	a,r7
      000A91 A3               [24] 2572 	inc	dptr
      000A92 F0               [24] 2573 	movx	@dptr,a
                                   2574 ;	lcdCommands.c:389: while(x != 0)
      000A93                       2575 00101$:
      000A93 90r00r1B         [24] 2576 	mov	dptr,#_printBinary_x_65536_125
      000A96 E0               [24] 2577 	movx	a,@dptr
      000A97 FE               [12] 2578 	mov	r6,a
      000A98 A3               [24] 2579 	inc	dptr
      000A99 E0               [24] 2580 	movx	a,@dptr
      000A9A FF               [12] 2581 	mov	r7,a
      000A9B 4E               [12] 2582 	orl	a,r6
      000A9C 60 3A            [24] 2583 	jz	00104$
                                   2584 ;	lcdCommands.c:391: temp2 = x % 2;
      000A9E 90r00r00         [24] 2585 	mov	dptr,#__modsint_PARM_2
      000AA1 74 02            [12] 2586 	mov	a,#0x02
      000AA3 F0               [24] 2587 	movx	@dptr,a
      000AA4 E4               [12] 2588 	clr	a
      000AA5 A3               [24] 2589 	inc	dptr
      000AA6 F0               [24] 2590 	movx	@dptr,a
                                   2591 ;	lcdCommands.c:392: putchar(temp2);
      000AA7 8E 82            [24] 2592 	mov	dpl,r6
      000AA9 8F 83            [24] 2593 	mov	dph,r7
      000AAB C0 07            [24] 2594 	push	ar7
      000AAD C0 06            [24] 2595 	push	ar6
      000AAF 12r00r00         [24] 2596 	lcall	__modsint
      000AB2 12r00r00         [24] 2597 	lcall	_putchar
      000AB5 D0 06            [24] 2598 	pop	ar6
      000AB7 D0 07            [24] 2599 	pop	ar7
                                   2600 ;	lcdCommands.c:393: x = x / 2;
      000AB9 90r00r00         [24] 2601 	mov	dptr,#__divsint_PARM_2
      000ABC 74 02            [12] 2602 	mov	a,#0x02
      000ABE F0               [24] 2603 	movx	@dptr,a
      000ABF E4               [12] 2604 	clr	a
      000AC0 A3               [24] 2605 	inc	dptr
      000AC1 F0               [24] 2606 	movx	@dptr,a
      000AC2 8E 82            [24] 2607 	mov	dpl,r6
      000AC4 8F 83            [24] 2608 	mov	dph,r7
      000AC6 12r00r00         [24] 2609 	lcall	__divsint
      000AC9 E5 82            [12] 2610 	mov	a,dpl
      000ACB 85 83 F0         [24] 2611 	mov	b,dph
      000ACE 90r00r1B         [24] 2612 	mov	dptr,#_printBinary_x_65536_125
      000AD1 F0               [24] 2613 	movx	@dptr,a
      000AD2 E5 F0            [12] 2614 	mov	a,b
      000AD4 A3               [24] 2615 	inc	dptr
      000AD5 F0               [24] 2616 	movx	@dptr,a
      000AD6 80 BB            [24] 2617 	sjmp	00101$
      000AD8                       2618 00104$:
                                   2619 ;	lcdCommands.c:395: }
      000AD8 22               [24] 2620 	ret
                                   2621 ;------------------------------------------------------------
                                   2622 ;Allocation info for local variables in function 'atoh'
                                   2623 ;------------------------------------------------------------
                                   2624 ;ap                        Allocated with name '_atoh_ap_65536_128'
                                   2625 ;p                         Allocated with name '_atoh_p_65536_129'
                                   2626 ;digit                     Allocated with name '_atoh_digit_65536_129'
                                   2627 ;lcase                     Allocated with name '_atoh_lcase_65536_129'
                                   2628 ;n                         Allocated with name '_atoh_n_65537_130'
                                   2629 ;------------------------------------------------------------
                                   2630 ;	lcdCommands.c:397: unsigned char atoh(char *ap)
                                   2631 ;	-----------------------------------------
                                   2632 ;	 function atoh
                                   2633 ;	-----------------------------------------
      000AD9                       2634 _atoh:
      000AD9 AF F0            [24] 2635 	mov	r7,b
      000ADB AE 83            [24] 2636 	mov	r6,dph
      000ADD E5 82            [12] 2637 	mov	a,dpl
      000ADF 90r00r1D         [24] 2638 	mov	dptr,#_atoh_ap_65536_128
      000AE2 F0               [24] 2639 	movx	@dptr,a
      000AE3 EE               [12] 2640 	mov	a,r6
      000AE4 A3               [24] 2641 	inc	dptr
      000AE5 F0               [24] 2642 	movx	@dptr,a
      000AE6 EF               [12] 2643 	mov	a,r7
      000AE7 A3               [24] 2644 	inc	dptr
      000AE8 F0               [24] 2645 	movx	@dptr,a
                                   2646 ;	lcdCommands.c:402: p = ap;
      000AE9 90r00r1D         [24] 2647 	mov	dptr,#_atoh_ap_65536_128
      000AEC E0               [24] 2648 	movx	a,@dptr
      000AED FD               [12] 2649 	mov	r5,a
      000AEE A3               [24] 2650 	inc	dptr
      000AEF E0               [24] 2651 	movx	a,@dptr
      000AF0 FE               [12] 2652 	mov	r6,a
      000AF1 A3               [24] 2653 	inc	dptr
      000AF2 E0               [24] 2654 	movx	a,@dptr
      000AF3 FF               [12] 2655 	mov	r7,a
                                   2656 ;	lcdCommands.c:403: unsigned char n = 0;
      000AF4 90r00r25         [24] 2657 	mov	dptr,#_atoh_n_65537_130
      000AF7 E4               [12] 2658 	clr	a
      000AF8 F0               [24] 2659 	movx	@dptr,a
                                   2660 ;	lcdCommands.c:404: while(*p == ' ' || *p == '	')
      000AF9                       2661 00102$:
      000AF9 8D 82            [24] 2662 	mov	dpl,r5
      000AFB 8E 83            [24] 2663 	mov	dph,r6
      000AFD 8F F0            [24] 2664 	mov	b,r7
      000AFF 12r00r00         [24] 2665 	lcall	__gptrget
      000B02 FC               [12] 2666 	mov	r4,a
      000B03 BC 20 02         [24] 2667 	cjne	r4,#0x20,00178$
      000B06 80 03            [24] 2668 	sjmp	00103$
      000B08                       2669 00178$:
      000B08 BC 09 07         [24] 2670 	cjne	r4,#0x09,00141$
      000B0B                       2671 00103$:
                                   2672 ;	lcdCommands.c:405: p++;
      000B0B 0D               [12] 2673 	inc	r5
      000B0C BD 00 EA         [24] 2674 	cjne	r5,#0x00,00102$
      000B0F 0E               [12] 2675 	inc	r6
      000B10 80 E7            [24] 2676 	sjmp	00102$
      000B12                       2677 00141$:
      000B12 90r00r20         [24] 2678 	mov	dptr,#_atoh_p_65536_129
      000B15 ED               [12] 2679 	mov	a,r5
      000B16 F0               [24] 2680 	movx	@dptr,a
      000B17 EE               [12] 2681 	mov	a,r6
      000B18 A3               [24] 2682 	inc	dptr
      000B19 F0               [24] 2683 	movx	@dptr,a
      000B1A EF               [12] 2684 	mov	a,r7
      000B1B A3               [24] 2685 	inc	dptr
      000B1C F0               [24] 2686 	movx	@dptr,a
                                   2687 ;	lcdCommands.c:407: if(*p == '0' && ((*(p+1) == 'x') || (*(p+1) == 'X')))
      000B1D BC 30 29         [24] 2688 	cjne	r4,#0x30,00118$
      000B20 74 01            [12] 2689 	mov	a,#0x01
      000B22 2D               [12] 2690 	add	a,r5
      000B23 FA               [12] 2691 	mov	r2,a
      000B24 E4               [12] 2692 	clr	a
      000B25 3E               [12] 2693 	addc	a,r6
      000B26 FB               [12] 2694 	mov	r3,a
      000B27 8F 04            [24] 2695 	mov	ar4,r7
      000B29 8A 82            [24] 2696 	mov	dpl,r2
      000B2B 8B 83            [24] 2697 	mov	dph,r3
      000B2D 8C F0            [24] 2698 	mov	b,r4
      000B2F 12r00r00         [24] 2699 	lcall	__gptrget
      000B32 FC               [12] 2700 	mov	r4,a
      000B33 BC 78 02         [24] 2701 	cjne	r4,#0x78,00184$
      000B36 80 03            [24] 2702 	sjmp	00105$
      000B38                       2703 00184$:
      000B38 BC 58 0E         [24] 2704 	cjne	r4,#0x58,00118$
      000B3B                       2705 00105$:
                                   2706 ;	lcdCommands.c:408: p+=2;
      000B3B 90r00r20         [24] 2707 	mov	dptr,#_atoh_p_65536_129
      000B3E 74 02            [12] 2708 	mov	a,#0x02
      000B40 2D               [12] 2709 	add	a,r5
      000B41 F0               [24] 2710 	movx	@dptr,a
      000B42 E4               [12] 2711 	clr	a
      000B43 3E               [12] 2712 	addc	a,r6
      000B44 A3               [24] 2713 	inc	dptr
      000B45 F0               [24] 2714 	movx	@dptr,a
      000B46 EF               [12] 2715 	mov	a,r7
      000B47 A3               [24] 2716 	inc	dptr
      000B48 F0               [24] 2717 	movx	@dptr,a
                                   2718 ;	lcdCommands.c:410: while ((digit = (*p >= '0' && *p <= '9')) ||
      000B49                       2719 00118$:
      000B49 90r00r20         [24] 2720 	mov	dptr,#_atoh_p_65536_129
      000B4C E0               [24] 2721 	movx	a,@dptr
      000B4D FD               [12] 2722 	mov	r5,a
      000B4E A3               [24] 2723 	inc	dptr
      000B4F E0               [24] 2724 	movx	a,@dptr
      000B50 FE               [12] 2725 	mov	r6,a
      000B51 A3               [24] 2726 	inc	dptr
      000B52 E0               [24] 2727 	movx	a,@dptr
      000B53 FF               [12] 2728 	mov	r7,a
      000B54 8D 82            [24] 2729 	mov	dpl,r5
      000B56 8E 83            [24] 2730 	mov	dph,r6
      000B58 8F F0            [24] 2731 	mov	b,r7
      000B5A 12r00r00         [24] 2732 	lcall	__gptrget
      000B5D FF               [12] 2733 	mov	r7,a
      000B5E BF 30 00         [24] 2734 	cjne	r7,#0x30,00187$
      000B61                       2735 00187$:
      000B61 40 05            [24] 2736 	jc	00123$
      000B63 EF               [12] 2737 	mov	a,r7
      000B64 24 C6            [12] 2738 	add	a,#0xff - 0x39
      000B66 50 04            [24] 2739 	jnc	00124$
      000B68                       2740 00123$:
      000B68 7F 00            [12] 2741 	mov	r7,#0x00
      000B6A 80 02            [24] 2742 	sjmp	00125$
      000B6C                       2743 00124$:
      000B6C 7F 01            [12] 2744 	mov	r7,#0x01
      000B6E                       2745 00125$:
      000B6E EF               [12] 2746 	mov	a,r7
      000B6F FD               [12] 2747 	mov	r5,a
      000B70 33               [12] 2748 	rlc	a
      000B71 95 E0            [12] 2749 	subb	a,acc
      000B73 FE               [12] 2750 	mov	r6,a
      000B74 EF               [12] 2751 	mov	a,r7
      000B75 70 5C            [24] 2752 	jnz	00119$
                                   2753 ;	lcdCommands.c:411: (lcase = (*p >= 'a' && *p <= 'f')) ||
      000B77 90r00r20         [24] 2754 	mov	dptr,#_atoh_p_65536_129
      000B7A E0               [24] 2755 	movx	a,@dptr
      000B7B FB               [12] 2756 	mov	r3,a
      000B7C A3               [24] 2757 	inc	dptr
      000B7D E0               [24] 2758 	movx	a,@dptr
      000B7E FC               [12] 2759 	mov	r4,a
      000B7F A3               [24] 2760 	inc	dptr
      000B80 E0               [24] 2761 	movx	a,@dptr
      000B81 FF               [12] 2762 	mov	r7,a
      000B82 8B 82            [24] 2763 	mov	dpl,r3
      000B84 8C 83            [24] 2764 	mov	dph,r4
      000B86 8F F0            [24] 2765 	mov	b,r7
      000B88 12r00r00         [24] 2766 	lcall	__gptrget
      000B8B FF               [12] 2767 	mov	r7,a
      000B8C BF 61 00         [24] 2768 	cjne	r7,#0x61,00191$
      000B8F                       2769 00191$:
      000B8F 40 05            [24] 2770 	jc	00126$
      000B91 EF               [12] 2771 	mov	a,r7
      000B92 24 99            [12] 2772 	add	a,#0xff - 0x66
      000B94 50 04            [24] 2773 	jnc	00127$
      000B96                       2774 00126$:
      000B96 7F 00            [12] 2775 	mov	r7,#0x00
      000B98 80 02            [24] 2776 	sjmp	00128$
      000B9A                       2777 00127$:
      000B9A 7F 01            [12] 2778 	mov	r7,#0x01
      000B9C                       2779 00128$:
      000B9C EF               [12] 2780 	mov	a,r7
      000B9D FC               [12] 2781 	mov	r4,a
      000B9E 33               [12] 2782 	rlc	a
      000B9F 95 E0            [12] 2783 	subb	a,acc
      000BA1 FF               [12] 2784 	mov	r7,a
      000BA2 90r00r23         [24] 2785 	mov	dptr,#_atoh_lcase_65536_129
      000BA5 EC               [12] 2786 	mov	a,r4
      000BA6 F0               [24] 2787 	movx	@dptr,a
      000BA7 EF               [12] 2788 	mov	a,r7
      000BA8 A3               [24] 2789 	inc	dptr
      000BA9 F0               [24] 2790 	movx	@dptr,a
      000BAA EC               [12] 2791 	mov	a,r4
      000BAB 4F               [12] 2792 	orl	a,r7
      000BAC 70 25            [24] 2793 	jnz	00119$
                                   2794 ;	lcdCommands.c:412: (*p >= 'A' && *p <= 'F')) {
      000BAE 90r00r20         [24] 2795 	mov	dptr,#_atoh_p_65536_129
      000BB1 E0               [24] 2796 	movx	a,@dptr
      000BB2 FB               [12] 2797 	mov	r3,a
      000BB3 A3               [24] 2798 	inc	dptr
      000BB4 E0               [24] 2799 	movx	a,@dptr
      000BB5 FC               [12] 2800 	mov	r4,a
      000BB6 A3               [24] 2801 	inc	dptr
      000BB7 E0               [24] 2802 	movx	a,@dptr
      000BB8 FF               [12] 2803 	mov	r7,a
      000BB9 8B 82            [24] 2804 	mov	dpl,r3
      000BBB 8C 83            [24] 2805 	mov	dph,r4
      000BBD 8F F0            [24] 2806 	mov	b,r7
      000BBF 12r00r00         [24] 2807 	lcall	__gptrget
      000BC2 FF               [12] 2808 	mov	r7,a
      000BC3 BF 41 00         [24] 2809 	cjne	r7,#0x41,00195$
      000BC6                       2810 00195$:
      000BC6 50 03            [24] 2811 	jnc	00196$
      000BC8 02r0Cr7E         [24] 2812 	ljmp	00120$
      000BCB                       2813 00196$:
      000BCB EF               [12] 2814 	mov	a,r7
      000BCC 24 B9            [12] 2815 	add	a,#0xff - 0x46
      000BCE 50 03            [24] 2816 	jnc	00197$
      000BD0 02r0Cr7E         [24] 2817 	ljmp	00120$
      000BD3                       2818 00197$:
      000BD3                       2819 00119$:
                                   2820 ;	lcdCommands.c:413: n *= 16;
      000BD3 90r00r25         [24] 2821 	mov	dptr,#_atoh_n_65537_130
      000BD6 E0               [24] 2822 	movx	a,@dptr
      000BD7 C4               [12] 2823 	swap	a
      000BD8 54 F0            [12] 2824 	anl	a,#0xf0
      000BDA F0               [24] 2825 	movx	@dptr,a
                                   2826 ;	lcdCommands.c:414: if (digit)	n += *p++ - '0';
      000BDB ED               [12] 2827 	mov	a,r5
      000BDC 4E               [12] 2828 	orl	a,r6
      000BDD 60 31            [24] 2829 	jz	00113$
      000BDF 90r00r20         [24] 2830 	mov	dptr,#_atoh_p_65536_129
      000BE2 E0               [24] 2831 	movx	a,@dptr
      000BE3 FD               [12] 2832 	mov	r5,a
      000BE4 A3               [24] 2833 	inc	dptr
      000BE5 E0               [24] 2834 	movx	a,@dptr
      000BE6 FE               [12] 2835 	mov	r6,a
      000BE7 A3               [24] 2836 	inc	dptr
      000BE8 E0               [24] 2837 	movx	a,@dptr
      000BE9 FF               [12] 2838 	mov	r7,a
      000BEA 8D 82            [24] 2839 	mov	dpl,r5
      000BEC 8E 83            [24] 2840 	mov	dph,r6
      000BEE 8F F0            [24] 2841 	mov	b,r7
      000BF0 12r00r00         [24] 2842 	lcall	__gptrget
      000BF3 FC               [12] 2843 	mov	r4,a
      000BF4 90r00r20         [24] 2844 	mov	dptr,#_atoh_p_65536_129
      000BF7 74 01            [12] 2845 	mov	a,#0x01
      000BF9 2D               [12] 2846 	add	a,r5
      000BFA F0               [24] 2847 	movx	@dptr,a
      000BFB E4               [12] 2848 	clr	a
      000BFC 3E               [12] 2849 	addc	a,r6
      000BFD A3               [24] 2850 	inc	dptr
      000BFE F0               [24] 2851 	movx	@dptr,a
      000BFF EF               [12] 2852 	mov	a,r7
      000C00 A3               [24] 2853 	inc	dptr
      000C01 F0               [24] 2854 	movx	@dptr,a
      000C02 EC               [12] 2855 	mov	a,r4
      000C03 24 D0            [12] 2856 	add	a,#0xd0
      000C05 FC               [12] 2857 	mov	r4,a
      000C06 90r00r25         [24] 2858 	mov	dptr,#_atoh_n_65537_130
      000C09 E0               [24] 2859 	movx	a,@dptr
      000C0A FF               [12] 2860 	mov	r7,a
      000C0B 2C               [12] 2861 	add	a,r4
      000C0C F0               [24] 2862 	movx	@dptr,a
      000C0D 02r0Br49         [24] 2863 	ljmp	00118$
      000C10                       2864 00113$:
                                   2865 ;	lcdCommands.c:415: else if (lcase)	n += 10 + (*p++ - 'a');
      000C10 90r00r23         [24] 2866 	mov	dptr,#_atoh_lcase_65536_129
      000C13 E0               [24] 2867 	movx	a,@dptr
      000C14 F5 F0            [12] 2868 	mov	b,a
      000C16 A3               [24] 2869 	inc	dptr
      000C17 E0               [24] 2870 	movx	a,@dptr
      000C18 45 F0            [12] 2871 	orl	a,b
      000C1A 60 31            [24] 2872 	jz	00110$
      000C1C 90r00r20         [24] 2873 	mov	dptr,#_atoh_p_65536_129
      000C1F E0               [24] 2874 	movx	a,@dptr
      000C20 FD               [12] 2875 	mov	r5,a
      000C21 A3               [24] 2876 	inc	dptr
      000C22 E0               [24] 2877 	movx	a,@dptr
      000C23 FE               [12] 2878 	mov	r6,a
      000C24 A3               [24] 2879 	inc	dptr
      000C25 E0               [24] 2880 	movx	a,@dptr
      000C26 FF               [12] 2881 	mov	r7,a
      000C27 8D 82            [24] 2882 	mov	dpl,r5
      000C29 8E 83            [24] 2883 	mov	dph,r6
      000C2B 8F F0            [24] 2884 	mov	b,r7
      000C2D 12r00r00         [24] 2885 	lcall	__gptrget
      000C30 FC               [12] 2886 	mov	r4,a
      000C31 90r00r20         [24] 2887 	mov	dptr,#_atoh_p_65536_129
      000C34 74 01            [12] 2888 	mov	a,#0x01
      000C36 2D               [12] 2889 	add	a,r5
      000C37 F0               [24] 2890 	movx	@dptr,a
      000C38 E4               [12] 2891 	clr	a
      000C39 3E               [12] 2892 	addc	a,r6
      000C3A A3               [24] 2893 	inc	dptr
      000C3B F0               [24] 2894 	movx	@dptr,a
      000C3C EF               [12] 2895 	mov	a,r7
      000C3D A3               [24] 2896 	inc	dptr
      000C3E F0               [24] 2897 	movx	@dptr,a
      000C3F 74 A9            [12] 2898 	mov	a,#0xa9
      000C41 2C               [12] 2899 	add	a,r4
      000C42 FC               [12] 2900 	mov	r4,a
      000C43 90r00r25         [24] 2901 	mov	dptr,#_atoh_n_65537_130
      000C46 E0               [24] 2902 	movx	a,@dptr
      000C47 FF               [12] 2903 	mov	r7,a
      000C48 2C               [12] 2904 	add	a,r4
      000C49 F0               [24] 2905 	movx	@dptr,a
      000C4A 02r0Br49         [24] 2906 	ljmp	00118$
      000C4D                       2907 00110$:
                                   2908 ;	lcdCommands.c:416: else		n += 10 + (*p++ - 'A');
      000C4D 90r00r20         [24] 2909 	mov	dptr,#_atoh_p_65536_129
      000C50 E0               [24] 2910 	movx	a,@dptr
      000C51 FD               [12] 2911 	mov	r5,a
      000C52 A3               [24] 2912 	inc	dptr
      000C53 E0               [24] 2913 	movx	a,@dptr
      000C54 FE               [12] 2914 	mov	r6,a
      000C55 A3               [24] 2915 	inc	dptr
      000C56 E0               [24] 2916 	movx	a,@dptr
      000C57 FF               [12] 2917 	mov	r7,a
      000C58 8D 82            [24] 2918 	mov	dpl,r5
      000C5A 8E 83            [24] 2919 	mov	dph,r6
      000C5C 8F F0            [24] 2920 	mov	b,r7
      000C5E 12r00r00         [24] 2921 	lcall	__gptrget
      000C61 FC               [12] 2922 	mov	r4,a
      000C62 90r00r20         [24] 2923 	mov	dptr,#_atoh_p_65536_129
      000C65 74 01            [12] 2924 	mov	a,#0x01
      000C67 2D               [12] 2925 	add	a,r5
      000C68 F0               [24] 2926 	movx	@dptr,a
      000C69 E4               [12] 2927 	clr	a
      000C6A 3E               [12] 2928 	addc	a,r6
      000C6B A3               [24] 2929 	inc	dptr
      000C6C F0               [24] 2930 	movx	@dptr,a
      000C6D EF               [12] 2931 	mov	a,r7
      000C6E A3               [24] 2932 	inc	dptr
      000C6F F0               [24] 2933 	movx	@dptr,a
      000C70 74 C9            [12] 2934 	mov	a,#0xc9
      000C72 2C               [12] 2935 	add	a,r4
      000C73 FC               [12] 2936 	mov	r4,a
      000C74 90r00r25         [24] 2937 	mov	dptr,#_atoh_n_65537_130
      000C77 E0               [24] 2938 	movx	a,@dptr
      000C78 FF               [12] 2939 	mov	r7,a
      000C79 2C               [12] 2940 	add	a,r4
      000C7A F0               [24] 2941 	movx	@dptr,a
      000C7B 02r0Br49         [24] 2942 	ljmp	00118$
      000C7E                       2943 00120$:
                                   2944 ;	lcdCommands.c:418: return(n);
      000C7E 90r00r25         [24] 2945 	mov	dptr,#_atoh_n_65537_130
      000C81 E0               [24] 2946 	movx	a,@dptr
                                   2947 ;	lcdCommands.c:419: }
      000C82 F5 82            [12] 2948 	mov	dpl,a
      000C84 22               [24] 2949 	ret
                                   2950 ;------------------------------------------------------------
                                   2951 ;Allocation info for local variables in function 'printMenu'
                                   2952 ;------------------------------------------------------------
                                   2953 ;i                         Allocated with name '_printMenu_i_65536_132'
                                   2954 ;------------------------------------------------------------
                                   2955 ;	lcdCommands.c:421: void printMenu()
                                   2956 ;	-----------------------------------------
                                   2957 ;	 function printMenu
                                   2958 ;	-----------------------------------------
      000C85                       2959 _printMenu:
                                   2960 ;	lcdCommands.c:424: printf("%s",uiLines);
      000C85 74r00            [12] 2961 	mov	a,#_uiLines
      000C87 C0 E0            [24] 2962 	push	acc
      000C89 74s00            [12] 2963 	mov	a,#(_uiLines >> 8)
      000C8B C0 E0            [24] 2964 	push	acc
      000C8D 74 80            [12] 2965 	mov	a,#0x80
      000C8F C0 E0            [24] 2966 	push	acc
      000C91 74r26            [12] 2967 	mov	a,#___str_10
      000C93 C0 E0            [24] 2968 	push	acc
      000C95 74s03            [12] 2969 	mov	a,#(___str_10 >> 8)
      000C97 C0 E0            [24] 2970 	push	acc
      000C99 74 80            [12] 2971 	mov	a,#0x80
      000C9B C0 E0            [24] 2972 	push	acc
      000C9D 12r00r00         [24] 2973 	lcall	_printf
      000CA0 E5 81            [12] 2974 	mov	a,sp
      000CA2 24 FA            [12] 2975 	add	a,#0xfa
      000CA4 F5 81            [12] 2976 	mov	sp,a
                                   2977 ;	lcdCommands.c:425: printf("\n\r");
      000CA6 74rA1            [12] 2978 	mov	a,#___str_6
      000CA8 C0 E0            [24] 2979 	push	acc
      000CAA 74s02            [12] 2980 	mov	a,#(___str_6 >> 8)
      000CAC C0 E0            [24] 2981 	push	acc
      000CAE 74 80            [12] 2982 	mov	a,#0x80
      000CB0 C0 E0            [24] 2983 	push	acc
      000CB2 12r00r00         [24] 2984 	lcall	_printf
      000CB5 15 81            [12] 2985 	dec	sp
      000CB7 15 81            [12] 2986 	dec	sp
      000CB9 15 81            [12] 2987 	dec	sp
                                   2988 ;	lcdCommands.c:426: for ( i = 0; i < 10; i++)
      000CBB 7E 00            [12] 2989 	mov	r6,#0x00
      000CBD 7F 00            [12] 2990 	mov	r7,#0x00
      000CBF                       2991 00102$:
                                   2992 ;	lcdCommands.c:428: printf("%s",messages[i]);
      000CBF 90r00r00         [24] 2993 	mov	dptr,#__mulint_PARM_2
      000CC2 EE               [12] 2994 	mov	a,r6
      000CC3 F0               [24] 2995 	movx	@dptr,a
      000CC4 EF               [12] 2996 	mov	a,r7
      000CC5 A3               [24] 2997 	inc	dptr
      000CC6 F0               [24] 2998 	movx	@dptr,a
      000CC7 90 00 28         [24] 2999 	mov	dptr,#0x0028
      000CCA C0 07            [24] 3000 	push	ar7
      000CCC C0 06            [24] 3001 	push	ar6
      000CCE 12r00r00         [24] 3002 	lcall	__mulint
      000CD1 AC 82            [24] 3003 	mov	r4,dpl
      000CD3 AD 83            [24] 3004 	mov	r5,dph
      000CD5 EC               [12] 3005 	mov	a,r4
      000CD6 24r3C            [12] 3006 	add	a,#_messages
      000CD8 FC               [12] 3007 	mov	r4,a
      000CD9 ED               [12] 3008 	mov	a,r5
      000CDA 34s00            [12] 3009 	addc	a,#(_messages >> 8)
      000CDC FD               [12] 3010 	mov	r5,a
      000CDD 7B 80            [12] 3011 	mov	r3,#0x80
      000CDF C0 04            [24] 3012 	push	ar4
      000CE1 C0 05            [24] 3013 	push	ar5
      000CE3 C0 03            [24] 3014 	push	ar3
      000CE5 74r26            [12] 3015 	mov	a,#___str_10
      000CE7 C0 E0            [24] 3016 	push	acc
      000CE9 74s03            [12] 3017 	mov	a,#(___str_10 >> 8)
      000CEB C0 E0            [24] 3018 	push	acc
      000CED EB               [12] 3019 	mov	a,r3
      000CEE C0 E0            [24] 3020 	push	acc
      000CF0 12r00r00         [24] 3021 	lcall	_printf
      000CF3 E5 81            [12] 3022 	mov	a,sp
      000CF5 24 FA            [12] 3023 	add	a,#0xfa
      000CF7 F5 81            [12] 3024 	mov	sp,a
                                   3025 ;	lcdCommands.c:429: printf_tiny("\n\r");
      000CF9 74rA1            [12] 3026 	mov	a,#___str_6
      000CFB C0 E0            [24] 3027 	push	acc
      000CFD 74s02            [12] 3028 	mov	a,#(___str_6 >> 8)
      000CFF C0 E0            [24] 3029 	push	acc
      000D01 12r00r00         [24] 3030 	lcall	_printf_tiny
      000D04 15 81            [12] 3031 	dec	sp
      000D06 15 81            [12] 3032 	dec	sp
      000D08 D0 06            [24] 3033 	pop	ar6
      000D0A D0 07            [24] 3034 	pop	ar7
                                   3035 ;	lcdCommands.c:426: for ( i = 0; i < 10; i++)
      000D0C 0E               [12] 3036 	inc	r6
      000D0D BE 00 01         [24] 3037 	cjne	r6,#0x00,00115$
      000D10 0F               [12] 3038 	inc	r7
      000D11                       3039 00115$:
      000D11 C3               [12] 3040 	clr	c
      000D12 EE               [12] 3041 	mov	a,r6
      000D13 94 0A            [12] 3042 	subb	a,#0x0a
      000D15 EF               [12] 3043 	mov	a,r7
      000D16 64 80            [12] 3044 	xrl	a,#0x80
      000D18 94 80            [12] 3045 	subb	a,#0x80
      000D1A 40 A3            [24] 3046 	jc	00102$
                                   3047 ;	lcdCommands.c:431: printf("%s",uiLines);
      000D1C 74r00            [12] 3048 	mov	a,#_uiLines
      000D1E C0 E0            [24] 3049 	push	acc
      000D20 74s00            [12] 3050 	mov	a,#(_uiLines >> 8)
      000D22 C0 E0            [24] 3051 	push	acc
      000D24 74 80            [12] 3052 	mov	a,#0x80
      000D26 C0 E0            [24] 3053 	push	acc
      000D28 74r26            [12] 3054 	mov	a,#___str_10
      000D2A C0 E0            [24] 3055 	push	acc
      000D2C 74s03            [12] 3056 	mov	a,#(___str_10 >> 8)
      000D2E C0 E0            [24] 3057 	push	acc
      000D30 74 80            [12] 3058 	mov	a,#0x80
      000D32 C0 E0            [24] 3059 	push	acc
      000D34 12r00r00         [24] 3060 	lcall	_printf
      000D37 E5 81            [12] 3061 	mov	a,sp
      000D39 24 FA            [12] 3062 	add	a,#0xfa
      000D3B F5 81            [12] 3063 	mov	sp,a
                                   3064 ;	lcdCommands.c:432: printf("\n\r");
      000D3D 74rA1            [12] 3065 	mov	a,#___str_6
      000D3F C0 E0            [24] 3066 	push	acc
      000D41 74s02            [12] 3067 	mov	a,#(___str_6 >> 8)
      000D43 C0 E0            [24] 3068 	push	acc
      000D45 74 80            [12] 3069 	mov	a,#0x80
      000D47 C0 E0            [24] 3070 	push	acc
      000D49 12r00r00         [24] 3071 	lcall	_printf
      000D4C 15 81            [12] 3072 	dec	sp
      000D4E 15 81            [12] 3073 	dec	sp
      000D50 15 81            [12] 3074 	dec	sp
                                   3075 ;	lcdCommands.c:434: }
      000D52 22               [24] 3076 	ret
                                   3077 	.area CSEG    (CODE)
                                   3078 	.area CONST   (CODE)
      000000                       3079 _uiLines:
      000000 0A                    3080 	.db 0x0a
      000001 0D                    3081 	.db 0x0d
      000002 2D 2D 2D 2D 2D 2D 2D  3082 	.ascii "-------------------------------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
      000033 0A                    3083 	.db 0x0a
      000034 0D                    3084 	.db 0x0d
      000035 00                    3085 	.db 0x00
      000036 00                    3086 	.db 0x00
      000037 00                    3087 	.db 0x00
      000038 00                    3088 	.db 0x00
      000039 00                    3089 	.db 0x00
      00003A 00                    3090 	.db 0x00
      00003B 00                    3091 	.db 0x00
      00003C                       3092 _messages:
      00003C 20 45 6E 74 65 72 20  3093 	.ascii " Enter w to write a character "
             77 20 74 6F 20 77 72
             69 74 65 20 61 20 63
             68 61 72 61 63 74 65
             72 20
      00005A 00                    3094 	.db 0x00
      00005B 00                    3095 	.db 0x00
      00005C 00                    3096 	.db 0x00
      00005D 00                    3097 	.db 0x00
      00005E 00                    3098 	.db 0x00
      00005F 00                    3099 	.db 0x00
      000060 00                    3100 	.db 0x00
      000061 00                    3101 	.db 0x00
      000062 00                    3102 	.db 0x00
      000063 00                    3103 	.db 0x00
      000064 20 45 6E 74 65 72 20  3104 	.ascii " Enter s to write a string"
             73 20 74 6F 20 77 72
             69 74 65 20 61 20 73
             74 72 69 6E 67
      00007E 00                    3105 	.db 0x00
      00007F 00                    3106 	.db 0x00
      000080 00                    3107 	.db 0x00
      000081 00                    3108 	.db 0x00
      000082 00                    3109 	.db 0x00
      000083 00                    3110 	.db 0x00
      000084 00                    3111 	.db 0x00
      000085 00                    3112 	.db 0x00
      000086 00                    3113 	.db 0x00
      000087 00                    3114 	.db 0x00
      000088 00                    3115 	.db 0x00
      000089 00                    3116 	.db 0x00
      00008A 00                    3117 	.db 0x00
      00008B 00                    3118 	.db 0x00
      00008C 20 45 6E 74 65 72 20  3119 	.ascii " Enter p to play pacman "
             70 20 74 6F 20 70 6C
             61 79 20 70 61 63 6D
             61 6E 20
      0000A4 00                    3120 	.db 0x00
      0000A5 00                    3121 	.db 0x00
      0000A6 00                    3122 	.db 0x00
      0000A7 00                    3123 	.db 0x00
      0000A8 00                    3124 	.db 0x00
      0000A9 00                    3125 	.db 0x00
      0000AA 00                    3126 	.db 0x00
      0000AB 00                    3127 	.db 0x00
      0000AC 00                    3128 	.db 0x00
      0000AD 00                    3129 	.db 0x00
      0000AE 00                    3130 	.db 0x00
      0000AF 00                    3131 	.db 0x00
      0000B0 00                    3132 	.db 0x00
      0000B1 00                    3133 	.db 0x00
      0000B2 00                    3134 	.db 0x00
      0000B3 00                    3135 	.db 0x00
      0000B4 20 45 6E 74 65 72 20  3136 	.ascii " Enter d to perform RAM dump "
             64 20 74 6F 20 70 65
             72 66 6F 72 6D 20 52
             41 4D 20 64 75 6D 70
             20
      0000D1 00                    3137 	.db 0x00
      0000D2 00                    3138 	.db 0x00
      0000D3 00                    3139 	.db 0x00
      0000D4 00                    3140 	.db 0x00
      0000D5 00                    3141 	.db 0x00
      0000D6 00                    3142 	.db 0x00
      0000D7 00                    3143 	.db 0x00
      0000D8 00                    3144 	.db 0x00
      0000D9 00                    3145 	.db 0x00
      0000DA 00                    3146 	.db 0x00
      0000DB 00                    3147 	.db 0x00
      0000DC 20 45 6E 74 65 72 20  3148 	.ascii " Enter g for custom character"
             67 20 66 6F 72 20 63
             75 73 74 6F 6D 20 63
             68 61 72 61 63 74 65
             72
      0000F9 00                    3149 	.db 0x00
      0000FA 00                    3150 	.db 0x00
      0000FB 00                    3151 	.db 0x00
      0000FC 00                    3152 	.db 0x00
      0000FD 00                    3153 	.db 0x00
      0000FE 00                    3154 	.db 0x00
      0000FF 00                    3155 	.db 0x00
      000100 00                    3156 	.db 0x00
      000101 00                    3157 	.db 0x00
      000102 00                    3158 	.db 0x00
      000103 00                    3159 	.db 0x00
      000104 20 45 6E 74 65 72 20  3160 	.ascii " Enter x to reset timer"
             78 20 74 6F 20 72 65
             73 65 74 20 74 69 6D
             65 72
      00011B 00                    3161 	.db 0x00
      00011C 00                    3162 	.db 0x00
      00011D 00                    3163 	.db 0x00
      00011E 00                    3164 	.db 0x00
      00011F 00                    3165 	.db 0x00
      000120 00                    3166 	.db 0x00
      000121 00                    3167 	.db 0x00
      000122 00                    3168 	.db 0x00
      000123 00                    3169 	.db 0x00
      000124 00                    3170 	.db 0x00
      000125 00                    3171 	.db 0x00
      000126 00                    3172 	.db 0x00
      000127 00                    3173 	.db 0x00
      000128 00                    3174 	.db 0x00
      000129 00                    3175 	.db 0x00
      00012A 00                    3176 	.db 0x00
      00012B 00                    3177 	.db 0x00
      00012C 20 45 6E 74 65 72 20  3178 	.ascii " Enter y to pause timer"
             79 20 74 6F 20 70 61
             75 73 65 20 74 69 6D
             65 72
      000143 00                    3179 	.db 0x00
      000144 00                    3180 	.db 0x00
      000145 00                    3181 	.db 0x00
      000146 00                    3182 	.db 0x00
      000147 00                    3183 	.db 0x00
      000148 00                    3184 	.db 0x00
      000149 00                    3185 	.db 0x00
      00014A 00                    3186 	.db 0x00
      00014B 00                    3187 	.db 0x00
      00014C 00                    3188 	.db 0x00
      00014D 00                    3189 	.db 0x00
      00014E 00                    3190 	.db 0x00
      00014F 00                    3191 	.db 0x00
      000150 00                    3192 	.db 0x00
      000151 00                    3193 	.db 0x00
      000152 00                    3194 	.db 0x00
      000153 00                    3195 	.db 0x00
      000154 20 45 6E 74 65 72 20  3196 	.ascii " Enter z to resume timer"
             7A 20 74 6F 20 72 65
             73 75 6D 65 20 74 69
             6D 65 72
      00016C 00                    3197 	.db 0x00
      00016D 00                    3198 	.db 0x00
      00016E 00                    3199 	.db 0x00
      00016F 00                    3200 	.db 0x00
      000170 00                    3201 	.db 0x00
      000171 00                    3202 	.db 0x00
      000172 00                    3203 	.db 0x00
      000173 00                    3204 	.db 0x00
      000174 00                    3205 	.db 0x00
      000175 00                    3206 	.db 0x00
      000176 00                    3207 	.db 0x00
      000177 00                    3208 	.db 0x00
      000178 00                    3209 	.db 0x00
      000179 00                    3210 	.db 0x00
      00017A 00                    3211 	.db 0x00
      00017B 00                    3212 	.db 0x00
      00017C 20 45 6E 74 65 72 20  3213 	.ascii " Enter s to clear screen"
             73 20 74 6F 20 63 6C
             65 61 72 20 73 63 72
             65 65 6E
      000194 00                    3214 	.db 0x00
      000195 00                    3215 	.db 0x00
      000196 00                    3216 	.db 0x00
      000197 00                    3217 	.db 0x00
      000198 00                    3218 	.db 0x00
      000199 00                    3219 	.db 0x00
      00019A 00                    3220 	.db 0x00
      00019B 00                    3221 	.db 0x00
      00019C 00                    3222 	.db 0x00
      00019D 00                    3223 	.db 0x00
      00019E 00                    3224 	.db 0x00
      00019F 00                    3225 	.db 0x00
      0001A0 00                    3226 	.db 0x00
      0001A1 00                    3227 	.db 0x00
      0001A2 00                    3228 	.db 0x00
      0001A3 00                    3229 	.db 0x00
      0001A4 20 45 6E 74 65 72 20  3230 	.ascii " Enter m for main menu "
             6D 20 66 6F 72 20 6D
             61 69 6E 20 6D 65 6E
             75 20
      0001BB 00                    3231 	.db 0x00
      0001BC 00                    3232 	.db 0x00
      0001BD 00                    3233 	.db 0x00
      0001BE 00                    3234 	.db 0x00
      0001BF 00                    3235 	.db 0x00
      0001C0 00                    3236 	.db 0x00
      0001C1 00                    3237 	.db 0x00
      0001C2 00                    3238 	.db 0x00
      0001C3 00                    3239 	.db 0x00
      0001C4 00                    3240 	.db 0x00
      0001C5 00                    3241 	.db 0x00
      0001C6 00                    3242 	.db 0x00
      0001C7 00                    3243 	.db 0x00
      0001C8 00                    3244 	.db 0x00
      0001C9 00                    3245 	.db 0x00
      0001CA 00                    3246 	.db 0x00
      0001CB 00                    3247 	.db 0x00
      0001CC 00                    3248 	.db 0x00
      0001CD 00                    3249 	.db 0x00
      0001CE 00                    3250 	.db 0x00
      0001CF 00                    3251 	.db 0x00
      0001D0 00                    3252 	.db 0x00
      0001D1 00                    3253 	.db 0x00
      0001D2 00                    3254 	.db 0x00
      0001D3 00                    3255 	.db 0x00
      0001D4 00                    3256 	.db 0x00
      0001D5 00                    3257 	.db 0x00
      0001D6 00                    3258 	.db 0x00
      0001D7 00                    3259 	.db 0x00
      0001D8 00                    3260 	.db 0x00
      0001D9 00                    3261 	.db 0x00
      0001DA 00                    3262 	.db 0x00
      0001DB 00                    3263 	.db 0x00
      0001DC 00                    3264 	.db 0x00
      0001DD 00                    3265 	.db 0x00
      0001DE 00                    3266 	.db 0x00
      0001DF 00                    3267 	.db 0x00
      0001E0 00                    3268 	.db 0x00
      0001E1 00                    3269 	.db 0x00
      0001E2 00                    3270 	.db 0x00
      0001E3 00                    3271 	.db 0x00
      0001E4 00                    3272 	.db 0x00
      0001E5 00                    3273 	.db 0x00
      0001E6 00                    3274 	.db 0x00
      0001E7 00                    3275 	.db 0x00
      0001E8 00                    3276 	.db 0x00
      0001E9 00                    3277 	.db 0x00
      0001EA 00                    3278 	.db 0x00
      0001EB 00                    3279 	.db 0x00
      0001EC 00                    3280 	.db 0x00
      0001ED 00                    3281 	.db 0x00
      0001EE 00                    3282 	.db 0x00
      0001EF 00                    3283 	.db 0x00
      0001F0 00                    3284 	.db 0x00
      0001F1 00                    3285 	.db 0x00
      0001F2 00                    3286 	.db 0x00
      0001F3 00                    3287 	.db 0x00
      0001F4                       3288 _lookUpTable:
      0001F4 00                    3289 	.db #0x00	; 0
      0001F5 01                    3290 	.db #0x01	; 1
      0001F6 02                    3291 	.db #0x02	; 2
      0001F7 03                    3292 	.db #0x03	; 3
      0001F8 04                    3293 	.db #0x04	; 4
      0001F9 05                    3294 	.db #0x05	; 5
      0001FA 06                    3295 	.db #0x06	; 6
      0001FB 07                    3296 	.db #0x07	; 7
      0001FC 08                    3297 	.db #0x08	; 8
      0001FD 09                    3298 	.db #0x09	; 9
      0001FE 0A                    3299 	.db #0x0a	; 10
      0001FF 0B                    3300 	.db #0x0b	; 11
      000200 0C                    3301 	.db #0x0c	; 12
      000201 0D                    3302 	.db #0x0d	; 13
      000202 0E                    3303 	.db #0x0e	; 14
      000203 0F                    3304 	.db #0x0f	; 15
      000204 40                    3305 	.db #0x40	; 64
      000205 41                    3306 	.db #0x41	; 65	'A'
      000206 42                    3307 	.db #0x42	; 66	'B'
      000207 43                    3308 	.db #0x43	; 67	'C'
      000208 44                    3309 	.db #0x44	; 68	'D'
      000209 45                    3310 	.db #0x45	; 69	'E'
      00020A 46                    3311 	.db #0x46	; 70	'F'
      00020B 47                    3312 	.db #0x47	; 71	'G'
      00020C 48                    3313 	.db #0x48	; 72	'H'
      00020D 49                    3314 	.db #0x49	; 73	'I'
      00020E 4A                    3315 	.db #0x4a	; 74	'J'
      00020F 4B                    3316 	.db #0x4b	; 75	'K'
      000210 4C                    3317 	.db #0x4c	; 76	'L'
      000211 4D                    3318 	.db #0x4d	; 77	'M'
      000212 4E                    3319 	.db #0x4e	; 78	'N'
      000213 4F                    3320 	.db #0x4f	; 79	'O'
      000214 10                    3321 	.db #0x10	; 16
      000215 11                    3322 	.db #0x11	; 17
      000216 12                    3323 	.db #0x12	; 18
      000217 13                    3324 	.db #0x13	; 19
      000218 14                    3325 	.db #0x14	; 20
      000219 15                    3326 	.db #0x15	; 21
      00021A 16                    3327 	.db #0x16	; 22
      00021B 17                    3328 	.db #0x17	; 23
      00021C 18                    3329 	.db #0x18	; 24
      00021D 19                    3330 	.db #0x19	; 25
      00021E 1A                    3331 	.db #0x1a	; 26
      00021F 1B                    3332 	.db #0x1b	; 27
      000220 1C                    3333 	.db #0x1c	; 28
      000221 1D                    3334 	.db #0x1d	; 29
      000222 1E                    3335 	.db #0x1e	; 30
      000223 1F                    3336 	.db #0x1f	; 31
      000224 50                    3337 	.db #0x50	; 80	'P'
      000225 51                    3338 	.db #0x51	; 81	'Q'
      000226 52                    3339 	.db #0x52	; 82	'R'
      000227 53                    3340 	.db #0x53	; 83	'S'
      000228 54                    3341 	.db #0x54	; 84	'T'
      000229 55                    3342 	.db #0x55	; 85	'U'
      00022A 56                    3343 	.db #0x56	; 86	'V'
      00022B 57                    3344 	.db #0x57	; 87	'W'
      00022C 58                    3345 	.db #0x58	; 88	'X'
      00022D 59                    3346 	.db #0x59	; 89	'Y'
      00022E 5A                    3347 	.db #0x5a	; 90	'Z'
      00022F 5B                    3348 	.db #0x5b	; 91
      000230 5C                    3349 	.db #0x5c	; 92
      000231 5D                    3350 	.db #0x5d	; 93
      000232 5E                    3351 	.db #0x5e	; 94
      000233 5F                    3352 	.db #0x5f	; 95
                                   3353 	.area CONST   (CODE)
      000234                       3354 ___str_0:
      000234 25 78 20 25 78        3355 	.ascii "%x %x"
      000239 0A                    3356 	.db 0x0a
      00023A 0D                    3357 	.db 0x0d
      00023B 00                    3358 	.db 0x00
                                   3359 	.area CSEG    (CODE)
                                   3360 	.area CONST   (CODE)
      00023C                       3361 ___str_1:
      00023C 0A                    3362 	.db 0x0a
      00023D 0D                    3363 	.db 0x0d
      00023E 45 6E 74 65 72 20 76  3364 	.ascii "Enter value for Row %d"
             61 6C 75 65 20 66 6F
             72 20 52 6F 77 20 25
             64
      000254 0A                    3365 	.db 0x0a
      000255 0D                    3366 	.db 0x0d
      000256 00                    3367 	.db 0x00
                                   3368 	.area CSEG    (CODE)
                                   3369 	.area CONST   (CODE)
      000257                       3370 ___str_2:
      000257 0A                    3371 	.db 0x0a
      000258 0D                    3372 	.db 0x0d
      000259 50 6C 65 61 73 65 20  3373 	.ascii "Please Input a maximum of 48 characters"
             49 6E 70 75 74 20 61
             20 6D 61 78 69 6D 75
             6D 20 6F 66 20 34 38
             20 63 68 61 72 61 63
             74 65 72 73
      000280 0A                    3374 	.db 0x0a
      000281 0D                    3375 	.db 0x0d
      000282 00                    3376 	.db 0x00
                                   3377 	.area CSEG    (CODE)
                                   3378 	.area CONST   (CODE)
      000283                       3379 ___str_3:
      000283 0A                    3380 	.db 0x0a
      000284 0D                    3381 	.db 0x0d
      000285 44 44 52 41 4D 20 43  3382 	.ascii "DDRAM Contents"
             6F 6E 74 65 6E 74 73
      000293 0A                    3383 	.db 0x0a
      000294 0D                    3384 	.db 0x0d
      000295 00                    3385 	.db 0x00
                                   3386 	.area CSEG    (CODE)
                                   3387 	.area CONST   (CODE)
      000296                       3388 ___str_4:
      000296 25 32 78 3A 20        3389 	.ascii "%2x: "
      00029B 00                    3390 	.db 0x00
                                   3391 	.area CSEG    (CODE)
                                   3392 	.area CONST   (CODE)
      00029C                       3393 ___str_5:
      00029C 25 32 78 20           3394 	.ascii "%2x "
      0002A0 00                    3395 	.db 0x00
                                   3396 	.area CSEG    (CODE)
                                   3397 	.area CONST   (CODE)
      0002A1                       3398 ___str_6:
      0002A1 0A                    3399 	.db 0x0a
      0002A2 0D                    3400 	.db 0x0d
      0002A3 00                    3401 	.db 0x00
                                   3402 	.area CSEG    (CODE)
                                   3403 	.area CONST   (CODE)
      0002A4                       3404 ___str_7:
      0002A4 0A                    3405 	.db 0x0a
      0002A5 0D                    3406 	.db 0x0d
      0002A6 43 47 52 41 4D 20 43  3407 	.ascii "CGRAM Contents"
             6F 6E 74 65 6E 74 73
      0002B4 0A                    3408 	.db 0x0a
      0002B5 0D                    3409 	.db 0x0d
      0002B6 00                    3410 	.db 0x00
                                   3411 	.area CSEG    (CODE)
                                   3412 	.area CONST   (CODE)
      0002B7                       3413 ___str_8:
      0002B7 0A                    3414 	.db 0x0a
      0002B8 0D                    3415 	.db 0x0d
      0002B9 45 6E 74 65 72 20 77  3416 	.ascii "Enter w to go up, s to go down, a to go left and d to go rig"
             20 74 6F 20 67 6F 20
             75 70 2C 20 73 20 74
             6F 20 67 6F 20 64 6F
             77 6E 2C 20 61 20 74
             6F 20 67 6F 20 6C 65
             66 74 20 61 6E 64 20
             64 20 74 6F 20 67 6F
             20 72 69 67
      0002F5 68 74 20 61 6E 64 20  3417 	.ascii "ht and q to quit"
             71 20 74 6F 20 71 75
             69 74
      000305 0A                    3418 	.db 0x0a
      000306 0D                    3419 	.db 0x0d
      000307 00                    3420 	.db 0x00
                                   3421 	.area CSEG    (CODE)
                                   3422 	.area CONST   (CODE)
      000308                       3423 ___str_9:
      000308 47 41 4D 45 20 4F 56  3424 	.ascii "GAME OVER! PRESS p to restart"
             45 52 21 20 50 52 45
             53 53 20 70 20 74 6F
             20 72 65 73 74 61 72
             74
      000325 00                    3425 	.db 0x00
                                   3426 	.area CSEG    (CODE)
                                   3427 	.area CONST   (CODE)
      000326                       3428 ___str_10:
      000326 25 73                 3429 	.ascii "%s"
      000328 00                    3430 	.db 0x00
                                   3431 	.area CSEG    (CODE)
                                   3432 	.area XINIT   (CODE)
                                   3433 	.area CABS    (ABS,CODE)
